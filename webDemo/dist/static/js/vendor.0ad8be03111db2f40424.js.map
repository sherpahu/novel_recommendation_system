{"version":3,"sources":["webpack:///static/js/vendor.0ad8be03111db2f40424.js","webpack:///./~/_vue@1.0.28@vue/dist/vue.common.js","webpack:///./~/_vuex@1.0.1@vuex/dist/vuex.js"],"names":["webpackJsonp","1","module","exports","__webpack_require__","set","obj","key","val","hasOwn","_isVue","_data","ob","__ob__","convert","dep","notify","vms","i","length","vm","_proxy","_digest","del","_unproxy","hasOwnProperty","call","isLiteral","exp","literalValueRE","test","isReserved","str","c","charCodeAt","_toString","value","toString","toNumber","parsed","Number","isNaN","toBoolean","stripQuotes","a","b","slice","camelize","replace","camelizeRE","toUpper","_","toUpperCase","hyphenate","hyphenateRE","toLowerCase","classify","classifyRE","bind","fn","ctx","l","arguments","apply","toArray","list","start","ret","Array","extend","to","from","keys","Object","isObject","isPlainObject","OBJECT_STRING","def","enumerable","defineProperty","writable","configurable","_debounce","func","wait","timeout","args","context","timestamp","result","later","last","Date","now","setTimeout","this","indexOf","arr","cancellable","cb","cancelled","cancel","looseEqual","JSON","stringify","isNative","Ctor","Cache","limit","size","head","tail","undefined","_keymap","create","peek","index","next","eof","len","eatSpace","spaceChr","isStringStart","chr","doubleChr","singleChr","isExpStart","expStartChr","isExpEnd","expChrPair","parseString","stringQuote","escapeChr","parseSpecialExp","inExp","startChr","parseExpression","pipeChr","state","startState","filterArgState","filterState","filterNameState","parseFilterList","filters","push","parseFilter","filter","name","trim","parseFilterArguments","arg","processFilterArg","reservedArgRE","dynamic","stripped","parseDirective","s","hit","cache$1","get","dir","expression","put","escapeRegex","regexEscapeRE","compileRegex","open","config","delimiters","close","unsafeOpen","unsafeDelimiters","unsafeClose","tagRE","RegExp","htmlRE","cache","parseText","text","match","html","first","oneTime","tokens","lastIndex","exec","tag","tokensToExp","map","token","formatToken","join","single","$eval","inlineFilters","filterRE","appendWithTransition","el","target","applyTransition","appendChild","beforeWithTransition","before","removeWithTransition","remove","direction","op","transition","__v_trans","hooks","transitionEndEvent","_isCompiled","$parent","action","query","document","querySelector","inDoc","node","doc","ownerDocument","documentElement","parent","parentNode","nodeType","contains","getAttr","_attr","getAttribute","removeAttribute","getBindAttr","hasBindAttr","hasAttribute","insertBefore","after","nextSibling","removeChild","prepend","firstChild","replaceChild","on","event","useCapture","addEventListener","off","removeEventListener","getClass","classname","className","baseVal","setClass","cls","isIE9","namespaceURI","setAttribute","addClass","classList","add","cur","removeClass","tar","extractContent","asFragment","child","rawContent","isTemplate","isFragment","content","hasChildNodes","trimNode","createDocumentFragment","createElement","isTrimmable","lastChild","data","tagName","createAnchor","persist","anchor","debug","createComment","createTextNode","__v_anchor","findRef","hasAttributes","attrs","attributes","refRE","mapNodeRange","end","removeNodeRange","frag","onRemoved","removed","done","nodes","getOuterHTML","outerHTML","container","cloneNode","innerHTML","checkComponentAttr","options","hasAttrs","commonTagRE","reservedTagRE","getIsBinding","resolveAsset","id","is","mergeData","toVal","fromVal","mergeAssets","parentVal","childVal","res","guardArrayAssets","guardComponents","components","ids","Vue","guardProps","props","isArray","type","assets","asset","mergeOptions","mergeField","strat","strats","defaultStrat","mixins","mixin","mixinOptions","prototype","warnMissing","camelizedId","charAt","Dep","uid$1","subs","withoutConversion","shouldConvert","Observer","augment","hasProto","protoAugment","copyAugment","arrayMethods","arrayKeys","observeArray","walk","src","__proto__","observe","isExtensible","addVm","defineReactive","property","getOwnPropertyDescriptor","getter","setter","childOb","depend","e","newVal","initMixin","_init","$el","$root","$children","$refs","$els","_watchers","_directives","_uid","uid","_events","_eventsCount","_isFragment","_fragment","_fragmentStart","_fragmentEnd","_isDestroyed","_isReady","_isAttached","_isBeingDestroyed","_vForRemoving","_unlinkFn","_context","_scope","_frag","children","$options","constructor","_updateRef","_callHook","_initState","_initEvents","$mount","getPathCharType","ch","code","formatSubPath","path","trimmed","parse","maybeUnescapeQuote","nextChar","mode","IN_SINGLE_QUOTE","IN_DOUBLE_QUOTE","newChar","actions","APPEND","typeMap","BEFORE_PATH","subPathDepth","PUSH","INC_SUB_PATH_DEPTH","PUSH_SUB_PATH","IN_SUB_PATH","pathStateMachine","ERROR","AFTER_PATH","raw","parsePath","pathCache","getPath","parseExpression$1","setPath","original","$set","noop","save","isString","saved","newlineRE","rewrite","allowedKeywordsRE","restoreRE","restore","compileGetter","improperKeywordsRE","body","saveRE","wsRE","identRE","makeGetterFn","Function","compileSetter","scope","needSet","expressionCache","isSimplePath","pathTestRE","literalValueRE$1","resetBatcherState","queue","userQueue","has","circular","waiting","flushBatcherQueue","_again","runBatcherQueue","devtools","emit","watcher","run","pushWatcher","q","user","nextTick","Watcher","expOrFn","isFn","uid$2","active","dirty","lazy","deps","newDeps","depIds","_Set","newDepIds","prevError","twoWay","queued","shallow","traverse","seen","seenObjects","clear","isA","isO","depId","isRealTemplate","stringToFragment","templateString","cacheKey","templateCache","tagMatch","tagRE$1","entityMatch","entityRE","commentMatch","commentRE","wrap","efault","depth","prefix","suffix","nodeToFragment","textContent","clonedNode","querySelectorAll","cloned","hasBrokenTemplate","tempClone","hasTextareaCloneBug","parseTemplate","template","shouldClone","idSelectorCache","getElementById","Fragment","linker","host","parentFrag","childFrags","inserted","unlink","childNodes","singleBefore","singleRemove","multiBefore","multiRemove","__v_frag","withTransition","method","callHook","attach","shouldCallRemove","self","beforeRemove","detach","destroy","FragmentFactory","cid","cacheId","linkerCache","compile","findPrevFrag","previousSibling","forId","range","n","Math","floor","getTrackByKey","trackByKey","findVmFromFrag","__vue__","getValue","multi","init","selected","_value","indexOf$1","keyFilter","handler","codes","charCode","parseInt","keyCodes","concat","keyCode","stopFilter","stopPropagation","preventFilter","preventDefault","selfFilter","currentTarget","normalize","prop","propCache","camel","upper","testEl","prefixed","prefixes","style","kebab","camelPrefixes","normalize$1","_key","k","split","callActivateHooks","called","total","compileProps","propOptions","attr","propsData","names","empty","identRE$1","propBindingModes","ONE_WAY","TWO_WAY","ONE_TIME","optimizedLiteral","parentPath","makePropsLinkFn","_props","inlineProps","initProp","$get","_bindDir","propDef","Boolean","processPropValue","rawValue","isSimple","getPropDefaultValue","coerceProp","coerced","assertProp","updateProp","required","valid","expectedTypes","assertedType","assertType","expectedType","validator","coerce","String","pushJob","job","queue$1","flush","f","offsetHeight","Transition","enterClass","leaveClass","pendingCssEvent","pendingCssCb","pendingJsCb","justEntered","entered","left","typeCache","forEach","m","isHidden","rect","getBoundingClientRect","width","height","offsetWidth","getClientRects","partial","nodeLinkFn","_asComponent","compileNode","childLinkFn","terminal","isScript","compileNodeList","dirs","linkAndCapture","makeUnlinkFn","originalDirCount","sortDirectives","_bind","j","groupedMap","priorities","priority","descriptor","DEFAULT_PRIORITY","array","sort","group","contextDirs","destroying","teardownDirs","_teardown","compileAndLinkProps","propsLinkFn","propDirs","compileRoot","contextOptions","contextLinkFn","replacerLinkFn","containerAttrs","_containerAttrs","replacerAttrs","_replacerAttrs","compileDirectives","selfDirs","compileTextNode","compileElement","skip","linkFn","checkTerminalDirectives","checkElementDirectives","checkComponent","_skip","removeText","wholeText","processTextToken","makeTextNodeLinkFn","setTokenType","directives","fragClone","nodeList","linkFns","makeChildLinkFn","childrenLinkFn","makeTerminalNodeLinkFn","component","ref","internalDirectives","modifiers","literal","componentLinkFn","prev","previousElementSibling","matched","dirName","rawName","termDef","modifierRE","dirAttrRE","DEFAULT_TERMINAL_PRIORITY","parseModifiers","pushDir","interpTokens","hasOneTimeToken","hasOneTime","interp","dirDef","transitionRE","bindRE","onRE","makeNodeLinkFn","transclude","extractAttrs","_content","transcludeTemplate","replacer","mergeAttrs","specialCharRE","resolveSlots","contents","_slotContents","extractFragment","stateMixin","makeComputedGetter","owner","evaluate","newData","_setData","_initProps","_initMeta","_initMethods","_initData","_initComputed","_propsUnlinkFn","dataFn","oldData","removeVm","update","computed","userDef","methods","metas","_meta","eventsMixin","registerComponentEvents","eventRE","_fromParent","$on","registerCallbacks","hash","handlers","register","onAttached","callAttach","onDetached","callDetach","events","watch","_initDOMHooks","hook","$emit","noop$1","Directive","_locked","_bound","_listeners","_host","lifecycleMixin","_ref","refs","_compile","_initElement","rootLinker","contentLinkFn","ctor","_linkerCachable","rootUnlinkFn","contentUnlinkFn","_destroy","deferCleanup","_cleanup","destroyReady","pendingRemoval","cleanupIfPossible","$remove","$destroy","teardown","$off","miscMixin","_applyFilters","oldValue","write","offset","read","_resolveComponent","factory","resolved","requested","pendingCallbacks","cbs","reason","dataAPI","clean","asStatement","$arguments","$delete","$watch","deep","sync","immediate","filterRE$1","$interpolate","$log","console","log","domAPI","insert","op1","op2","targetIsDetached","shouldCallHook","append","beforeWithCb","removeWithCb","$nextTick","$appendTo","$prependTo","$before","$after","inDocument","realCb","eventsAPI","modifyListenerCount","count","hookRE","$once","splice","isSource","shouldPropagate","hasParentCbs","some","$broadcast","source","$dispatch","lifecycleAPI","ready","$compile","limitBy","filterBy","search","delimiter","convertArray","item","$value","$key","orderBy","baseCompare","sortKeyIndex","sortKey","sortKeys","order","comparator","firstArg","installGlobalAPI","createClass","elementDirectives","transitions","partials","util","compiler","parsers","directive","extendOptions","Super","isFirstExtend","_Ctor","Sub","_assetTypes","use","plugin","installed","unshift","install","definition","inBrowser","window","__VUE_DEVTOOLS_GLOBAL_HOOK__","UA","navigator","userAgent","isIE","isAndroid","isIOS","transitionProp","animationProp","animationEndEvent","isWebkitTrans","ontransitionend","onwebkittransitionend","isWebkitAnim","onanimationend","onwebkitanimationend","nextTickHandler","pending","copies","callbacks","timerFunc","Promise","p","resolve","then","MutationObserver","counter","observer","textNode","characterData","Set","entry","shift","newer","older","returnEntry","91","123","40","freeze","defineProperties","silent","async","warnExpressionErrors","_delimitersChanged","_propBindingModes","_maxUpdateCount","warn","optionMergeStrategies","instanceData","defaultData","created","attached","detached","beforeCompile","compiled","beforeDestroy","destroyed","activate","addSub","sub","removeSub","addDep","arrayProto","getOwnPropertyNames","items","debounce","IN_PATH","BEFORE_IDENT","IN_IDENT","ws","ident","[",".","0","number","'","\"","]","else","allowedKeywords","improperKeywords","beforeGet","preProcess","postProcess","afterGet","forContext","$forContext","alias","_withLock","$index","tmp","current","text$1","legend","tr","col","td","th","option","optgroup","thead","tbody","colgroup","caption","tfoot","g","defs","symbol","image","circle","ellipse","line","polygon","polyline","t","placeholder","swap","_watcher","ON","MODEL","BIND","TRANSITION","EL","COMPONENT","PARTIAL","IF","FOR","SLOT","uid$3","vFor","params","inMatch","itMatch","iterator","isOption","diff","updateRef","updateModel","primitive","convertedFromObject","fromObject","trackBy","oldFrags","frags","getCachedFrag","reused","fresh","removalIndex","totalRemoved","deleteCachedFrag","w","targetPrev","prevEl","currentPrev","insertionIndex","staggerCb","staggerAnchor","move","parentScope","cacheFrag","model","__v_model","forceUpdate","staggerAmount","getStagger","trans","stagger","_preProcess","_postProcess","unbind","vIf","invalid","nextElementSibling","elseEl","elseFrag","elseFactory","show","toggle","display","text$2","isRange","composing","listener","focused","rawListener","hasjQuery","jQuery","afterBind","radio","checked","select","_this","multiple","initValue","selectedIndex","checkbox","getBooleanValue","_trueValue","_falseValue","checkFilters","hasRead","hasWrite","_unbind","esc","tab","enter","space","delete","up","right","down","on$1","acceptStatement","iframeBind","contentWindow","capture","stop","prevent","reset","importantRE","cssText","handleObject","reduce","handleSingle","isImportant","setProperty","xlinkNS","xlinkRE","disallowedInterpAttrRE","attrWithPropsRE","enumeratedAttrRE","modelProps","true-value","false-value","bind$1","attrValue","modelProp","setAttributeNS","cloak","for","if","vClass","cleanup","prevKeys","keepAlive","inlineTemplate","pendingComponentCb","Component","pendingRemovals","pendingRemovalCb","setComponent","invalidatePending","resolveComponent","mountComponent","unbuild","childVM","ComponentName","activateHooks","cached","getCached","newComponent","build","waitingFor","extraOptions","_isRouterView","defer","_inactive","transitionMode","bindingModes","childKey","parentKey","parentWatcher","childWatcher","TYPE_TRANSITION","TYPE_ANIMATION","transDurationProp","animDurationProp","raf","requestAnimationFrame","waitForTransitionStart","p$1","cancelPending","callHookWithCb","enterCancelled","enterNextTick","enterDone","getCssTransitionType","setupCssCb","leave","leaveCancelled","leaveDone","leaveNextTick","hasPending","hidden","css","inlineStyles","computedStyles","getComputedStyle","transDuration","animDuration","onEnd","transition$1","oldId","class","_setupParams","_checkStatement","_update","oldVal","mappedKey","_setupParamWatcher","unwatch","paramWatchers","_paramUnwatchFns","$event","listeners","unwatchFns","slot","fallback","elseBlock","digitsRE","json","indent","capitalize","uppercase","lowercase","currency","_currency","decimals","parseFloat","isFinite","stringified","abs","toFixed","_int","_float","sign","pluralize","delay","version","17","global","mergeObjects","existing","_typeof","getNestedState","nestedKeys","getWatcher","getDep","devtoolPlugin","store","targetState","replaceState","subscribe","mutation","_Vue","override","Symbol","classCallCheck","instance","Constructor","TypeError","protoProps","staticProps","toConsumableArray","arr2","vuexInit","vuex","$store","getters","defineVuexGetter","makeBoundAction","Error","_getterCacheId","_vm","computedGetter","_len","_key2","usesInit","_lifecycleHooks","beforeCreate","merge","Store","_ref$state","_ref$mutations","mutations","_ref$modules","modules","_ref$plugins","plugins","_ref$strict","strict","_dispatching","_rootMutations","_mutations","_modules","_subscribers","dispatch","_setupModuleState","_setupModuleMutations","_setupMutationCheck","_this2","_len2","payload","isObjectStyleDispatch","h","_this3","error","_ref2","_this4","updatedModules","updatedMutations","_createModuleMutations","_this5","newNestedKeys","nestedMutations","_len3","_key3","_this6","v"],"mappings":"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","file":"static/js/vendor.0ad8be03111db2f40424.js","sourcesContent":["webpackJsonp([2,0],{\n\n/***/ 1:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Vue.js v1.0.28\n\t * (c) 2016 Evan You\n\t * Released under the MIT License.\n\t */\n\t'use strict';\n\t\n\tfunction set(obj, key, val) {\n\t  if (hasOwn(obj, key)) {\n\t    obj[key] = val;\n\t    return;\n\t  }\n\t  if (obj._isVue) {\n\t    set(obj._data, key, val);\n\t    return;\n\t  }\n\t  var ob = obj.__ob__;\n\t  if (!ob) {\n\t    obj[key] = val;\n\t    return;\n\t  }\n\t  ob.convert(key, val);\n\t  ob.dep.notify();\n\t  if (ob.vms) {\n\t    var i = ob.vms.length;\n\t    while (i--) {\n\t      var vm = ob.vms[i];\n\t      vm._proxy(key);\n\t      vm._digest();\n\t    }\n\t  }\n\t  return val;\n\t}\n\t\n\t/**\n\t * Delete a property and trigger change if necessary.\n\t *\n\t * @param {Object} obj\n\t * @param {String} key\n\t */\n\t\n\tfunction del(obj, key) {\n\t  if (!hasOwn(obj, key)) {\n\t    return;\n\t  }\n\t  delete obj[key];\n\t  var ob = obj.__ob__;\n\t  if (!ob) {\n\t    if (obj._isVue) {\n\t      delete obj._data[key];\n\t      obj._digest();\n\t    }\n\t    return;\n\t  }\n\t  ob.dep.notify();\n\t  if (ob.vms) {\n\t    var i = ob.vms.length;\n\t    while (i--) {\n\t      var vm = ob.vms[i];\n\t      vm._unproxy(key);\n\t      vm._digest();\n\t    }\n\t  }\n\t}\n\t\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\t/**\n\t * Check whether the object has the property.\n\t *\n\t * @param {Object} obj\n\t * @param {String} key\n\t * @return {Boolean}\n\t */\n\t\n\tfunction hasOwn(obj, key) {\n\t  return hasOwnProperty.call(obj, key);\n\t}\n\t\n\t/**\n\t * Check if an expression is a literal value.\n\t *\n\t * @param {String} exp\n\t * @return {Boolean}\n\t */\n\t\n\tvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\t\n\tfunction isLiteral(exp) {\n\t  return literalValueRE.test(exp);\n\t}\n\t\n\t/**\n\t * Check if a string starts with $ or _\n\t *\n\t * @param {String} str\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isReserved(str) {\n\t  var c = (str + '').charCodeAt(0);\n\t  return c === 0x24 || c === 0x5F;\n\t}\n\t\n\t/**\n\t * Guard text output, make sure undefined outputs\n\t * empty string\n\t *\n\t * @param {*} value\n\t * @return {String}\n\t */\n\t\n\tfunction _toString(value) {\n\t  return value == null ? '' : value.toString();\n\t}\n\t\n\t/**\n\t * Check and convert possible numeric strings to numbers\n\t * before setting back to data\n\t *\n\t * @param {*} value\n\t * @return {*|Number}\n\t */\n\t\n\tfunction toNumber(value) {\n\t  if (typeof value !== 'string') {\n\t    return value;\n\t  } else {\n\t    var parsed = Number(value);\n\t    return isNaN(parsed) ? value : parsed;\n\t  }\n\t}\n\t\n\t/**\n\t * Convert string boolean literals into real booleans.\n\t *\n\t * @param {*} value\n\t * @return {*|Boolean}\n\t */\n\t\n\tfunction toBoolean(value) {\n\t  return value === 'true' ? true : value === 'false' ? false : value;\n\t}\n\t\n\t/**\n\t * Strip quotes from a string\n\t *\n\t * @param {String} str\n\t * @return {String | false}\n\t */\n\t\n\tfunction stripQuotes(str) {\n\t  var a = str.charCodeAt(0);\n\t  var b = str.charCodeAt(str.length - 1);\n\t  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n\t}\n\t\n\t/**\n\t * Camelize a hyphen-delimited string.\n\t *\n\t * @param {String} str\n\t * @return {String}\n\t */\n\t\n\tvar camelizeRE = /-(\\w)/g;\n\t\n\tfunction camelize(str) {\n\t  return str.replace(camelizeRE, toUpper);\n\t}\n\t\n\tfunction toUpper(_, c) {\n\t  return c ? c.toUpperCase() : '';\n\t}\n\t\n\t/**\n\t * Hyphenate a camelCase string.\n\t *\n\t * @param {String} str\n\t * @return {String}\n\t */\n\t\n\tvar hyphenateRE = /([^-])([A-Z])/g;\n\t\n\tfunction hyphenate(str) {\n\t  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n\t}\n\t\n\t/**\n\t * Converts hyphen/underscore/slash delimitered names into\n\t * camelized classNames.\n\t *\n\t * e.g. my-component => MyComponent\n\t *      some_else    => SomeElse\n\t *      some/comp    => SomeComp\n\t *\n\t * @param {String} str\n\t * @return {String}\n\t */\n\t\n\tvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\t\n\tfunction classify(str) {\n\t  return str.replace(classifyRE, toUpper);\n\t}\n\t\n\t/**\n\t * Simple bind, faster than native\n\t *\n\t * @param {Function} fn\n\t * @param {Object} ctx\n\t * @return {Function}\n\t */\n\t\n\tfunction bind(fn, ctx) {\n\t  return function (a) {\n\t    var l = arguments.length;\n\t    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n\t  };\n\t}\n\t\n\t/**\n\t * Convert an Array-like object to a real Array.\n\t *\n\t * @param {Array-like} list\n\t * @param {Number} [start] - start index\n\t * @return {Array}\n\t */\n\t\n\tfunction toArray(list, start) {\n\t  start = start || 0;\n\t  var i = list.length - start;\n\t  var ret = new Array(i);\n\t  while (i--) {\n\t    ret[i] = list[i + start];\n\t  }\n\t  return ret;\n\t}\n\t\n\t/**\n\t * Mix properties into target object.\n\t *\n\t * @param {Object} to\n\t * @param {Object} from\n\t */\n\t\n\tfunction extend(to, from) {\n\t  var keys = Object.keys(from);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    to[keys[i]] = from[keys[i]];\n\t  }\n\t  return to;\n\t}\n\t\n\t/**\n\t * Quick object check - this is primarily used to tell\n\t * Objects from primitive values when we know the value\n\t * is a JSON-compliant type.\n\t *\n\t * @param {*} obj\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isObject(obj) {\n\t  return obj !== null && typeof obj === 'object';\n\t}\n\t\n\t/**\n\t * Strict object type check. Only returns true\n\t * for plain JavaScript objects.\n\t *\n\t * @param {*} obj\n\t * @return {Boolean}\n\t */\n\t\n\tvar toString = Object.prototype.toString;\n\tvar OBJECT_STRING = '[object Object]';\n\t\n\tfunction isPlainObject(obj) {\n\t  return toString.call(obj) === OBJECT_STRING;\n\t}\n\t\n\t/**\n\t * Array type check.\n\t *\n\t * @param {*} obj\n\t * @return {Boolean}\n\t */\n\t\n\tvar isArray = Array.isArray;\n\t\n\t/**\n\t * Define a property.\n\t *\n\t * @param {Object} obj\n\t * @param {String} key\n\t * @param {*} val\n\t * @param {Boolean} [enumerable]\n\t */\n\t\n\tfunction def(obj, key, val, enumerable) {\n\t  Object.defineProperty(obj, key, {\n\t    value: val,\n\t    enumerable: !!enumerable,\n\t    writable: true,\n\t    configurable: true\n\t  });\n\t}\n\t\n\t/**\n\t * Debounce a function so it only gets called after the\n\t * input stops arriving after the given wait period.\n\t *\n\t * @param {Function} func\n\t * @param {Number} wait\n\t * @return {Function} - the debounced function\n\t */\n\t\n\tfunction _debounce(func, wait) {\n\t  var timeout, args, context, timestamp, result;\n\t  var later = function later() {\n\t    var last = Date.now() - timestamp;\n\t    if (last < wait && last >= 0) {\n\t      timeout = setTimeout(later, wait - last);\n\t    } else {\n\t      timeout = null;\n\t      result = func.apply(context, args);\n\t      if (!timeout) context = args = null;\n\t    }\n\t  };\n\t  return function () {\n\t    context = this;\n\t    args = arguments;\n\t    timestamp = Date.now();\n\t    if (!timeout) {\n\t      timeout = setTimeout(later, wait);\n\t    }\n\t    return result;\n\t  };\n\t}\n\t\n\t/**\n\t * Manual indexOf because it's slightly faster than\n\t * native.\n\t *\n\t * @param {Array} arr\n\t * @param {*} obj\n\t */\n\t\n\tfunction indexOf(arr, obj) {\n\t  var i = arr.length;\n\t  while (i--) {\n\t    if (arr[i] === obj) return i;\n\t  }\n\t  return -1;\n\t}\n\t\n\t/**\n\t * Make a cancellable version of an async callback.\n\t *\n\t * @param {Function} fn\n\t * @return {Function}\n\t */\n\t\n\tfunction cancellable(fn) {\n\t  var cb = function cb() {\n\t    if (!cb.cancelled) {\n\t      return fn.apply(this, arguments);\n\t    }\n\t  };\n\t  cb.cancel = function () {\n\t    cb.cancelled = true;\n\t  };\n\t  return cb;\n\t}\n\t\n\t/**\n\t * Check if two values are loosely equal - that is,\n\t * if they are plain objects, do they have the same shape?\n\t *\n\t * @param {*} a\n\t * @param {*} b\n\t * @return {Boolean}\n\t */\n\t\n\tfunction looseEqual(a, b) {\n\t  /* eslint-disable eqeqeq */\n\t  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n\t  /* eslint-enable eqeqeq */\n\t}\n\t\n\tvar hasProto = ('__proto__' in {});\n\t\n\t// Browser environment sniffing\n\tvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\t\n\t// detect devtools\n\tvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\t\n\t// UA sniffing for working around browser-specific quirks\n\tvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\n\tvar isIE = UA && UA.indexOf('trident') > 0;\n\tvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\n\tvar isAndroid = UA && UA.indexOf('android') > 0;\n\tvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\t\n\tvar transitionProp = undefined;\n\tvar transitionEndEvent = undefined;\n\tvar animationProp = undefined;\n\tvar animationEndEvent = undefined;\n\t\n\t// Transition property/event sniffing\n\tif (inBrowser && !isIE9) {\n\t  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n\t  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n\t  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n\t  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n\t  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n\t  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n\t}\n\t\n\t/* istanbul ignore next */\n\tfunction isNative(Ctor) {\n\t  return (/native code/.test(Ctor.toString())\n\t  );\n\t}\n\t\n\t/**\n\t * Defer a task to execute it asynchronously. Ideally this\n\t * should be executed as a microtask, so we leverage\n\t * MutationObserver if it's available, and fallback to\n\t * setTimeout(0).\n\t *\n\t * @param {Function} cb\n\t * @param {Object} ctx\n\t */\n\t\n\tvar nextTick = (function () {\n\t  var callbacks = [];\n\t  var pending = false;\n\t  var timerFunc = undefined;\n\t\n\t  function nextTickHandler() {\n\t    pending = false;\n\t    var copies = callbacks.slice(0);\n\t    callbacks.length = 0;\n\t    for (var i = 0; i < copies.length; i++) {\n\t      copies[i]();\n\t    }\n\t  }\n\t\n\t  // the nextTick behavior leverages the microtask queue, which can be accessed\n\t  // via either native Promise.then or MutationObserver.\n\t  // MutationObserver has wider support, however it is seriously bugged in\n\t  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n\t  // completely stops working after triggering a few times... so, if native\n\t  // Promise is available, we will use it:\n\t  /* istanbul ignore if */\n\t  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n\t    var p = Promise.resolve();\n\t    var noop = function noop() {};\n\t    timerFunc = function () {\n\t      p.then(nextTickHandler);\n\t      // in problematic UIWebViews, Promise.then doesn't completely break, but\n\t      // it can get stuck in a weird state where callbacks are pushed into the\n\t      // microtask queue but the queue isn't being flushed, until the browser\n\t      // needs to do some other work, e.g. handle a timer. Therefore we can\n\t      // \"force\" the microtask queue to be flushed by adding an empty timer.\n\t      if (isIOS) setTimeout(noop);\n\t    };\n\t  } else if (typeof MutationObserver !== 'undefined') {\n\t    // use MutationObserver where native Promise is not available,\n\t    // e.g. IE11, iOS7, Android 4.4\n\t    var counter = 1;\n\t    var observer = new MutationObserver(nextTickHandler);\n\t    var textNode = document.createTextNode(String(counter));\n\t    observer.observe(textNode, {\n\t      characterData: true\n\t    });\n\t    timerFunc = function () {\n\t      counter = (counter + 1) % 2;\n\t      textNode.data = String(counter);\n\t    };\n\t  } else {\n\t    // fallback to setTimeout\n\t    /* istanbul ignore next */\n\t    timerFunc = setTimeout;\n\t  }\n\t\n\t  return function (cb, ctx) {\n\t    var func = ctx ? function () {\n\t      cb.call(ctx);\n\t    } : cb;\n\t    callbacks.push(func);\n\t    if (pending) return;\n\t    pending = true;\n\t    timerFunc(nextTickHandler, 0);\n\t  };\n\t})();\n\t\n\tvar _Set = undefined;\n\t/* istanbul ignore if */\n\tif (typeof Set !== 'undefined' && isNative(Set)) {\n\t  // use native Set when available.\n\t  _Set = Set;\n\t} else {\n\t  // a non-standard Set polyfill that only works with primitive keys.\n\t  _Set = function () {\n\t    this.set = Object.create(null);\n\t  };\n\t  _Set.prototype.has = function (key) {\n\t    return this.set[key] !== undefined;\n\t  };\n\t  _Set.prototype.add = function (key) {\n\t    this.set[key] = 1;\n\t  };\n\t  _Set.prototype.clear = function () {\n\t    this.set = Object.create(null);\n\t  };\n\t}\n\t\n\tfunction Cache(limit) {\n\t  this.size = 0;\n\t  this.limit = limit;\n\t  this.head = this.tail = undefined;\n\t  this._keymap = Object.create(null);\n\t}\n\t\n\tvar p = Cache.prototype;\n\t\n\t/**\n\t * Put <value> into the cache associated with <key>.\n\t * Returns the entry which was removed to make room for\n\t * the new entry. Otherwise undefined is returned.\n\t * (i.e. if there was enough room already).\n\t *\n\t * @param {String} key\n\t * @param {*} value\n\t * @return {Entry|undefined}\n\t */\n\t\n\tp.put = function (key, value) {\n\t  var removed;\n\t\n\t  var entry = this.get(key, true);\n\t  if (!entry) {\n\t    if (this.size === this.limit) {\n\t      removed = this.shift();\n\t    }\n\t    entry = {\n\t      key: key\n\t    };\n\t    this._keymap[key] = entry;\n\t    if (this.tail) {\n\t      this.tail.newer = entry;\n\t      entry.older = this.tail;\n\t    } else {\n\t      this.head = entry;\n\t    }\n\t    this.tail = entry;\n\t    this.size++;\n\t  }\n\t  entry.value = value;\n\t\n\t  return removed;\n\t};\n\t\n\t/**\n\t * Purge the least recently used (oldest) entry from the\n\t * cache. Returns the removed entry or undefined if the\n\t * cache was empty.\n\t */\n\t\n\tp.shift = function () {\n\t  var entry = this.head;\n\t  if (entry) {\n\t    this.head = this.head.newer;\n\t    this.head.older = undefined;\n\t    entry.newer = entry.older = undefined;\n\t    this._keymap[entry.key] = undefined;\n\t    this.size--;\n\t  }\n\t  return entry;\n\t};\n\t\n\t/**\n\t * Get and register recent use of <key>. Returns the value\n\t * associated with <key> or undefined if not in cache.\n\t *\n\t * @param {String} key\n\t * @param {Boolean} returnEntry\n\t * @return {Entry|*}\n\t */\n\t\n\tp.get = function (key, returnEntry) {\n\t  var entry = this._keymap[key];\n\t  if (entry === undefined) return;\n\t  if (entry === this.tail) {\n\t    return returnEntry ? entry : entry.value;\n\t  }\n\t  // HEAD--------------TAIL\n\t  //   <.older   .newer>\n\t  //  <--- add direction --\n\t  //   A  B  C  <D>  E\n\t  if (entry.newer) {\n\t    if (entry === this.head) {\n\t      this.head = entry.newer;\n\t    }\n\t    entry.newer.older = entry.older; // C <-- E.\n\t  }\n\t  if (entry.older) {\n\t    entry.older.newer = entry.newer; // C. --> E\n\t  }\n\t  entry.newer = undefined; // D --x\n\t  entry.older = this.tail; // D. --> E\n\t  if (this.tail) {\n\t    this.tail.newer = entry; // E. <-- D\n\t  }\n\t  this.tail = entry;\n\t  return returnEntry ? entry : entry.value;\n\t};\n\t\n\tvar cache$1 = new Cache(1000);\n\tvar reservedArgRE = /^in$|^-?\\d+/;\n\t\n\t/**\n\t * Parser state\n\t */\n\t\n\tvar str;\n\tvar dir;\n\tvar len;\n\tvar index;\n\tvar chr;\n\tvar state;\n\tvar startState = 0;\n\tvar filterState = 1;\n\tvar filterNameState = 2;\n\tvar filterArgState = 3;\n\t\n\tvar doubleChr = 0x22;\n\tvar singleChr = 0x27;\n\tvar pipeChr = 0x7C;\n\tvar escapeChr = 0x5C;\n\tvar spaceChr = 0x20;\n\t\n\tvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\n\tvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\n\t\n\tfunction peek() {\n\t  return str.charCodeAt(index + 1);\n\t}\n\t\n\tfunction next() {\n\t  return str.charCodeAt(++index);\n\t}\n\t\n\tfunction eof() {\n\t  return index >= len;\n\t}\n\t\n\tfunction eatSpace() {\n\t  while (peek() === spaceChr) {\n\t    next();\n\t  }\n\t}\n\t\n\tfunction isStringStart(chr) {\n\t  return chr === doubleChr || chr === singleChr;\n\t}\n\t\n\tfunction isExpStart(chr) {\n\t  return expStartChr[chr];\n\t}\n\t\n\tfunction isExpEnd(start, chr) {\n\t  return expChrPair[start] === chr;\n\t}\n\t\n\tfunction parseString() {\n\t  var stringQuote = next();\n\t  var chr;\n\t  while (!eof()) {\n\t    chr = next();\n\t    // escape char\n\t    if (chr === escapeChr) {\n\t      next();\n\t    } else if (chr === stringQuote) {\n\t      break;\n\t    }\n\t  }\n\t}\n\t\n\tfunction parseSpecialExp(chr) {\n\t  var inExp = 0;\n\t  var startChr = chr;\n\t\n\t  while (!eof()) {\n\t    chr = peek();\n\t    if (isStringStart(chr)) {\n\t      parseString();\n\t      continue;\n\t    }\n\t\n\t    if (startChr === chr) {\n\t      inExp++;\n\t    }\n\t    if (isExpEnd(startChr, chr)) {\n\t      inExp--;\n\t    }\n\t\n\t    next();\n\t\n\t    if (inExp === 0) {\n\t      break;\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * syntax:\n\t * expression | filterName  [arg  arg [| filterName arg arg]]\n\t */\n\t\n\tfunction parseExpression() {\n\t  var start = index;\n\t  while (!eof()) {\n\t    chr = peek();\n\t    if (isStringStart(chr)) {\n\t      parseString();\n\t    } else if (isExpStart(chr)) {\n\t      parseSpecialExp(chr);\n\t    } else if (chr === pipeChr) {\n\t      next();\n\t      chr = peek();\n\t      if (chr === pipeChr) {\n\t        next();\n\t      } else {\n\t        if (state === startState || state === filterArgState) {\n\t          state = filterState;\n\t        }\n\t        break;\n\t      }\n\t    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\n\t      eatSpace();\n\t      break;\n\t    } else {\n\t      if (state === filterState) {\n\t        state = filterNameState;\n\t      }\n\t      next();\n\t    }\n\t  }\n\t\n\t  return str.slice(start + 1, index) || null;\n\t}\n\t\n\tfunction parseFilterList() {\n\t  var filters = [];\n\t  while (!eof()) {\n\t    filters.push(parseFilter());\n\t  }\n\t  return filters;\n\t}\n\t\n\tfunction parseFilter() {\n\t  var filter = {};\n\t  var args;\n\t\n\t  state = filterState;\n\t  filter.name = parseExpression().trim();\n\t\n\t  state = filterArgState;\n\t  args = parseFilterArguments();\n\t\n\t  if (args.length) {\n\t    filter.args = args;\n\t  }\n\t  return filter;\n\t}\n\t\n\tfunction parseFilterArguments() {\n\t  var args = [];\n\t  while (!eof() && state !== filterState) {\n\t    var arg = parseExpression();\n\t    if (!arg) {\n\t      break;\n\t    }\n\t    args.push(processFilterArg(arg));\n\t  }\n\t\n\t  return args;\n\t}\n\t\n\t/**\n\t * Check if an argument is dynamic and strip quotes.\n\t *\n\t * @param {String} arg\n\t * @return {Object}\n\t */\n\t\n\tfunction processFilterArg(arg) {\n\t  if (reservedArgRE.test(arg)) {\n\t    return {\n\t      value: toNumber(arg),\n\t      dynamic: false\n\t    };\n\t  } else {\n\t    var stripped = stripQuotes(arg);\n\t    var dynamic = stripped === arg;\n\t    return {\n\t      value: dynamic ? arg : stripped,\n\t      dynamic: dynamic\n\t    };\n\t  }\n\t}\n\t\n\t/**\n\t * Parse a directive value and extract the expression\n\t * and its filters into a descriptor.\n\t *\n\t * Example:\n\t *\n\t * \"a + 1 | uppercase\" will yield:\n\t * {\n\t *   expression: 'a + 1',\n\t *   filters: [\n\t *     { name: 'uppercase', args: null }\n\t *   ]\n\t * }\n\t *\n\t * @param {String} s\n\t * @return {Object}\n\t */\n\t\n\tfunction parseDirective(s) {\n\t  var hit = cache$1.get(s);\n\t  if (hit) {\n\t    return hit;\n\t  }\n\t\n\t  // reset parser state\n\t  str = s;\n\t  dir = {};\n\t  len = str.length;\n\t  index = -1;\n\t  chr = '';\n\t  state = startState;\n\t\n\t  var filters;\n\t\n\t  if (str.indexOf('|') < 0) {\n\t    dir.expression = str.trim();\n\t  } else {\n\t    dir.expression = parseExpression().trim();\n\t    filters = parseFilterList();\n\t    if (filters.length) {\n\t      dir.filters = filters;\n\t    }\n\t  }\n\t\n\t  cache$1.put(s, dir);\n\t  return dir;\n\t}\n\t\n\tvar directive = Object.freeze({\n\t  parseDirective: parseDirective\n\t});\n\t\n\tvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\tvar cache = undefined;\n\tvar tagRE = undefined;\n\tvar htmlRE = undefined;\n\t/**\n\t * Escape a string so it can be used in a RegExp\n\t * constructor.\n\t *\n\t * @param {String} str\n\t */\n\t\n\tfunction escapeRegex(str) {\n\t  return str.replace(regexEscapeRE, '\\\\$&');\n\t}\n\t\n\tfunction compileRegex() {\n\t  var open = escapeRegex(config.delimiters[0]);\n\t  var close = escapeRegex(config.delimiters[1]);\n\t  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n\t  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n\t  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n\t  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n\t  // reset cache\n\t  cache = new Cache(1000);\n\t}\n\t\n\t/**\n\t * Parse a template text string into an array of tokens.\n\t *\n\t * @param {String} text\n\t * @return {Array<Object> | null}\n\t *               - {String} type\n\t *               - {String} value\n\t *               - {Boolean} [html]\n\t *               - {Boolean} [oneTime]\n\t */\n\t\n\tfunction parseText(text) {\n\t  if (!cache) {\n\t    compileRegex();\n\t  }\n\t  var hit = cache.get(text);\n\t  if (hit) {\n\t    return hit;\n\t  }\n\t  if (!tagRE.test(text)) {\n\t    return null;\n\t  }\n\t  var tokens = [];\n\t  var lastIndex = tagRE.lastIndex = 0;\n\t  var match, index, html, value, first, oneTime;\n\t  /* eslint-disable no-cond-assign */\n\t  while (match = tagRE.exec(text)) {\n\t    /* eslint-enable no-cond-assign */\n\t    index = match.index;\n\t    // push text token\n\t    if (index > lastIndex) {\n\t      tokens.push({\n\t        value: text.slice(lastIndex, index)\n\t      });\n\t    }\n\t    // tag token\n\t    html = htmlRE.test(match[0]);\n\t    value = html ? match[1] : match[2];\n\t    first = value.charCodeAt(0);\n\t    oneTime = first === 42; // *\n\t    value = oneTime ? value.slice(1) : value;\n\t    tokens.push({\n\t      tag: true,\n\t      value: value.trim(),\n\t      html: html,\n\t      oneTime: oneTime\n\t    });\n\t    lastIndex = index + match[0].length;\n\t  }\n\t  if (lastIndex < text.length) {\n\t    tokens.push({\n\t      value: text.slice(lastIndex)\n\t    });\n\t  }\n\t  cache.put(text, tokens);\n\t  return tokens;\n\t}\n\t\n\t/**\n\t * Format a list of tokens into an expression.\n\t * e.g. tokens parsed from 'a {{b}} c' can be serialized\n\t * into one single expression as '\"a \" + b + \" c\"'.\n\t *\n\t * @param {Array} tokens\n\t * @param {Vue} [vm]\n\t * @return {String}\n\t */\n\t\n\tfunction tokensToExp(tokens, vm) {\n\t  if (tokens.length > 1) {\n\t    return tokens.map(function (token) {\n\t      return formatToken(token, vm);\n\t    }).join('+');\n\t  } else {\n\t    return formatToken(tokens[0], vm, true);\n\t  }\n\t}\n\t\n\t/**\n\t * Format a single token.\n\t *\n\t * @param {Object} token\n\t * @param {Vue} [vm]\n\t * @param {Boolean} [single]\n\t * @return {String}\n\t */\n\t\n\tfunction formatToken(token, vm, single) {\n\t  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n\t}\n\t\n\t/**\n\t * For an attribute with multiple interpolation tags,\n\t * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n\t * the whole thing into a single watchable expression, we\n\t * have to inline those filters. This function does exactly\n\t * that. This is a bit hacky but it avoids heavy changes\n\t * to directive parser and watcher mechanism.\n\t *\n\t * @param {String} exp\n\t * @param {Boolean} single\n\t * @return {String}\n\t */\n\t\n\tvar filterRE = /[^|]\\|[^|]/;\n\tfunction inlineFilters(exp, single) {\n\t  if (!filterRE.test(exp)) {\n\t    return single ? exp : '(' + exp + ')';\n\t  } else {\n\t    var dir = parseDirective(exp);\n\t    if (!dir.filters) {\n\t      return '(' + exp + ')';\n\t    } else {\n\t      return 'this._applyFilters(' + dir.expression + // value\n\t      ',null,' + // oldValue (null for read)\n\t      JSON.stringify(dir.filters) + // filter descriptors\n\t      ',false)'; // write?\n\t    }\n\t  }\n\t}\n\t\n\tvar text = Object.freeze({\n\t  compileRegex: compileRegex,\n\t  parseText: parseText,\n\t  tokensToExp: tokensToExp\n\t});\n\t\n\tvar delimiters = ['{{', '}}'];\n\tvar unsafeDelimiters = ['{{{', '}}}'];\n\t\n\tvar config = Object.defineProperties({\n\t\n\t  /**\n\t   * Whether to print debug messages.\n\t   * Also enables stack trace for warnings.\n\t   *\n\t   * @type {Boolean}\n\t   */\n\t\n\t  debug: false,\n\t\n\t  /**\n\t   * Whether to suppress warnings.\n\t   *\n\t   * @type {Boolean}\n\t   */\n\t\n\t  silent: false,\n\t\n\t  /**\n\t   * Whether to use async rendering.\n\t   */\n\t\n\t  async: true,\n\t\n\t  /**\n\t   * Whether to warn against errors caught when evaluating\n\t   * expressions.\n\t   */\n\t\n\t  warnExpressionErrors: true,\n\t\n\t  /**\n\t   * Whether to allow devtools inspection.\n\t   * Disabled by default in production builds.\n\t   */\n\t\n\t  devtools: (\"production\") !== 'production',\n\t\n\t  /**\n\t   * Internal flag to indicate the delimiters have been\n\t   * changed.\n\t   *\n\t   * @type {Boolean}\n\t   */\n\t\n\t  _delimitersChanged: true,\n\t\n\t  /**\n\t   * List of asset types that a component can own.\n\t   *\n\t   * @type {Array}\n\t   */\n\t\n\t  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\t\n\t  /**\n\t   * prop binding modes\n\t   */\n\t\n\t  _propBindingModes: {\n\t    ONE_WAY: 0,\n\t    TWO_WAY: 1,\n\t    ONE_TIME: 2\n\t  },\n\t\n\t  /**\n\t   * Max circular updates allowed in a batcher flush cycle.\n\t   */\n\t\n\t  _maxUpdateCount: 100\n\t\n\t}, {\n\t  delimiters: { /**\n\t                 * Interpolation delimiters. Changing these would trigger\n\t                 * the text parser to re-compile the regular expressions.\n\t                 *\n\t                 * @type {Array<String>}\n\t                 */\n\t\n\t    get: function get() {\n\t      return delimiters;\n\t    },\n\t    set: function set(val) {\n\t      delimiters = val;\n\t      compileRegex();\n\t    },\n\t    configurable: true,\n\t    enumerable: true\n\t  },\n\t  unsafeDelimiters: {\n\t    get: function get() {\n\t      return unsafeDelimiters;\n\t    },\n\t    set: function set(val) {\n\t      unsafeDelimiters = val;\n\t      compileRegex();\n\t    },\n\t    configurable: true,\n\t    enumerable: true\n\t  }\n\t});\n\t\n\tvar warn = undefined;\n\tvar formatComponentName = undefined;\n\t\n\tif (false) {\n\t  (function () {\n\t    var hasConsole = typeof console !== 'undefined';\n\t\n\t    warn = function (msg, vm) {\n\t      if (hasConsole && !config.silent) {\n\t        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n\t      }\n\t    };\n\t\n\t    formatComponentName = function (vm) {\n\t      var name = vm._isVue ? vm.$options.name : vm.name;\n\t      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n\t    };\n\t  })();\n\t}\n\t\n\t/**\n\t * Append with transition.\n\t *\n\t * @param {Element} el\n\t * @param {Element} target\n\t * @param {Vue} vm\n\t * @param {Function} [cb]\n\t */\n\t\n\tfunction appendWithTransition(el, target, vm, cb) {\n\t  applyTransition(el, 1, function () {\n\t    target.appendChild(el);\n\t  }, vm, cb);\n\t}\n\t\n\t/**\n\t * InsertBefore with transition.\n\t *\n\t * @param {Element} el\n\t * @param {Element} target\n\t * @param {Vue} vm\n\t * @param {Function} [cb]\n\t */\n\t\n\tfunction beforeWithTransition(el, target, vm, cb) {\n\t  applyTransition(el, 1, function () {\n\t    before(el, target);\n\t  }, vm, cb);\n\t}\n\t\n\t/**\n\t * Remove with transition.\n\t *\n\t * @param {Element} el\n\t * @param {Vue} vm\n\t * @param {Function} [cb]\n\t */\n\t\n\tfunction removeWithTransition(el, vm, cb) {\n\t  applyTransition(el, -1, function () {\n\t    remove(el);\n\t  }, vm, cb);\n\t}\n\t\n\t/**\n\t * Apply transitions with an operation callback.\n\t *\n\t * @param {Element} el\n\t * @param {Number} direction\n\t *                  1: enter\n\t *                 -1: leave\n\t * @param {Function} op - the actual DOM operation\n\t * @param {Vue} vm\n\t * @param {Function} [cb]\n\t */\n\t\n\tfunction applyTransition(el, direction, op, vm, cb) {\n\t  var transition = el.__v_trans;\n\t  if (!transition ||\n\t  // skip if there are no js hooks and CSS transition is\n\t  // not supported\n\t  !transition.hooks && !transitionEndEvent ||\n\t  // skip transitions for initial compile\n\t  !vm._isCompiled ||\n\t  // if the vm is being manipulated by a parent directive\n\t  // during the parent's compilation phase, skip the\n\t  // animation.\n\t  vm.$parent && !vm.$parent._isCompiled) {\n\t    op();\n\t    if (cb) cb();\n\t    return;\n\t  }\n\t  var action = direction > 0 ? 'enter' : 'leave';\n\t  transition[action](op, cb);\n\t}\n\t\n\tvar transition = Object.freeze({\n\t  appendWithTransition: appendWithTransition,\n\t  beforeWithTransition: beforeWithTransition,\n\t  removeWithTransition: removeWithTransition,\n\t  applyTransition: applyTransition\n\t});\n\t\n\t/**\n\t * Query an element selector if it's not an element already.\n\t *\n\t * @param {String|Element} el\n\t * @return {Element}\n\t */\n\t\n\tfunction query(el) {\n\t  if (typeof el === 'string') {\n\t    var selector = el;\n\t    el = document.querySelector(el);\n\t    if (!el) {\n\t      (\"production\") !== 'production' && warn('Cannot find element: ' + selector);\n\t    }\n\t  }\n\t  return el;\n\t}\n\t\n\t/**\n\t * Check if a node is in the document.\n\t * Note: document.documentElement.contains should work here\n\t * but always returns false for comment nodes in phantomjs,\n\t * making unit tests difficult. This is fixed by doing the\n\t * contains() check on the node's parentNode instead of\n\t * the node itself.\n\t *\n\t * @param {Node} node\n\t * @return {Boolean}\n\t */\n\t\n\tfunction inDoc(node) {\n\t  if (!node) return false;\n\t  var doc = node.ownerDocument.documentElement;\n\t  var parent = node.parentNode;\n\t  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n\t}\n\t\n\t/**\n\t * Get and remove an attribute from a node.\n\t *\n\t * @param {Node} node\n\t * @param {String} _attr\n\t */\n\t\n\tfunction getAttr(node, _attr) {\n\t  var val = node.getAttribute(_attr);\n\t  if (val !== null) {\n\t    node.removeAttribute(_attr);\n\t  }\n\t  return val;\n\t}\n\t\n\t/**\n\t * Get an attribute with colon or v-bind: prefix.\n\t *\n\t * @param {Node} node\n\t * @param {String} name\n\t * @return {String|null}\n\t */\n\t\n\tfunction getBindAttr(node, name) {\n\t  var val = getAttr(node, ':' + name);\n\t  if (val === null) {\n\t    val = getAttr(node, 'v-bind:' + name);\n\t  }\n\t  return val;\n\t}\n\t\n\t/**\n\t * Check the presence of a bind attribute.\n\t *\n\t * @param {Node} node\n\t * @param {String} name\n\t * @return {Boolean}\n\t */\n\t\n\tfunction hasBindAttr(node, name) {\n\t  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n\t}\n\t\n\t/**\n\t * Insert el before target\n\t *\n\t * @param {Element} el\n\t * @param {Element} target\n\t */\n\t\n\tfunction before(el, target) {\n\t  target.parentNode.insertBefore(el, target);\n\t}\n\t\n\t/**\n\t * Insert el after target\n\t *\n\t * @param {Element} el\n\t * @param {Element} target\n\t */\n\t\n\tfunction after(el, target) {\n\t  if (target.nextSibling) {\n\t    before(el, target.nextSibling);\n\t  } else {\n\t    target.parentNode.appendChild(el);\n\t  }\n\t}\n\t\n\t/**\n\t * Remove el from DOM\n\t *\n\t * @param {Element} el\n\t */\n\t\n\tfunction remove(el) {\n\t  el.parentNode.removeChild(el);\n\t}\n\t\n\t/**\n\t * Prepend el to target\n\t *\n\t * @param {Element} el\n\t * @param {Element} target\n\t */\n\t\n\tfunction prepend(el, target) {\n\t  if (target.firstChild) {\n\t    before(el, target.firstChild);\n\t  } else {\n\t    target.appendChild(el);\n\t  }\n\t}\n\t\n\t/**\n\t * Replace target with el\n\t *\n\t * @param {Element} target\n\t * @param {Element} el\n\t */\n\t\n\tfunction replace(target, el) {\n\t  var parent = target.parentNode;\n\t  if (parent) {\n\t    parent.replaceChild(el, target);\n\t  }\n\t}\n\t\n\t/**\n\t * Add event listener shorthand.\n\t *\n\t * @param {Element} el\n\t * @param {String} event\n\t * @param {Function} cb\n\t * @param {Boolean} [useCapture]\n\t */\n\t\n\tfunction on(el, event, cb, useCapture) {\n\t  el.addEventListener(event, cb, useCapture);\n\t}\n\t\n\t/**\n\t * Remove event listener shorthand.\n\t *\n\t * @param {Element} el\n\t * @param {String} event\n\t * @param {Function} cb\n\t */\n\t\n\tfunction off(el, event, cb) {\n\t  el.removeEventListener(event, cb);\n\t}\n\t\n\t/**\n\t * For IE9 compat: when both class and :class are present\n\t * getAttribute('class') returns wrong value...\n\t *\n\t * @param {Element} el\n\t * @return {String}\n\t */\n\t\n\tfunction getClass(el) {\n\t  var classname = el.className;\n\t  if (typeof classname === 'object') {\n\t    classname = classname.baseVal || '';\n\t  }\n\t  return classname;\n\t}\n\t\n\t/**\n\t * In IE9, setAttribute('class') will result in empty class\n\t * if the element also has the :class attribute; However in\n\t * PhantomJS, setting `className` does not work on SVG elements...\n\t * So we have to do a conditional check here.\n\t *\n\t * @param {Element} el\n\t * @param {String} cls\n\t */\n\t\n\tfunction setClass(el, cls) {\n\t  /* istanbul ignore if */\n\t  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n\t    el.className = cls;\n\t  } else {\n\t    el.setAttribute('class', cls);\n\t  }\n\t}\n\t\n\t/**\n\t * Add class with compatibility for IE & SVG\n\t *\n\t * @param {Element} el\n\t * @param {String} cls\n\t */\n\t\n\tfunction addClass(el, cls) {\n\t  if (el.classList) {\n\t    el.classList.add(cls);\n\t  } else {\n\t    var cur = ' ' + getClass(el) + ' ';\n\t    if (cur.indexOf(' ' + cls + ' ') < 0) {\n\t      setClass(el, (cur + cls).trim());\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Remove class with compatibility for IE & SVG\n\t *\n\t * @param {Element} el\n\t * @param {String} cls\n\t */\n\t\n\tfunction removeClass(el, cls) {\n\t  if (el.classList) {\n\t    el.classList.remove(cls);\n\t  } else {\n\t    var cur = ' ' + getClass(el) + ' ';\n\t    var tar = ' ' + cls + ' ';\n\t    while (cur.indexOf(tar) >= 0) {\n\t      cur = cur.replace(tar, ' ');\n\t    }\n\t    setClass(el, cur.trim());\n\t  }\n\t  if (!el.className) {\n\t    el.removeAttribute('class');\n\t  }\n\t}\n\t\n\t/**\n\t * Extract raw content inside an element into a temporary\n\t * container div\n\t *\n\t * @param {Element} el\n\t * @param {Boolean} asFragment\n\t * @return {Element|DocumentFragment}\n\t */\n\t\n\tfunction extractContent(el, asFragment) {\n\t  var child;\n\t  var rawContent;\n\t  /* istanbul ignore if */\n\t  if (isTemplate(el) && isFragment(el.content)) {\n\t    el = el.content;\n\t  }\n\t  if (el.hasChildNodes()) {\n\t    trimNode(el);\n\t    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n\t    /* eslint-disable no-cond-assign */\n\t    while (child = el.firstChild) {\n\t      /* eslint-enable no-cond-assign */\n\t      rawContent.appendChild(child);\n\t    }\n\t  }\n\t  return rawContent;\n\t}\n\t\n\t/**\n\t * Trim possible empty head/tail text and comment\n\t * nodes inside a parent.\n\t *\n\t * @param {Node} node\n\t */\n\t\n\tfunction trimNode(node) {\n\t  var child;\n\t  /* eslint-disable no-sequences */\n\t  while ((child = node.firstChild, isTrimmable(child))) {\n\t    node.removeChild(child);\n\t  }\n\t  while ((child = node.lastChild, isTrimmable(child))) {\n\t    node.removeChild(child);\n\t  }\n\t  /* eslint-enable no-sequences */\n\t}\n\t\n\tfunction isTrimmable(node) {\n\t  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n\t}\n\t\n\t/**\n\t * Check if an element is a template tag.\n\t * Note if the template appears inside an SVG its tagName\n\t * will be in lowercase.\n\t *\n\t * @param {Element} el\n\t */\n\t\n\tfunction isTemplate(el) {\n\t  return el.tagName && el.tagName.toLowerCase() === 'template';\n\t}\n\t\n\t/**\n\t * Create an \"anchor\" for performing dom insertion/removals.\n\t * This is used in a number of scenarios:\n\t * - fragment instance\n\t * - v-html\n\t * - v-if\n\t * - v-for\n\t * - component\n\t *\n\t * @param {String} content\n\t * @param {Boolean} persist - IE trashes empty textNodes on\n\t *                            cloneNode(true), so in certain\n\t *                            cases the anchor needs to be\n\t *                            non-empty to be persisted in\n\t *                            templates.\n\t * @return {Comment|Text}\n\t */\n\t\n\tfunction createAnchor(content, persist) {\n\t  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n\t  anchor.__v_anchor = true;\n\t  return anchor;\n\t}\n\t\n\t/**\n\t * Find a component ref attribute that starts with $.\n\t *\n\t * @param {Element} node\n\t * @return {String|undefined}\n\t */\n\t\n\tvar refRE = /^v-ref:/;\n\t\n\tfunction findRef(node) {\n\t  if (node.hasAttributes()) {\n\t    var attrs = node.attributes;\n\t    for (var i = 0, l = attrs.length; i < l; i++) {\n\t      var name = attrs[i].name;\n\t      if (refRE.test(name)) {\n\t        return camelize(name.replace(refRE, ''));\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Map a function to a range of nodes .\n\t *\n\t * @param {Node} node\n\t * @param {Node} end\n\t * @param {Function} op\n\t */\n\t\n\tfunction mapNodeRange(node, end, op) {\n\t  var next;\n\t  while (node !== end) {\n\t    next = node.nextSibling;\n\t    op(node);\n\t    node = next;\n\t  }\n\t  op(end);\n\t}\n\t\n\t/**\n\t * Remove a range of nodes with transition, store\n\t * the nodes in a fragment with correct ordering,\n\t * and call callback when done.\n\t *\n\t * @param {Node} start\n\t * @param {Node} end\n\t * @param {Vue} vm\n\t * @param {DocumentFragment} frag\n\t * @param {Function} cb\n\t */\n\t\n\tfunction removeNodeRange(start, end, vm, frag, cb) {\n\t  var done = false;\n\t  var removed = 0;\n\t  var nodes = [];\n\t  mapNodeRange(start, end, function (node) {\n\t    if (node === end) done = true;\n\t    nodes.push(node);\n\t    removeWithTransition(node, vm, onRemoved);\n\t  });\n\t  function onRemoved() {\n\t    removed++;\n\t    if (done && removed >= nodes.length) {\n\t      for (var i = 0; i < nodes.length; i++) {\n\t        frag.appendChild(nodes[i]);\n\t      }\n\t      cb && cb();\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Check if a node is a DocumentFragment.\n\t *\n\t * @param {Node} node\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isFragment(node) {\n\t  return node && node.nodeType === 11;\n\t}\n\t\n\t/**\n\t * Get outerHTML of elements, taking care\n\t * of SVG elements in IE as well.\n\t *\n\t * @param {Element} el\n\t * @return {String}\n\t */\n\t\n\tfunction getOuterHTML(el) {\n\t  if (el.outerHTML) {\n\t    return el.outerHTML;\n\t  } else {\n\t    var container = document.createElement('div');\n\t    container.appendChild(el.cloneNode(true));\n\t    return container.innerHTML;\n\t  }\n\t}\n\t\n\tvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\n\tvar reservedTagRE = /^(slot|partial|component)$/i;\n\t\n\tvar isUnknownElement = undefined;\n\tif (false) {\n\t  isUnknownElement = function (el, tag) {\n\t    if (tag.indexOf('-') > -1) {\n\t      // http://stackoverflow.com/a/28210364/1070244\n\t      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n\t    } else {\n\t      return (/HTMLUnknownElement/.test(el.toString()) &&\n\t        // Chrome returns unknown for several HTML5 elements.\n\t        // https://code.google.com/p/chromium/issues/detail?id=540526\n\t        // Firefox returns unknown for some \"Interactive elements.\"\n\t        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n\t      );\n\t    }\n\t  };\n\t}\n\t\n\t/**\n\t * Check if an element is a component, if yes return its\n\t * component id.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @return {Object|undefined}\n\t */\n\t\n\tfunction checkComponentAttr(el, options) {\n\t  var tag = el.tagName.toLowerCase();\n\t  var hasAttrs = el.hasAttributes();\n\t  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n\t    if (resolveAsset(options, 'components', tag)) {\n\t      return { id: tag };\n\t    } else {\n\t      var is = hasAttrs && getIsBinding(el, options);\n\t      if (is) {\n\t        return is;\n\t      } else if (false) {\n\t        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n\t        if (expectedTag) {\n\t          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n\t        } else if (isUnknownElement(el, tag)) {\n\t          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n\t        }\n\t      }\n\t    }\n\t  } else if (hasAttrs) {\n\t    return getIsBinding(el, options);\n\t  }\n\t}\n\t\n\t/**\n\t * Get \"is\" binding from an element.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @return {Object|undefined}\n\t */\n\t\n\tfunction getIsBinding(el, options) {\n\t  // dynamic syntax\n\t  var exp = el.getAttribute('is');\n\t  if (exp != null) {\n\t    if (resolveAsset(options, 'components', exp)) {\n\t      el.removeAttribute('is');\n\t      return { id: exp };\n\t    }\n\t  } else {\n\t    exp = getBindAttr(el, 'is');\n\t    if (exp != null) {\n\t      return { id: exp, dynamic: true };\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Option overwriting strategies are functions that handle\n\t * how to merge a parent option value and a child option\n\t * value into the final value.\n\t *\n\t * All strategy functions follow the same signature:\n\t *\n\t * @param {*} parentVal\n\t * @param {*} childVal\n\t * @param {Vue} [vm]\n\t */\n\t\n\tvar strats = config.optionMergeStrategies = Object.create(null);\n\t\n\t/**\n\t * Helper that recursively merges two data objects together.\n\t */\n\t\n\tfunction mergeData(to, from) {\n\t  var key, toVal, fromVal;\n\t  for (key in from) {\n\t    toVal = to[key];\n\t    fromVal = from[key];\n\t    if (!hasOwn(to, key)) {\n\t      set(to, key, fromVal);\n\t    } else if (isObject(toVal) && isObject(fromVal)) {\n\t      mergeData(toVal, fromVal);\n\t    }\n\t  }\n\t  return to;\n\t}\n\t\n\t/**\n\t * Data\n\t */\n\t\n\tstrats.data = function (parentVal, childVal, vm) {\n\t  if (!vm) {\n\t    // in a Vue.extend merge, both should be functions\n\t    if (!childVal) {\n\t      return parentVal;\n\t    }\n\t    if (typeof childVal !== 'function') {\n\t      (\"production\") !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n\t      return parentVal;\n\t    }\n\t    if (!parentVal) {\n\t      return childVal;\n\t    }\n\t    // when parentVal & childVal are both present,\n\t    // we need to return a function that returns the\n\t    // merged result of both functions... no need to\n\t    // check if parentVal is a function here because\n\t    // it has to be a function to pass previous merges.\n\t    return function mergedDataFn() {\n\t      return mergeData(childVal.call(this), parentVal.call(this));\n\t    };\n\t  } else if (parentVal || childVal) {\n\t    return function mergedInstanceDataFn() {\n\t      // instance merge\n\t      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n\t      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n\t      if (instanceData) {\n\t        return mergeData(instanceData, defaultData);\n\t      } else {\n\t        return defaultData;\n\t      }\n\t    };\n\t  }\n\t};\n\t\n\t/**\n\t * El\n\t */\n\t\n\tstrats.el = function (parentVal, childVal, vm) {\n\t  if (!vm && childVal && typeof childVal !== 'function') {\n\t    (\"production\") !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n\t    return;\n\t  }\n\t  var ret = childVal || parentVal;\n\t  // invoke the element factory if this is instance merge\n\t  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n\t};\n\t\n\t/**\n\t * Hooks and param attributes are merged as arrays.\n\t */\n\t\n\tstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n\t  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n\t};\n\t\n\t/**\n\t * Assets\n\t *\n\t * When a vm is present (instance creation), we need to do\n\t * a three-way merge between constructor options, instance\n\t * options and parent options.\n\t */\n\t\n\tfunction mergeAssets(parentVal, childVal) {\n\t  var res = Object.create(parentVal || null);\n\t  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n\t}\n\t\n\tconfig._assetTypes.forEach(function (type) {\n\t  strats[type + 's'] = mergeAssets;\n\t});\n\t\n\t/**\n\t * Events & Watchers.\n\t *\n\t * Events & watchers hashes should not overwrite one\n\t * another, so we merge them as arrays.\n\t */\n\t\n\tstrats.watch = strats.events = function (parentVal, childVal) {\n\t  if (!childVal) return parentVal;\n\t  if (!parentVal) return childVal;\n\t  var ret = {};\n\t  extend(ret, parentVal);\n\t  for (var key in childVal) {\n\t    var parent = ret[key];\n\t    var child = childVal[key];\n\t    if (parent && !isArray(parent)) {\n\t      parent = [parent];\n\t    }\n\t    ret[key] = parent ? parent.concat(child) : [child];\n\t  }\n\t  return ret;\n\t};\n\t\n\t/**\n\t * Other object hashes.\n\t */\n\t\n\tstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n\t  if (!childVal) return parentVal;\n\t  if (!parentVal) return childVal;\n\t  var ret = Object.create(null);\n\t  extend(ret, parentVal);\n\t  extend(ret, childVal);\n\t  return ret;\n\t};\n\t\n\t/**\n\t * Default strategy.\n\t */\n\t\n\tvar defaultStrat = function defaultStrat(parentVal, childVal) {\n\t  return childVal === undefined ? parentVal : childVal;\n\t};\n\t\n\t/**\n\t * Make sure component options get converted to actual\n\t * constructors.\n\t *\n\t * @param {Object} options\n\t */\n\t\n\tfunction guardComponents(options) {\n\t  if (options.components) {\n\t    var components = options.components = guardArrayAssets(options.components);\n\t    var ids = Object.keys(components);\n\t    var def;\n\t    if (false) {\n\t      var map = options._componentNameMap = {};\n\t    }\n\t    for (var i = 0, l = ids.length; i < l; i++) {\n\t      var key = ids[i];\n\t      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n\t        (\"production\") !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n\t        continue;\n\t      }\n\t      // record a all lowercase <-> kebab-case mapping for\n\t      // possible custom element case error warning\n\t      if (false) {\n\t        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n\t      }\n\t      def = components[key];\n\t      if (isPlainObject(def)) {\n\t        components[key] = Vue.extend(def);\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Ensure all props option syntax are normalized into the\n\t * Object-based format.\n\t *\n\t * @param {Object} options\n\t */\n\t\n\tfunction guardProps(options) {\n\t  var props = options.props;\n\t  var i, val;\n\t  if (isArray(props)) {\n\t    options.props = {};\n\t    i = props.length;\n\t    while (i--) {\n\t      val = props[i];\n\t      if (typeof val === 'string') {\n\t        options.props[val] = null;\n\t      } else if (val.name) {\n\t        options.props[val.name] = val;\n\t      }\n\t    }\n\t  } else if (isPlainObject(props)) {\n\t    var keys = Object.keys(props);\n\t    i = keys.length;\n\t    while (i--) {\n\t      val = props[keys[i]];\n\t      if (typeof val === 'function') {\n\t        props[keys[i]] = { type: val };\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Guard an Array-format assets option and converted it\n\t * into the key-value Object format.\n\t *\n\t * @param {Object|Array} assets\n\t * @return {Object}\n\t */\n\t\n\tfunction guardArrayAssets(assets) {\n\t  if (isArray(assets)) {\n\t    var res = {};\n\t    var i = assets.length;\n\t    var asset;\n\t    while (i--) {\n\t      asset = assets[i];\n\t      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n\t      if (!id) {\n\t        (\"production\") !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n\t      } else {\n\t        res[id] = asset;\n\t      }\n\t    }\n\t    return res;\n\t  }\n\t  return assets;\n\t}\n\t\n\t/**\n\t * Merge two option objects into a new one.\n\t * Core utility used in both instantiation and inheritance.\n\t *\n\t * @param {Object} parent\n\t * @param {Object} child\n\t * @param {Vue} [vm] - if vm is present, indicates this is\n\t *                     an instantiation merge.\n\t */\n\t\n\tfunction mergeOptions(parent, child, vm) {\n\t  guardComponents(child);\n\t  guardProps(child);\n\t  if (false) {\n\t    if (child.propsData && !vm) {\n\t      warn('propsData can only be used as an instantiation option.');\n\t    }\n\t  }\n\t  var options = {};\n\t  var key;\n\t  if (child['extends']) {\n\t    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n\t  }\n\t  if (child.mixins) {\n\t    for (var i = 0, l = child.mixins.length; i < l; i++) {\n\t      var mixin = child.mixins[i];\n\t      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n\t      parent = mergeOptions(parent, mixinOptions, vm);\n\t    }\n\t  }\n\t  for (key in parent) {\n\t    mergeField(key);\n\t  }\n\t  for (key in child) {\n\t    if (!hasOwn(parent, key)) {\n\t      mergeField(key);\n\t    }\n\t  }\n\t  function mergeField(key) {\n\t    var strat = strats[key] || defaultStrat;\n\t    options[key] = strat(parent[key], child[key], vm, key);\n\t  }\n\t  return options;\n\t}\n\t\n\t/**\n\t * Resolve an asset.\n\t * This function is used because child instances need access\n\t * to assets defined in its ancestor chain.\n\t *\n\t * @param {Object} options\n\t * @param {String} type\n\t * @param {String} id\n\t * @param {Boolean} warnMissing\n\t * @return {Object|Function}\n\t */\n\t\n\tfunction resolveAsset(options, type, id, warnMissing) {\n\t  /* istanbul ignore if */\n\t  if (typeof id !== 'string') {\n\t    return;\n\t  }\n\t  var assets = options[type];\n\t  var camelizedId;\n\t  var res = assets[id] ||\n\t  // camelCase ID\n\t  assets[camelizedId = camelize(id)] ||\n\t  // Pascal Case ID\n\t  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n\t  if (false) {\n\t    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n\t  }\n\t  return res;\n\t}\n\t\n\tvar uid$1 = 0;\n\t\n\t/**\n\t * A dep is an observable that can have multiple\n\t * directives subscribing to it.\n\t *\n\t * @constructor\n\t */\n\tfunction Dep() {\n\t  this.id = uid$1++;\n\t  this.subs = [];\n\t}\n\t\n\t// the current target watcher being evaluated.\n\t// this is globally unique because there could be only one\n\t// watcher being evaluated at any time.\n\tDep.target = null;\n\t\n\t/**\n\t * Add a directive subscriber.\n\t *\n\t * @param {Directive} sub\n\t */\n\t\n\tDep.prototype.addSub = function (sub) {\n\t  this.subs.push(sub);\n\t};\n\t\n\t/**\n\t * Remove a directive subscriber.\n\t *\n\t * @param {Directive} sub\n\t */\n\t\n\tDep.prototype.removeSub = function (sub) {\n\t  this.subs.$remove(sub);\n\t};\n\t\n\t/**\n\t * Add self as a dependency to the target watcher.\n\t */\n\t\n\tDep.prototype.depend = function () {\n\t  Dep.target.addDep(this);\n\t};\n\t\n\t/**\n\t * Notify all subscribers of a new value.\n\t */\n\t\n\tDep.prototype.notify = function () {\n\t  // stablize the subscriber list first\n\t  var subs = toArray(this.subs);\n\t  for (var i = 0, l = subs.length; i < l; i++) {\n\t    subs[i].update();\n\t  }\n\t};\n\t\n\tvar arrayProto = Array.prototype;\n\tvar arrayMethods = Object.create(arrayProto)\n\t\n\t/**\n\t * Intercept mutating methods and emit events\n\t */\n\t\n\t;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n\t  // cache original method\n\t  var original = arrayProto[method];\n\t  def(arrayMethods, method, function mutator() {\n\t    // avoid leaking arguments:\n\t    // http://jsperf.com/closure-with-arguments\n\t    var i = arguments.length;\n\t    var args = new Array(i);\n\t    while (i--) {\n\t      args[i] = arguments[i];\n\t    }\n\t    var result = original.apply(this, args);\n\t    var ob = this.__ob__;\n\t    var inserted;\n\t    switch (method) {\n\t      case 'push':\n\t        inserted = args;\n\t        break;\n\t      case 'unshift':\n\t        inserted = args;\n\t        break;\n\t      case 'splice':\n\t        inserted = args.slice(2);\n\t        break;\n\t    }\n\t    if (inserted) ob.observeArray(inserted);\n\t    // notify change\n\t    ob.dep.notify();\n\t    return result;\n\t  });\n\t});\n\t\n\t/**\n\t * Swap the element at the given index with a new value\n\t * and emits corresponding event.\n\t *\n\t * @param {Number} index\n\t * @param {*} val\n\t * @return {*} - replaced element\n\t */\n\t\n\tdef(arrayProto, '$set', function $set(index, val) {\n\t  if (index >= this.length) {\n\t    this.length = Number(index) + 1;\n\t  }\n\t  return this.splice(index, 1, val)[0];\n\t});\n\t\n\t/**\n\t * Convenience method to remove the element at given index or target element reference.\n\t *\n\t * @param {*} item\n\t */\n\t\n\tdef(arrayProto, '$remove', function $remove(item) {\n\t  /* istanbul ignore if */\n\t  if (!this.length) return;\n\t  var index = indexOf(this, item);\n\t  if (index > -1) {\n\t    return this.splice(index, 1);\n\t  }\n\t});\n\t\n\tvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\t\n\t/**\n\t * By default, when a reactive property is set, the new value is\n\t * also converted to become reactive. However in certain cases, e.g.\n\t * v-for scope alias and props, we don't want to force conversion\n\t * because the value may be a nested value under a frozen data structure.\n\t *\n\t * So whenever we want to set a reactive property without forcing\n\t * conversion on the new value, we wrap that call inside this function.\n\t */\n\t\n\tvar shouldConvert = true;\n\t\n\tfunction withoutConversion(fn) {\n\t  shouldConvert = false;\n\t  fn();\n\t  shouldConvert = true;\n\t}\n\t\n\t/**\n\t * Observer class that are attached to each observed\n\t * object. Once attached, the observer converts target\n\t * object's property keys into getter/setters that\n\t * collect dependencies and dispatches updates.\n\t *\n\t * @param {Array|Object} value\n\t * @constructor\n\t */\n\t\n\tfunction Observer(value) {\n\t  this.value = value;\n\t  this.dep = new Dep();\n\t  def(value, '__ob__', this);\n\t  if (isArray(value)) {\n\t    var augment = hasProto ? protoAugment : copyAugment;\n\t    augment(value, arrayMethods, arrayKeys);\n\t    this.observeArray(value);\n\t  } else {\n\t    this.walk(value);\n\t  }\n\t}\n\t\n\t// Instance methods\n\t\n\t/**\n\t * Walk through each property and convert them into\n\t * getter/setters. This method should only be called when\n\t * value type is Object.\n\t *\n\t * @param {Object} obj\n\t */\n\t\n\tObserver.prototype.walk = function (obj) {\n\t  var keys = Object.keys(obj);\n\t  for (var i = 0, l = keys.length; i < l; i++) {\n\t    this.convert(keys[i], obj[keys[i]]);\n\t  }\n\t};\n\t\n\t/**\n\t * Observe a list of Array items.\n\t *\n\t * @param {Array} items\n\t */\n\t\n\tObserver.prototype.observeArray = function (items) {\n\t  for (var i = 0, l = items.length; i < l; i++) {\n\t    observe(items[i]);\n\t  }\n\t};\n\t\n\t/**\n\t * Convert a property into getter/setter so we can emit\n\t * the events when the property is accessed/changed.\n\t *\n\t * @param {String} key\n\t * @param {*} val\n\t */\n\t\n\tObserver.prototype.convert = function (key, val) {\n\t  defineReactive(this.value, key, val);\n\t};\n\t\n\t/**\n\t * Add an owner vm, so that when $set/$delete mutations\n\t * happen we can notify owner vms to proxy the keys and\n\t * digest the watchers. This is only called when the object\n\t * is observed as an instance's root $data.\n\t *\n\t * @param {Vue} vm\n\t */\n\t\n\tObserver.prototype.addVm = function (vm) {\n\t  (this.vms || (this.vms = [])).push(vm);\n\t};\n\t\n\t/**\n\t * Remove an owner vm. This is called when the object is\n\t * swapped out as an instance's $data object.\n\t *\n\t * @param {Vue} vm\n\t */\n\t\n\tObserver.prototype.removeVm = function (vm) {\n\t  this.vms.$remove(vm);\n\t};\n\t\n\t// helpers\n\t\n\t/**\n\t * Augment an target Object or Array by intercepting\n\t * the prototype chain using __proto__\n\t *\n\t * @param {Object|Array} target\n\t * @param {Object} src\n\t */\n\t\n\tfunction protoAugment(target, src) {\n\t  /* eslint-disable no-proto */\n\t  target.__proto__ = src;\n\t  /* eslint-enable no-proto */\n\t}\n\t\n\t/**\n\t * Augment an target Object or Array by defining\n\t * hidden properties.\n\t *\n\t * @param {Object|Array} target\n\t * @param {Object} proto\n\t */\n\t\n\tfunction copyAugment(target, src, keys) {\n\t  for (var i = 0, l = keys.length; i < l; i++) {\n\t    var key = keys[i];\n\t    def(target, key, src[key]);\n\t  }\n\t}\n\t\n\t/**\n\t * Attempt to create an observer instance for a value,\n\t * returns the new observer if successfully observed,\n\t * or the existing observer if the value already has one.\n\t *\n\t * @param {*} value\n\t * @param {Vue} [vm]\n\t * @return {Observer|undefined}\n\t * @static\n\t */\n\t\n\tfunction observe(value, vm) {\n\t  if (!value || typeof value !== 'object') {\n\t    return;\n\t  }\n\t  var ob;\n\t  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n\t    ob = value.__ob__;\n\t  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n\t    ob = new Observer(value);\n\t  }\n\t  if (ob && vm) {\n\t    ob.addVm(vm);\n\t  }\n\t  return ob;\n\t}\n\t\n\t/**\n\t * Define a reactive property on an Object.\n\t *\n\t * @param {Object} obj\n\t * @param {String} key\n\t * @param {*} val\n\t */\n\t\n\tfunction defineReactive(obj, key, val) {\n\t  var dep = new Dep();\n\t\n\t  var property = Object.getOwnPropertyDescriptor(obj, key);\n\t  if (property && property.configurable === false) {\n\t    return;\n\t  }\n\t\n\t  // cater for pre-defined getter/setters\n\t  var getter = property && property.get;\n\t  var setter = property && property.set;\n\t\n\t  var childOb = observe(val);\n\t  Object.defineProperty(obj, key, {\n\t    enumerable: true,\n\t    configurable: true,\n\t    get: function reactiveGetter() {\n\t      var value = getter ? getter.call(obj) : val;\n\t      if (Dep.target) {\n\t        dep.depend();\n\t        if (childOb) {\n\t          childOb.dep.depend();\n\t        }\n\t        if (isArray(value)) {\n\t          for (var e, i = 0, l = value.length; i < l; i++) {\n\t            e = value[i];\n\t            e && e.__ob__ && e.__ob__.dep.depend();\n\t          }\n\t        }\n\t      }\n\t      return value;\n\t    },\n\t    set: function reactiveSetter(newVal) {\n\t      var value = getter ? getter.call(obj) : val;\n\t      if (newVal === value) {\n\t        return;\n\t      }\n\t      if (setter) {\n\t        setter.call(obj, newVal);\n\t      } else {\n\t        val = newVal;\n\t      }\n\t      childOb = observe(newVal);\n\t      dep.notify();\n\t    }\n\t  });\n\t}\n\t\n\t\n\t\n\tvar util = Object.freeze({\n\t\tdefineReactive: defineReactive,\n\t\tset: set,\n\t\tdel: del,\n\t\thasOwn: hasOwn,\n\t\tisLiteral: isLiteral,\n\t\tisReserved: isReserved,\n\t\t_toString: _toString,\n\t\ttoNumber: toNumber,\n\t\ttoBoolean: toBoolean,\n\t\tstripQuotes: stripQuotes,\n\t\tcamelize: camelize,\n\t\thyphenate: hyphenate,\n\t\tclassify: classify,\n\t\tbind: bind,\n\t\ttoArray: toArray,\n\t\textend: extend,\n\t\tisObject: isObject,\n\t\tisPlainObject: isPlainObject,\n\t\tdef: def,\n\t\tdebounce: _debounce,\n\t\tindexOf: indexOf,\n\t\tcancellable: cancellable,\n\t\tlooseEqual: looseEqual,\n\t\tisArray: isArray,\n\t\thasProto: hasProto,\n\t\tinBrowser: inBrowser,\n\t\tdevtools: devtools,\n\t\tisIE: isIE,\n\t\tisIE9: isIE9,\n\t\tisAndroid: isAndroid,\n\t\tisIOS: isIOS,\n\t\tget transitionProp () { return transitionProp; },\n\t\tget transitionEndEvent () { return transitionEndEvent; },\n\t\tget animationProp () { return animationProp; },\n\t\tget animationEndEvent () { return animationEndEvent; },\n\t\tnextTick: nextTick,\n\t\tget _Set () { return _Set; },\n\t\tquery: query,\n\t\tinDoc: inDoc,\n\t\tgetAttr: getAttr,\n\t\tgetBindAttr: getBindAttr,\n\t\thasBindAttr: hasBindAttr,\n\t\tbefore: before,\n\t\tafter: after,\n\t\tremove: remove,\n\t\tprepend: prepend,\n\t\treplace: replace,\n\t\ton: on,\n\t\toff: off,\n\t\tsetClass: setClass,\n\t\taddClass: addClass,\n\t\tremoveClass: removeClass,\n\t\textractContent: extractContent,\n\t\ttrimNode: trimNode,\n\t\tisTemplate: isTemplate,\n\t\tcreateAnchor: createAnchor,\n\t\tfindRef: findRef,\n\t\tmapNodeRange: mapNodeRange,\n\t\tremoveNodeRange: removeNodeRange,\n\t\tisFragment: isFragment,\n\t\tgetOuterHTML: getOuterHTML,\n\t\tmergeOptions: mergeOptions,\n\t\tresolveAsset: resolveAsset,\n\t\tcheckComponentAttr: checkComponentAttr,\n\t\tcommonTagRE: commonTagRE,\n\t\treservedTagRE: reservedTagRE,\n\t\tget warn () { return warn; }\n\t});\n\t\n\tvar uid = 0;\n\t\n\tfunction initMixin (Vue) {\n\t  /**\n\t   * The main init sequence. This is called for every\n\t   * instance, including ones that are created from extended\n\t   * constructors.\n\t   *\n\t   * @param {Object} options - this options object should be\n\t   *                           the result of merging class\n\t   *                           options and the options passed\n\t   *                           in to the constructor.\n\t   */\n\t\n\t  Vue.prototype._init = function (options) {\n\t    options = options || {};\n\t\n\t    this.$el = null;\n\t    this.$parent = options.parent;\n\t    this.$root = this.$parent ? this.$parent.$root : this;\n\t    this.$children = [];\n\t    this.$refs = {}; // child vm references\n\t    this.$els = {}; // element references\n\t    this._watchers = []; // all watchers as an array\n\t    this._directives = []; // all directives\n\t\n\t    // a uid\n\t    this._uid = uid++;\n\t\n\t    // a flag to avoid this being observed\n\t    this._isVue = true;\n\t\n\t    // events bookkeeping\n\t    this._events = {}; // registered callbacks\n\t    this._eventsCount = {}; // for $broadcast optimization\n\t\n\t    // fragment instance properties\n\t    this._isFragment = false;\n\t    this._fragment = // @type {DocumentFragment}\n\t    this._fragmentStart = // @type {Text|Comment}\n\t    this._fragmentEnd = null; // @type {Text|Comment}\n\t\n\t    // lifecycle state\n\t    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n\t    this._unlinkFn = null;\n\t\n\t    // context:\n\t    // if this is a transcluded component, context\n\t    // will be the common parent vm of this instance\n\t    // and its host.\n\t    this._context = options._context || this.$parent;\n\t\n\t    // scope:\n\t    // if this is inside an inline v-for, the scope\n\t    // will be the intermediate scope created for this\n\t    // repeat fragment. this is used for linking props\n\t    // and container directives.\n\t    this._scope = options._scope;\n\t\n\t    // fragment:\n\t    // if this instance is compiled inside a Fragment, it\n\t    // needs to register itself as a child of that fragment\n\t    // for attach/detach to work properly.\n\t    this._frag = options._frag;\n\t    if (this._frag) {\n\t      this._frag.children.push(this);\n\t    }\n\t\n\t    // push self into parent / transclusion host\n\t    if (this.$parent) {\n\t      this.$parent.$children.push(this);\n\t    }\n\t\n\t    // merge options.\n\t    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\t\n\t    // set ref\n\t    this._updateRef();\n\t\n\t    // initialize data as empty object.\n\t    // it will be filled up in _initData().\n\t    this._data = {};\n\t\n\t    // call init hook\n\t    this._callHook('init');\n\t\n\t    // initialize data observation and scope inheritance.\n\t    this._initState();\n\t\n\t    // setup event system and option events.\n\t    this._initEvents();\n\t\n\t    // call created hook\n\t    this._callHook('created');\n\t\n\t    // if `el` option is passed, start compilation.\n\t    if (options.el) {\n\t      this.$mount(options.el);\n\t    }\n\t  };\n\t}\n\t\n\tvar pathCache = new Cache(1000);\n\t\n\t// actions\n\tvar APPEND = 0;\n\tvar PUSH = 1;\n\tvar INC_SUB_PATH_DEPTH = 2;\n\tvar PUSH_SUB_PATH = 3;\n\t\n\t// states\n\tvar BEFORE_PATH = 0;\n\tvar IN_PATH = 1;\n\tvar BEFORE_IDENT = 2;\n\tvar IN_IDENT = 3;\n\tvar IN_SUB_PATH = 4;\n\tvar IN_SINGLE_QUOTE = 5;\n\tvar IN_DOUBLE_QUOTE = 6;\n\tvar AFTER_PATH = 7;\n\tvar ERROR = 8;\n\t\n\tvar pathStateMachine = [];\n\t\n\tpathStateMachine[BEFORE_PATH] = {\n\t  'ws': [BEFORE_PATH],\n\t  'ident': [IN_IDENT, APPEND],\n\t  '[': [IN_SUB_PATH],\n\t  'eof': [AFTER_PATH]\n\t};\n\t\n\tpathStateMachine[IN_PATH] = {\n\t  'ws': [IN_PATH],\n\t  '.': [BEFORE_IDENT],\n\t  '[': [IN_SUB_PATH],\n\t  'eof': [AFTER_PATH]\n\t};\n\t\n\tpathStateMachine[BEFORE_IDENT] = {\n\t  'ws': [BEFORE_IDENT],\n\t  'ident': [IN_IDENT, APPEND]\n\t};\n\t\n\tpathStateMachine[IN_IDENT] = {\n\t  'ident': [IN_IDENT, APPEND],\n\t  '0': [IN_IDENT, APPEND],\n\t  'number': [IN_IDENT, APPEND],\n\t  'ws': [IN_PATH, PUSH],\n\t  '.': [BEFORE_IDENT, PUSH],\n\t  '[': [IN_SUB_PATH, PUSH],\n\t  'eof': [AFTER_PATH, PUSH]\n\t};\n\t\n\tpathStateMachine[IN_SUB_PATH] = {\n\t  \"'\": [IN_SINGLE_QUOTE, APPEND],\n\t  '\"': [IN_DOUBLE_QUOTE, APPEND],\n\t  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n\t  ']': [IN_PATH, PUSH_SUB_PATH],\n\t  'eof': ERROR,\n\t  'else': [IN_SUB_PATH, APPEND]\n\t};\n\t\n\tpathStateMachine[IN_SINGLE_QUOTE] = {\n\t  \"'\": [IN_SUB_PATH, APPEND],\n\t  'eof': ERROR,\n\t  'else': [IN_SINGLE_QUOTE, APPEND]\n\t};\n\t\n\tpathStateMachine[IN_DOUBLE_QUOTE] = {\n\t  '\"': [IN_SUB_PATH, APPEND],\n\t  'eof': ERROR,\n\t  'else': [IN_DOUBLE_QUOTE, APPEND]\n\t};\n\t\n\t/**\n\t * Determine the type of a character in a keypath.\n\t *\n\t * @param {Char} ch\n\t * @return {String} type\n\t */\n\t\n\tfunction getPathCharType(ch) {\n\t  if (ch === undefined) {\n\t    return 'eof';\n\t  }\n\t\n\t  var code = ch.charCodeAt(0);\n\t\n\t  switch (code) {\n\t    case 0x5B: // [\n\t    case 0x5D: // ]\n\t    case 0x2E: // .\n\t    case 0x22: // \"\n\t    case 0x27: // '\n\t    case 0x30:\n\t      // 0\n\t      return ch;\n\t\n\t    case 0x5F: // _\n\t    case 0x24:\n\t      // $\n\t      return 'ident';\n\t\n\t    case 0x20: // Space\n\t    case 0x09: // Tab\n\t    case 0x0A: // Newline\n\t    case 0x0D: // Return\n\t    case 0xA0: // No-break space\n\t    case 0xFEFF: // Byte Order Mark\n\t    case 0x2028: // Line Separator\n\t    case 0x2029:\n\t      // Paragraph Separator\n\t      return 'ws';\n\t  }\n\t\n\t  // a-z, A-Z\n\t  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n\t    return 'ident';\n\t  }\n\t\n\t  // 1-9\n\t  if (code >= 0x31 && code <= 0x39) {\n\t    return 'number';\n\t  }\n\t\n\t  return 'else';\n\t}\n\t\n\t/**\n\t * Format a subPath, return its plain form if it is\n\t * a literal string or number. Otherwise prepend the\n\t * dynamic indicator (*).\n\t *\n\t * @param {String} path\n\t * @return {String}\n\t */\n\t\n\tfunction formatSubPath(path) {\n\t  var trimmed = path.trim();\n\t  // invalid leading 0\n\t  if (path.charAt(0) === '0' && isNaN(path)) {\n\t    return false;\n\t  }\n\t  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n\t}\n\t\n\t/**\n\t * Parse a string path into an array of segments\n\t *\n\t * @param {String} path\n\t * @return {Array|undefined}\n\t */\n\t\n\tfunction parse(path) {\n\t  var keys = [];\n\t  var index = -1;\n\t  var mode = BEFORE_PATH;\n\t  var subPathDepth = 0;\n\t  var c, newChar, key, type, transition, action, typeMap;\n\t\n\t  var actions = [];\n\t\n\t  actions[PUSH] = function () {\n\t    if (key !== undefined) {\n\t      keys.push(key);\n\t      key = undefined;\n\t    }\n\t  };\n\t\n\t  actions[APPEND] = function () {\n\t    if (key === undefined) {\n\t      key = newChar;\n\t    } else {\n\t      key += newChar;\n\t    }\n\t  };\n\t\n\t  actions[INC_SUB_PATH_DEPTH] = function () {\n\t    actions[APPEND]();\n\t    subPathDepth++;\n\t  };\n\t\n\t  actions[PUSH_SUB_PATH] = function () {\n\t    if (subPathDepth > 0) {\n\t      subPathDepth--;\n\t      mode = IN_SUB_PATH;\n\t      actions[APPEND]();\n\t    } else {\n\t      subPathDepth = 0;\n\t      key = formatSubPath(key);\n\t      if (key === false) {\n\t        return false;\n\t      } else {\n\t        actions[PUSH]();\n\t      }\n\t    }\n\t  };\n\t\n\t  function maybeUnescapeQuote() {\n\t    var nextChar = path[index + 1];\n\t    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n\t      index++;\n\t      newChar = '\\\\' + nextChar;\n\t      actions[APPEND]();\n\t      return true;\n\t    }\n\t  }\n\t\n\t  while (mode != null) {\n\t    index++;\n\t    c = path[index];\n\t\n\t    if (c === '\\\\' && maybeUnescapeQuote()) {\n\t      continue;\n\t    }\n\t\n\t    type = getPathCharType(c);\n\t    typeMap = pathStateMachine[mode];\n\t    transition = typeMap[type] || typeMap['else'] || ERROR;\n\t\n\t    if (transition === ERROR) {\n\t      return; // parse error\n\t    }\n\t\n\t    mode = transition[0];\n\t    action = actions[transition[1]];\n\t    if (action) {\n\t      newChar = transition[2];\n\t      newChar = newChar === undefined ? c : newChar;\n\t      if (action() === false) {\n\t        return;\n\t      }\n\t    }\n\t\n\t    if (mode === AFTER_PATH) {\n\t      keys.raw = path;\n\t      return keys;\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * External parse that check for a cache hit first\n\t *\n\t * @param {String} path\n\t * @return {Array|undefined}\n\t */\n\t\n\tfunction parsePath(path) {\n\t  var hit = pathCache.get(path);\n\t  if (!hit) {\n\t    hit = parse(path);\n\t    if (hit) {\n\t      pathCache.put(path, hit);\n\t    }\n\t  }\n\t  return hit;\n\t}\n\t\n\t/**\n\t * Get from an object from a path string\n\t *\n\t * @param {Object} obj\n\t * @param {String} path\n\t */\n\t\n\tfunction getPath(obj, path) {\n\t  return parseExpression$1(path).get(obj);\n\t}\n\t\n\t/**\n\t * Warn against setting non-existent root path on a vm.\n\t */\n\t\n\tvar warnNonExistent;\n\tif (false) {\n\t  warnNonExistent = function (path, vm) {\n\t    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n\t  };\n\t}\n\t\n\t/**\n\t * Set on an object from a path\n\t *\n\t * @param {Object} obj\n\t * @param {String | Array} path\n\t * @param {*} val\n\t */\n\t\n\tfunction setPath(obj, path, val) {\n\t  var original = obj;\n\t  if (typeof path === 'string') {\n\t    path = parse(path);\n\t  }\n\t  if (!path || !isObject(obj)) {\n\t    return false;\n\t  }\n\t  var last, key;\n\t  for (var i = 0, l = path.length; i < l; i++) {\n\t    last = obj;\n\t    key = path[i];\n\t    if (key.charAt(0) === '*') {\n\t      key = parseExpression$1(key.slice(1)).get.call(original, original);\n\t    }\n\t    if (i < l - 1) {\n\t      obj = obj[key];\n\t      if (!isObject(obj)) {\n\t        obj = {};\n\t        if (false) {\n\t          warnNonExistent(path, last);\n\t        }\n\t        set(last, key, obj);\n\t      }\n\t    } else {\n\t      if (isArray(obj)) {\n\t        obj.$set(key, val);\n\t      } else if (key in obj) {\n\t        obj[key] = val;\n\t      } else {\n\t        if (false) {\n\t          warnNonExistent(path, obj);\n\t        }\n\t        set(obj, key, val);\n\t      }\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\tvar path = Object.freeze({\n\t  parsePath: parsePath,\n\t  getPath: getPath,\n\t  setPath: setPath\n\t});\n\t\n\tvar expressionCache = new Cache(1000);\n\t\n\tvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\n\tvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\t\n\t// keywords that don't make sense inside expressions\n\tvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\n\tvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\t\n\tvar wsRE = /\\s/g;\n\tvar newlineRE = /\\n/g;\n\tvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\n\tvar restoreRE = /\"(\\d+)\"/g;\n\tvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\n\tvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\n\tvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\t\n\tfunction noop() {}\n\t\n\t/**\n\t * Save / Rewrite / Restore\n\t *\n\t * When rewriting paths found in an expression, it is\n\t * possible for the same letter sequences to be found in\n\t * strings and Object literal property keys. Therefore we\n\t * remove and store these parts in a temporary array, and\n\t * restore them after the path rewrite.\n\t */\n\t\n\tvar saved = [];\n\t\n\t/**\n\t * Save replacer\n\t *\n\t * The save regex can match two possible cases:\n\t * 1. An opening object literal\n\t * 2. A string\n\t * If matched as a plain string, we need to escape its\n\t * newlines, since the string needs to be preserved when\n\t * generating the function body.\n\t *\n\t * @param {String} str\n\t * @param {String} isString - str if matched as a string\n\t * @return {String} - placeholder with index\n\t */\n\t\n\tfunction save(str, isString) {\n\t  var i = saved.length;\n\t  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n\t  return '\"' + i + '\"';\n\t}\n\t\n\t/**\n\t * Path rewrite replacer\n\t *\n\t * @param {String} raw\n\t * @return {String}\n\t */\n\t\n\tfunction rewrite(raw) {\n\t  var c = raw.charAt(0);\n\t  var path = raw.slice(1);\n\t  if (allowedKeywordsRE.test(path)) {\n\t    return raw;\n\t  } else {\n\t    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n\t    return c + 'scope.' + path;\n\t  }\n\t}\n\t\n\t/**\n\t * Restore replacer\n\t *\n\t * @param {String} str\n\t * @param {String} i - matched save index\n\t * @return {String}\n\t */\n\t\n\tfunction restore(str, i) {\n\t  return saved[i];\n\t}\n\t\n\t/**\n\t * Rewrite an expression, prefixing all path accessors with\n\t * `scope.` and generate getter/setter functions.\n\t *\n\t * @param {String} exp\n\t * @return {Function}\n\t */\n\t\n\tfunction compileGetter(exp) {\n\t  if (improperKeywordsRE.test(exp)) {\n\t    (\"production\") !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n\t  }\n\t  // reset state\n\t  saved.length = 0;\n\t  // save strings and object literal keys\n\t  var body = exp.replace(saveRE, save).replace(wsRE, '');\n\t  // rewrite all paths\n\t  // pad 1 space here because the regex matches 1 extra char\n\t  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n\t  return makeGetterFn(body);\n\t}\n\t\n\t/**\n\t * Build a getter function. Requires eval.\n\t *\n\t * We isolate the try/catch so it doesn't affect the\n\t * optimization of the parse function when it is not called.\n\t *\n\t * @param {String} body\n\t * @return {Function|undefined}\n\t */\n\t\n\tfunction makeGetterFn(body) {\n\t  try {\n\t    /* eslint-disable no-new-func */\n\t    return new Function('scope', 'return ' + body + ';');\n\t    /* eslint-enable no-new-func */\n\t  } catch (e) {\n\t    if (false) {\n\t      /* istanbul ignore if */\n\t      if (e.toString().match(/unsafe-eval|CSP/)) {\n\t        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n\t      } else {\n\t        warn('Invalid expression. ' + 'Generated function body: ' + body);\n\t      }\n\t    }\n\t    return noop;\n\t  }\n\t}\n\t\n\t/**\n\t * Compile a setter function for the expression.\n\t *\n\t * @param {String} exp\n\t * @return {Function|undefined}\n\t */\n\t\n\tfunction compileSetter(exp) {\n\t  var path = parsePath(exp);\n\t  if (path) {\n\t    return function (scope, val) {\n\t      setPath(scope, path, val);\n\t    };\n\t  } else {\n\t    (\"production\") !== 'production' && warn('Invalid setter expression: ' + exp);\n\t  }\n\t}\n\t\n\t/**\n\t * Parse an expression into re-written getter/setters.\n\t *\n\t * @param {String} exp\n\t * @param {Boolean} needSet\n\t * @return {Function}\n\t */\n\t\n\tfunction parseExpression$1(exp, needSet) {\n\t  exp = exp.trim();\n\t  // try cache\n\t  var hit = expressionCache.get(exp);\n\t  if (hit) {\n\t    if (needSet && !hit.set) {\n\t      hit.set = compileSetter(hit.exp);\n\t    }\n\t    return hit;\n\t  }\n\t  var res = { exp: exp };\n\t  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n\t  // optimized super simple getter\n\t  ? makeGetterFn('scope.' + exp)\n\t  // dynamic getter\n\t  : compileGetter(exp);\n\t  if (needSet) {\n\t    res.set = compileSetter(exp);\n\t  }\n\t  expressionCache.put(exp, res);\n\t  return res;\n\t}\n\t\n\t/**\n\t * Check if an expression is a simple path.\n\t *\n\t * @param {String} exp\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isSimplePath(exp) {\n\t  return pathTestRE.test(exp) &&\n\t  // don't treat literal values as paths\n\t  !literalValueRE$1.test(exp) &&\n\t  // Math constants e.g. Math.PI, Math.E etc.\n\t  exp.slice(0, 5) !== 'Math.';\n\t}\n\t\n\tvar expression = Object.freeze({\n\t  parseExpression: parseExpression$1,\n\t  isSimplePath: isSimplePath\n\t});\n\t\n\t// we have two separate queues: one for directive updates\n\t// and one for user watcher registered via $watch().\n\t// we want to guarantee directive updates to be called\n\t// before user watchers so that when user watchers are\n\t// triggered, the DOM would have already been in updated\n\t// state.\n\t\n\tvar queue = [];\n\tvar userQueue = [];\n\tvar has = {};\n\tvar circular = {};\n\tvar waiting = false;\n\t\n\t/**\n\t * Reset the batcher's state.\n\t */\n\t\n\tfunction resetBatcherState() {\n\t  queue.length = 0;\n\t  userQueue.length = 0;\n\t  has = {};\n\t  circular = {};\n\t  waiting = false;\n\t}\n\t\n\t/**\n\t * Flush both queues and run the watchers.\n\t */\n\t\n\tfunction flushBatcherQueue() {\n\t  var _again = true;\n\t\n\t  _function: while (_again) {\n\t    _again = false;\n\t\n\t    runBatcherQueue(queue);\n\t    runBatcherQueue(userQueue);\n\t    // user watchers triggered more watchers,\n\t    // keep flushing until it depletes\n\t    if (queue.length) {\n\t      _again = true;\n\t      continue _function;\n\t    }\n\t    // dev tool hook\n\t    /* istanbul ignore if */\n\t    if (devtools && config.devtools) {\n\t      devtools.emit('flush');\n\t    }\n\t    resetBatcherState();\n\t  }\n\t}\n\t\n\t/**\n\t * Run the watchers in a single queue.\n\t *\n\t * @param {Array} queue\n\t */\n\t\n\tfunction runBatcherQueue(queue) {\n\t  // do not cache length because more watchers might be pushed\n\t  // as we run existing watchers\n\t  for (var i = 0; i < queue.length; i++) {\n\t    var watcher = queue[i];\n\t    var id = watcher.id;\n\t    has[id] = null;\n\t    watcher.run();\n\t    // in dev build, check and stop circular updates.\n\t    if (false) {\n\t      circular[id] = (circular[id] || 0) + 1;\n\t      if (circular[id] > config._maxUpdateCount) {\n\t        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n\t        break;\n\t      }\n\t    }\n\t  }\n\t  queue.length = 0;\n\t}\n\t\n\t/**\n\t * Push a watcher into the watcher queue.\n\t * Jobs with duplicate IDs will be skipped unless it's\n\t * pushed when the queue is being flushed.\n\t *\n\t * @param {Watcher} watcher\n\t *   properties:\n\t *   - {Number} id\n\t *   - {Function} run\n\t */\n\t\n\tfunction pushWatcher(watcher) {\n\t  var id = watcher.id;\n\t  if (has[id] == null) {\n\t    // push watcher into appropriate queue\n\t    var q = watcher.user ? userQueue : queue;\n\t    has[id] = q.length;\n\t    q.push(watcher);\n\t    // queue the flush\n\t    if (!waiting) {\n\t      waiting = true;\n\t      nextTick(flushBatcherQueue);\n\t    }\n\t  }\n\t}\n\t\n\tvar uid$2 = 0;\n\t\n\t/**\n\t * A watcher parses an expression, collects dependencies,\n\t * and fires callback when the expression value changes.\n\t * This is used for both the $watch() api and directives.\n\t *\n\t * @param {Vue} vm\n\t * @param {String|Function} expOrFn\n\t * @param {Function} cb\n\t * @param {Object} options\n\t *                 - {Array} filters\n\t *                 - {Boolean} twoWay\n\t *                 - {Boolean} deep\n\t *                 - {Boolean} user\n\t *                 - {Boolean} sync\n\t *                 - {Boolean} lazy\n\t *                 - {Function} [preProcess]\n\t *                 - {Function} [postProcess]\n\t * @constructor\n\t */\n\tfunction Watcher(vm, expOrFn, cb, options) {\n\t  // mix in options\n\t  if (options) {\n\t    extend(this, options);\n\t  }\n\t  var isFn = typeof expOrFn === 'function';\n\t  this.vm = vm;\n\t  vm._watchers.push(this);\n\t  this.expression = expOrFn;\n\t  this.cb = cb;\n\t  this.id = ++uid$2; // uid for batching\n\t  this.active = true;\n\t  this.dirty = this.lazy; // for lazy watchers\n\t  this.deps = [];\n\t  this.newDeps = [];\n\t  this.depIds = new _Set();\n\t  this.newDepIds = new _Set();\n\t  this.prevError = null; // for async error stacks\n\t  // parse expression for getter/setter\n\t  if (isFn) {\n\t    this.getter = expOrFn;\n\t    this.setter = undefined;\n\t  } else {\n\t    var res = parseExpression$1(expOrFn, this.twoWay);\n\t    this.getter = res.get;\n\t    this.setter = res.set;\n\t  }\n\t  this.value = this.lazy ? undefined : this.get();\n\t  // state for avoiding false triggers for deep and Array\n\t  // watchers during vm._digest()\n\t  this.queued = this.shallow = false;\n\t}\n\t\n\t/**\n\t * Evaluate the getter, and re-collect dependencies.\n\t */\n\t\n\tWatcher.prototype.get = function () {\n\t  this.beforeGet();\n\t  var scope = this.scope || this.vm;\n\t  var value;\n\t  try {\n\t    value = this.getter.call(scope, scope);\n\t  } catch (e) {\n\t    if (false) {\n\t      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n\t    }\n\t  }\n\t  // \"touch\" every property so they are all tracked as\n\t  // dependencies for deep watching\n\t  if (this.deep) {\n\t    traverse(value);\n\t  }\n\t  if (this.preProcess) {\n\t    value = this.preProcess(value);\n\t  }\n\t  if (this.filters) {\n\t    value = scope._applyFilters(value, null, this.filters, false);\n\t  }\n\t  if (this.postProcess) {\n\t    value = this.postProcess(value);\n\t  }\n\t  this.afterGet();\n\t  return value;\n\t};\n\t\n\t/**\n\t * Set the corresponding value with the setter.\n\t *\n\t * @param {*} value\n\t */\n\t\n\tWatcher.prototype.set = function (value) {\n\t  var scope = this.scope || this.vm;\n\t  if (this.filters) {\n\t    value = scope._applyFilters(value, this.value, this.filters, true);\n\t  }\n\t  try {\n\t    this.setter.call(scope, scope, value);\n\t  } catch (e) {\n\t    if (false) {\n\t      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n\t    }\n\t  }\n\t  // two-way sync for v-for alias\n\t  var forContext = scope.$forContext;\n\t  if (forContext && forContext.alias === this.expression) {\n\t    if (forContext.filters) {\n\t      (\"production\") !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n\t      return;\n\t    }\n\t    forContext._withLock(function () {\n\t      if (scope.$key) {\n\t        // original is an object\n\t        forContext.rawValue[scope.$key] = value;\n\t      } else {\n\t        forContext.rawValue.$set(scope.$index, value);\n\t      }\n\t    });\n\t  }\n\t};\n\t\n\t/**\n\t * Prepare for dependency collection.\n\t */\n\t\n\tWatcher.prototype.beforeGet = function () {\n\t  Dep.target = this;\n\t};\n\t\n\t/**\n\t * Add a dependency to this directive.\n\t *\n\t * @param {Dep} dep\n\t */\n\t\n\tWatcher.prototype.addDep = function (dep) {\n\t  var id = dep.id;\n\t  if (!this.newDepIds.has(id)) {\n\t    this.newDepIds.add(id);\n\t    this.newDeps.push(dep);\n\t    if (!this.depIds.has(id)) {\n\t      dep.addSub(this);\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Clean up for dependency collection.\n\t */\n\t\n\tWatcher.prototype.afterGet = function () {\n\t  Dep.target = null;\n\t  var i = this.deps.length;\n\t  while (i--) {\n\t    var dep = this.deps[i];\n\t    if (!this.newDepIds.has(dep.id)) {\n\t      dep.removeSub(this);\n\t    }\n\t  }\n\t  var tmp = this.depIds;\n\t  this.depIds = this.newDepIds;\n\t  this.newDepIds = tmp;\n\t  this.newDepIds.clear();\n\t  tmp = this.deps;\n\t  this.deps = this.newDeps;\n\t  this.newDeps = tmp;\n\t  this.newDeps.length = 0;\n\t};\n\t\n\t/**\n\t * Subscriber interface.\n\t * Will be called when a dependency changes.\n\t *\n\t * @param {Boolean} shallow\n\t */\n\t\n\tWatcher.prototype.update = function (shallow) {\n\t  if (this.lazy) {\n\t    this.dirty = true;\n\t  } else if (this.sync || !config.async) {\n\t    this.run();\n\t  } else {\n\t    // if queued, only overwrite shallow with non-shallow,\n\t    // but not the other way around.\n\t    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n\t    this.queued = true;\n\t    // record before-push error stack in debug mode\n\t    /* istanbul ignore if */\n\t    if (false) {\n\t      this.prevError = new Error('[vue] async stack trace');\n\t    }\n\t    pushWatcher(this);\n\t  }\n\t};\n\t\n\t/**\n\t * Batcher job interface.\n\t * Will be called by the batcher.\n\t */\n\t\n\tWatcher.prototype.run = function () {\n\t  if (this.active) {\n\t    var value = this.get();\n\t    if (value !== this.value ||\n\t    // Deep watchers and watchers on Object/Arrays should fire even\n\t    // when the value is the same, because the value may\n\t    // have mutated; but only do so if this is a\n\t    // non-shallow update (caused by a vm digest).\n\t    (isObject(value) || this.deep) && !this.shallow) {\n\t      // set new value\n\t      var oldValue = this.value;\n\t      this.value = value;\n\t      // in debug + async mode, when a watcher callbacks\n\t      // throws, we also throw the saved before-push error\n\t      // so the full cross-tick stack trace is available.\n\t      var prevError = this.prevError;\n\t      /* istanbul ignore if */\n\t      if (false) {\n\t        this.prevError = null;\n\t        try {\n\t          this.cb.call(this.vm, value, oldValue);\n\t        } catch (e) {\n\t          nextTick(function () {\n\t            throw prevError;\n\t          }, 0);\n\t          throw e;\n\t        }\n\t      } else {\n\t        this.cb.call(this.vm, value, oldValue);\n\t      }\n\t    }\n\t    this.queued = this.shallow = false;\n\t  }\n\t};\n\t\n\t/**\n\t * Evaluate the value of the watcher.\n\t * This only gets called for lazy watchers.\n\t */\n\t\n\tWatcher.prototype.evaluate = function () {\n\t  // avoid overwriting another watcher that is being\n\t  // collected.\n\t  var current = Dep.target;\n\t  this.value = this.get();\n\t  this.dirty = false;\n\t  Dep.target = current;\n\t};\n\t\n\t/**\n\t * Depend on all deps collected by this watcher.\n\t */\n\t\n\tWatcher.prototype.depend = function () {\n\t  var i = this.deps.length;\n\t  while (i--) {\n\t    this.deps[i].depend();\n\t  }\n\t};\n\t\n\t/**\n\t * Remove self from all dependencies' subcriber list.\n\t */\n\t\n\tWatcher.prototype.teardown = function () {\n\t  if (this.active) {\n\t    // remove self from vm's watcher list\n\t    // this is a somewhat expensive operation so we skip it\n\t    // if the vm is being destroyed or is performing a v-for\n\t    // re-render (the watcher list is then filtered by v-for).\n\t    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n\t      this.vm._watchers.$remove(this);\n\t    }\n\t    var i = this.deps.length;\n\t    while (i--) {\n\t      this.deps[i].removeSub(this);\n\t    }\n\t    this.active = false;\n\t    this.vm = this.cb = this.value = null;\n\t  }\n\t};\n\t\n\t/**\n\t * Recrusively traverse an object to evoke all converted\n\t * getters, so that every nested property inside the object\n\t * is collected as a \"deep\" dependency.\n\t *\n\t * @param {*} val\n\t */\n\t\n\tvar seenObjects = new _Set();\n\tfunction traverse(val, seen) {\n\t  var i = undefined,\n\t      keys = undefined;\n\t  if (!seen) {\n\t    seen = seenObjects;\n\t    seen.clear();\n\t  }\n\t  var isA = isArray(val);\n\t  var isO = isObject(val);\n\t  if ((isA || isO) && Object.isExtensible(val)) {\n\t    if (val.__ob__) {\n\t      var depId = val.__ob__.dep.id;\n\t      if (seen.has(depId)) {\n\t        return;\n\t      } else {\n\t        seen.add(depId);\n\t      }\n\t    }\n\t    if (isA) {\n\t      i = val.length;\n\t      while (i--) traverse(val[i], seen);\n\t    } else if (isO) {\n\t      keys = Object.keys(val);\n\t      i = keys.length;\n\t      while (i--) traverse(val[keys[i]], seen);\n\t    }\n\t  }\n\t}\n\t\n\tvar text$1 = {\n\t\n\t  bind: function bind() {\n\t    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n\t  },\n\t\n\t  update: function update(value) {\n\t    this.el[this.attr] = _toString(value);\n\t  }\n\t};\n\t\n\tvar templateCache = new Cache(1000);\n\tvar idSelectorCache = new Cache(1000);\n\t\n\tvar map = {\n\t  efault: [0, '', ''],\n\t  legend: [1, '<fieldset>', '</fieldset>'],\n\t  tr: [2, '<table><tbody>', '</tbody></table>'],\n\t  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n\t};\n\t\n\tmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\t\n\tmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\t\n\tmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\t\n\tmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\t\n\t/**\n\t * Check if a node is a supported template node with a\n\t * DocumentFragment content.\n\t *\n\t * @param {Node} node\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isRealTemplate(node) {\n\t  return isTemplate(node) && isFragment(node.content);\n\t}\n\t\n\tvar tagRE$1 = /<([\\w:-]+)/;\n\tvar entityRE = /&#?\\w+?;/;\n\tvar commentRE = /<!--/;\n\t\n\t/**\n\t * Convert a string template to a DocumentFragment.\n\t * Determines correct wrapping by tag types. Wrapping\n\t * strategy found in jQuery & component/domify.\n\t *\n\t * @param {String} templateString\n\t * @param {Boolean} raw\n\t * @return {DocumentFragment}\n\t */\n\t\n\tfunction stringToFragment(templateString, raw) {\n\t  // try a cache hit first\n\t  var cacheKey = raw ? templateString : templateString.trim();\n\t  var hit = templateCache.get(cacheKey);\n\t  if (hit) {\n\t    return hit;\n\t  }\n\t\n\t  var frag = document.createDocumentFragment();\n\t  var tagMatch = templateString.match(tagRE$1);\n\t  var entityMatch = entityRE.test(templateString);\n\t  var commentMatch = commentRE.test(templateString);\n\t\n\t  if (!tagMatch && !entityMatch && !commentMatch) {\n\t    // text only, return a single text node.\n\t    frag.appendChild(document.createTextNode(templateString));\n\t  } else {\n\t    var tag = tagMatch && tagMatch[1];\n\t    var wrap = map[tag] || map.efault;\n\t    var depth = wrap[0];\n\t    var prefix = wrap[1];\n\t    var suffix = wrap[2];\n\t    var node = document.createElement('div');\n\t\n\t    node.innerHTML = prefix + templateString + suffix;\n\t    while (depth--) {\n\t      node = node.lastChild;\n\t    }\n\t\n\t    var child;\n\t    /* eslint-disable no-cond-assign */\n\t    while (child = node.firstChild) {\n\t      /* eslint-enable no-cond-assign */\n\t      frag.appendChild(child);\n\t    }\n\t  }\n\t  if (!raw) {\n\t    trimNode(frag);\n\t  }\n\t  templateCache.put(cacheKey, frag);\n\t  return frag;\n\t}\n\t\n\t/**\n\t * Convert a template node to a DocumentFragment.\n\t *\n\t * @param {Node} node\n\t * @return {DocumentFragment}\n\t */\n\t\n\tfunction nodeToFragment(node) {\n\t  // if its a template tag and the browser supports it,\n\t  // its content is already a document fragment. However, iOS Safari has\n\t  // bug when using directly cloned template content with touch\n\t  // events and can cause crashes when the nodes are removed from DOM, so we\n\t  // have to treat template elements as string templates. (#2805)\n\t  /* istanbul ignore if */\n\t  if (isRealTemplate(node)) {\n\t    return stringToFragment(node.innerHTML);\n\t  }\n\t  // script template\n\t  if (node.tagName === 'SCRIPT') {\n\t    return stringToFragment(node.textContent);\n\t  }\n\t  // normal node, clone it to avoid mutating the original\n\t  var clonedNode = cloneNode(node);\n\t  var frag = document.createDocumentFragment();\n\t  var child;\n\t  /* eslint-disable no-cond-assign */\n\t  while (child = clonedNode.firstChild) {\n\t    /* eslint-enable no-cond-assign */\n\t    frag.appendChild(child);\n\t  }\n\t  trimNode(frag);\n\t  return frag;\n\t}\n\t\n\t// Test for the presence of the Safari template cloning bug\n\t// https://bugs.webkit.org/showug.cgi?id=137755\n\tvar hasBrokenTemplate = (function () {\n\t  /* istanbul ignore else */\n\t  if (inBrowser) {\n\t    var a = document.createElement('div');\n\t    a.innerHTML = '<template>1</template>';\n\t    return !a.cloneNode(true).firstChild.innerHTML;\n\t  } else {\n\t    return false;\n\t  }\n\t})();\n\t\n\t// Test for IE10/11 textarea placeholder clone bug\n\tvar hasTextareaCloneBug = (function () {\n\t  /* istanbul ignore else */\n\t  if (inBrowser) {\n\t    var t = document.createElement('textarea');\n\t    t.placeholder = 't';\n\t    return t.cloneNode(true).value === 't';\n\t  } else {\n\t    return false;\n\t  }\n\t})();\n\t\n\t/**\n\t * 1. Deal with Safari cloning nested <template> bug by\n\t *    manually cloning all template instances.\n\t * 2. Deal with IE10/11 textarea placeholder bug by setting\n\t *    the correct value after cloning.\n\t *\n\t * @param {Element|DocumentFragment} node\n\t * @return {Element|DocumentFragment}\n\t */\n\t\n\tfunction cloneNode(node) {\n\t  /* istanbul ignore if */\n\t  if (!node.querySelectorAll) {\n\t    return node.cloneNode();\n\t  }\n\t  var res = node.cloneNode(true);\n\t  var i, original, cloned;\n\t  /* istanbul ignore if */\n\t  if (hasBrokenTemplate) {\n\t    var tempClone = res;\n\t    if (isRealTemplate(node)) {\n\t      node = node.content;\n\t      tempClone = res.content;\n\t    }\n\t    original = node.querySelectorAll('template');\n\t    if (original.length) {\n\t      cloned = tempClone.querySelectorAll('template');\n\t      i = cloned.length;\n\t      while (i--) {\n\t        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n\t      }\n\t    }\n\t  }\n\t  /* istanbul ignore if */\n\t  if (hasTextareaCloneBug) {\n\t    if (node.tagName === 'TEXTAREA') {\n\t      res.value = node.value;\n\t    } else {\n\t      original = node.querySelectorAll('textarea');\n\t      if (original.length) {\n\t        cloned = res.querySelectorAll('textarea');\n\t        i = cloned.length;\n\t        while (i--) {\n\t          cloned[i].value = original[i].value;\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return res;\n\t}\n\t\n\t/**\n\t * Process the template option and normalizes it into a\n\t * a DocumentFragment that can be used as a partial or a\n\t * instance template.\n\t *\n\t * @param {*} template\n\t *        Possible values include:\n\t *        - DocumentFragment object\n\t *        - Node object of type Template\n\t *        - id selector: '#some-template-id'\n\t *        - template string: '<div><span>{{msg}}</span></div>'\n\t * @param {Boolean} shouldClone\n\t * @param {Boolean} raw\n\t *        inline HTML interpolation. Do not check for id\n\t *        selector and keep whitespace in the string.\n\t * @return {DocumentFragment|undefined}\n\t */\n\t\n\tfunction parseTemplate(template, shouldClone, raw) {\n\t  var node, frag;\n\t\n\t  // if the template is already a document fragment,\n\t  // do nothing\n\t  if (isFragment(template)) {\n\t    trimNode(template);\n\t    return shouldClone ? cloneNode(template) : template;\n\t  }\n\t\n\t  if (typeof template === 'string') {\n\t    // id selector\n\t    if (!raw && template.charAt(0) === '#') {\n\t      // id selector can be cached too\n\t      frag = idSelectorCache.get(template);\n\t      if (!frag) {\n\t        node = document.getElementById(template.slice(1));\n\t        if (node) {\n\t          frag = nodeToFragment(node);\n\t          // save selector to cache\n\t          idSelectorCache.put(template, frag);\n\t        }\n\t      }\n\t    } else {\n\t      // normal string template\n\t      frag = stringToFragment(template, raw);\n\t    }\n\t  } else if (template.nodeType) {\n\t    // a direct node\n\t    frag = nodeToFragment(template);\n\t  }\n\t\n\t  return frag && shouldClone ? cloneNode(frag) : frag;\n\t}\n\t\n\tvar template = Object.freeze({\n\t  cloneNode: cloneNode,\n\t  parseTemplate: parseTemplate\n\t});\n\t\n\tvar html = {\n\t\n\t  bind: function bind() {\n\t    // a comment node means this is a binding for\n\t    // {{{ inline unescaped html }}}\n\t    if (this.el.nodeType === 8) {\n\t      // hold nodes\n\t      this.nodes = [];\n\t      // replace the placeholder with proper anchor\n\t      this.anchor = createAnchor('v-html');\n\t      replace(this.el, this.anchor);\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    value = _toString(value);\n\t    if (this.nodes) {\n\t      this.swap(value);\n\t    } else {\n\t      this.el.innerHTML = value;\n\t    }\n\t  },\n\t\n\t  swap: function swap(value) {\n\t    // remove old nodes\n\t    var i = this.nodes.length;\n\t    while (i--) {\n\t      remove(this.nodes[i]);\n\t    }\n\t    // convert new value to a fragment\n\t    // do not attempt to retrieve from id selector\n\t    var frag = parseTemplate(value, true, true);\n\t    // save a reference to these nodes so we can remove later\n\t    this.nodes = toArray(frag.childNodes);\n\t    before(frag, this.anchor);\n\t  }\n\t};\n\t\n\t/**\n\t * Abstraction for a partially-compiled fragment.\n\t * Can optionally compile content with a child scope.\n\t *\n\t * @param {Function} linker\n\t * @param {Vue} vm\n\t * @param {DocumentFragment} frag\n\t * @param {Vue} [host]\n\t * @param {Object} [scope]\n\t * @param {Fragment} [parentFrag]\n\t */\n\tfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n\t  this.children = [];\n\t  this.childFrags = [];\n\t  this.vm = vm;\n\t  this.scope = scope;\n\t  this.inserted = false;\n\t  this.parentFrag = parentFrag;\n\t  if (parentFrag) {\n\t    parentFrag.childFrags.push(this);\n\t  }\n\t  this.unlink = linker(vm, frag, host, scope, this);\n\t  var single = this.single = frag.childNodes.length === 1 &&\n\t  // do not go single mode if the only node is an anchor\n\t  !frag.childNodes[0].__v_anchor;\n\t  if (single) {\n\t    this.node = frag.childNodes[0];\n\t    this.before = singleBefore;\n\t    this.remove = singleRemove;\n\t  } else {\n\t    this.node = createAnchor('fragment-start');\n\t    this.end = createAnchor('fragment-end');\n\t    this.frag = frag;\n\t    prepend(this.node, frag);\n\t    frag.appendChild(this.end);\n\t    this.before = multiBefore;\n\t    this.remove = multiRemove;\n\t  }\n\t  this.node.__v_frag = this;\n\t}\n\t\n\t/**\n\t * Call attach/detach for all components contained within\n\t * this fragment. Also do so recursively for all child\n\t * fragments.\n\t *\n\t * @param {Function} hook\n\t */\n\t\n\tFragment.prototype.callHook = function (hook) {\n\t  var i, l;\n\t  for (i = 0, l = this.childFrags.length; i < l; i++) {\n\t    this.childFrags[i].callHook(hook);\n\t  }\n\t  for (i = 0, l = this.children.length; i < l; i++) {\n\t    hook(this.children[i]);\n\t  }\n\t};\n\t\n\t/**\n\t * Insert fragment before target, single node version\n\t *\n\t * @param {Node} target\n\t * @param {Boolean} withTransition\n\t */\n\t\n\tfunction singleBefore(target, withTransition) {\n\t  this.inserted = true;\n\t  var method = withTransition !== false ? beforeWithTransition : before;\n\t  method(this.node, target, this.vm);\n\t  if (inDoc(this.node)) {\n\t    this.callHook(attach);\n\t  }\n\t}\n\t\n\t/**\n\t * Remove fragment, single node version\n\t */\n\t\n\tfunction singleRemove() {\n\t  this.inserted = false;\n\t  var shouldCallRemove = inDoc(this.node);\n\t  var self = this;\n\t  this.beforeRemove();\n\t  removeWithTransition(this.node, this.vm, function () {\n\t    if (shouldCallRemove) {\n\t      self.callHook(detach);\n\t    }\n\t    self.destroy();\n\t  });\n\t}\n\t\n\t/**\n\t * Insert fragment before target, multi-nodes version\n\t *\n\t * @param {Node} target\n\t * @param {Boolean} withTransition\n\t */\n\t\n\tfunction multiBefore(target, withTransition) {\n\t  this.inserted = true;\n\t  var vm = this.vm;\n\t  var method = withTransition !== false ? beforeWithTransition : before;\n\t  mapNodeRange(this.node, this.end, function (node) {\n\t    method(node, target, vm);\n\t  });\n\t  if (inDoc(this.node)) {\n\t    this.callHook(attach);\n\t  }\n\t}\n\t\n\t/**\n\t * Remove fragment, multi-nodes version\n\t */\n\t\n\tfunction multiRemove() {\n\t  this.inserted = false;\n\t  var self = this;\n\t  var shouldCallRemove = inDoc(this.node);\n\t  this.beforeRemove();\n\t  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n\t    if (shouldCallRemove) {\n\t      self.callHook(detach);\n\t    }\n\t    self.destroy();\n\t  });\n\t}\n\t\n\t/**\n\t * Prepare the fragment for removal.\n\t */\n\t\n\tFragment.prototype.beforeRemove = function () {\n\t  var i, l;\n\t  for (i = 0, l = this.childFrags.length; i < l; i++) {\n\t    // call the same method recursively on child\n\t    // fragments, depth-first\n\t    this.childFrags[i].beforeRemove(false);\n\t  }\n\t  for (i = 0, l = this.children.length; i < l; i++) {\n\t    // Call destroy for all contained instances,\n\t    // with remove:false and defer:true.\n\t    // Defer is necessary because we need to\n\t    // keep the children to call detach hooks\n\t    // on them.\n\t    this.children[i].$destroy(false, true);\n\t  }\n\t  var dirs = this.unlink.dirs;\n\t  for (i = 0, l = dirs.length; i < l; i++) {\n\t    // disable the watchers on all the directives\n\t    // so that the rendered content stays the same\n\t    // during removal.\n\t    dirs[i]._watcher && dirs[i]._watcher.teardown();\n\t  }\n\t};\n\t\n\t/**\n\t * Destroy the fragment.\n\t */\n\t\n\tFragment.prototype.destroy = function () {\n\t  if (this.parentFrag) {\n\t    this.parentFrag.childFrags.$remove(this);\n\t  }\n\t  this.node.__v_frag = null;\n\t  this.unlink();\n\t};\n\t\n\t/**\n\t * Call attach hook for a Vue instance.\n\t *\n\t * @param {Vue} child\n\t */\n\t\n\tfunction attach(child) {\n\t  if (!child._isAttached && inDoc(child.$el)) {\n\t    child._callHook('attached');\n\t  }\n\t}\n\t\n\t/**\n\t * Call detach hook for a Vue instance.\n\t *\n\t * @param {Vue} child\n\t */\n\t\n\tfunction detach(child) {\n\t  if (child._isAttached && !inDoc(child.$el)) {\n\t    child._callHook('detached');\n\t  }\n\t}\n\t\n\tvar linkerCache = new Cache(5000);\n\t\n\t/**\n\t * A factory that can be used to create instances of a\n\t * fragment. Caches the compiled linker if possible.\n\t *\n\t * @param {Vue} vm\n\t * @param {Element|String} el\n\t */\n\tfunction FragmentFactory(vm, el) {\n\t  this.vm = vm;\n\t  var template;\n\t  var isString = typeof el === 'string';\n\t  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n\t    template = parseTemplate(el, true);\n\t  } else {\n\t    template = document.createDocumentFragment();\n\t    template.appendChild(el);\n\t  }\n\t  this.template = template;\n\t  // linker can be cached, but only for components\n\t  var linker;\n\t  var cid = vm.constructor.cid;\n\t  if (cid > 0) {\n\t    var cacheId = cid + (isString ? el : getOuterHTML(el));\n\t    linker = linkerCache.get(cacheId);\n\t    if (!linker) {\n\t      linker = compile(template, vm.$options, true);\n\t      linkerCache.put(cacheId, linker);\n\t    }\n\t  } else {\n\t    linker = compile(template, vm.$options, true);\n\t  }\n\t  this.linker = linker;\n\t}\n\t\n\t/**\n\t * Create a fragment instance with given host and scope.\n\t *\n\t * @param {Vue} host\n\t * @param {Object} scope\n\t * @param {Fragment} parentFrag\n\t */\n\t\n\tFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n\t  var frag = cloneNode(this.template);\n\t  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n\t};\n\t\n\tvar ON = 700;\n\tvar MODEL = 800;\n\tvar BIND = 850;\n\tvar TRANSITION = 1100;\n\tvar EL = 1500;\n\tvar COMPONENT = 1500;\n\tvar PARTIAL = 1750;\n\tvar IF = 2100;\n\tvar FOR = 2200;\n\tvar SLOT = 2300;\n\t\n\tvar uid$3 = 0;\n\t\n\tvar vFor = {\n\t\n\t  priority: FOR,\n\t  terminal: true,\n\t\n\t  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\t\n\t  bind: function bind() {\n\t    if (false) {\n\t      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\n\t    }\n\t\n\t    // support \"item in/of items\" syntax\n\t    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n\t    if (inMatch) {\n\t      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n\t      if (itMatch) {\n\t        this.iterator = itMatch[1].trim();\n\t        this.alias = itMatch[2].trim();\n\t      } else {\n\t        this.alias = inMatch[1].trim();\n\t      }\n\t      this.expression = inMatch[2];\n\t    }\n\t\n\t    if (!this.alias) {\n\t      (\"production\") !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n\t      return;\n\t    }\n\t\n\t    // uid as a cache identifier\n\t    this.id = '__v-for__' + ++uid$3;\n\t\n\t    // check if this is an option list,\n\t    // so that we know if we need to update the <select>'s\n\t    // v-model when the option list has changed.\n\t    // because v-model has a lower priority than v-for,\n\t    // the v-model is not bound here yet, so we have to\n\t    // retrive it in the actual updateModel() function.\n\t    var tag = this.el.tagName;\n\t    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\t\n\t    // setup anchor nodes\n\t    this.start = createAnchor('v-for-start');\n\t    this.end = createAnchor('v-for-end');\n\t    replace(this.el, this.end);\n\t    before(this.start, this.end);\n\t\n\t    // cache\n\t    this.cache = Object.create(null);\n\t\n\t    // fragment factory\n\t    this.factory = new FragmentFactory(this.vm, this.el);\n\t  },\n\t\n\t  update: function update(data) {\n\t    this.diff(data);\n\t    this.updateRef();\n\t    this.updateModel();\n\t  },\n\t\n\t  /**\n\t   * Diff, based on new data and old data, determine the\n\t   * minimum amount of DOM manipulations needed to make the\n\t   * DOM reflect the new data Array.\n\t   *\n\t   * The algorithm diffs the new data Array by storing a\n\t   * hidden reference to an owner vm instance on previously\n\t   * seen data. This allows us to achieve O(n) which is\n\t   * better than a levenshtein distance based algorithm,\n\t   * which is O(m * n).\n\t   *\n\t   * @param {Array} data\n\t   */\n\t\n\t  diff: function diff(data) {\n\t    // check if the Array was converted from an Object\n\t    var item = data[0];\n\t    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\t\n\t    var trackByKey = this.params.trackBy;\n\t    var oldFrags = this.frags;\n\t    var frags = this.frags = new Array(data.length);\n\t    var alias = this.alias;\n\t    var iterator = this.iterator;\n\t    var start = this.start;\n\t    var end = this.end;\n\t    var inDocument = inDoc(start);\n\t    var init = !oldFrags;\n\t    var i, l, frag, key, value, primitive;\n\t\n\t    // First pass, go through the new Array and fill up\n\t    // the new frags array. If a piece of data has a cached\n\t    // instance for it, we reuse it. Otherwise build a new\n\t    // instance.\n\t    for (i = 0, l = data.length; i < l; i++) {\n\t      item = data[i];\n\t      key = convertedFromObject ? item.$key : null;\n\t      value = convertedFromObject ? item.$value : item;\n\t      primitive = !isObject(value);\n\t      frag = !init && this.getCachedFrag(value, i, key);\n\t      if (frag) {\n\t        // reusable fragment\n\t        frag.reused = true;\n\t        // update $index\n\t        frag.scope.$index = i;\n\t        // update $key\n\t        if (key) {\n\t          frag.scope.$key = key;\n\t        }\n\t        // update iterator\n\t        if (iterator) {\n\t          frag.scope[iterator] = key !== null ? key : i;\n\t        }\n\t        // update data for track-by, object repeat &\n\t        // primitive values.\n\t        if (trackByKey || convertedFromObject || primitive) {\n\t          withoutConversion(function () {\n\t            frag.scope[alias] = value;\n\t          });\n\t        }\n\t      } else {\n\t        // new instance\n\t        frag = this.create(value, alias, i, key);\n\t        frag.fresh = !init;\n\t      }\n\t      frags[i] = frag;\n\t      if (init) {\n\t        frag.before(end);\n\t      }\n\t    }\n\t\n\t    // we're done for the initial render.\n\t    if (init) {\n\t      return;\n\t    }\n\t\n\t    // Second pass, go through the old fragments and\n\t    // destroy those who are not reused (and remove them\n\t    // from cache)\n\t    var removalIndex = 0;\n\t    var totalRemoved = oldFrags.length - frags.length;\n\t    // when removing a large number of fragments, watcher removal\n\t    // turns out to be a perf bottleneck, so we batch the watcher\n\t    // removals into a single filter call!\n\t    this.vm._vForRemoving = true;\n\t    for (i = 0, l = oldFrags.length; i < l; i++) {\n\t      frag = oldFrags[i];\n\t      if (!frag.reused) {\n\t        this.deleteCachedFrag(frag);\n\t        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n\t      }\n\t    }\n\t    this.vm._vForRemoving = false;\n\t    if (removalIndex) {\n\t      this.vm._watchers = this.vm._watchers.filter(function (w) {\n\t        return w.active;\n\t      });\n\t    }\n\t\n\t    // Final pass, move/insert new fragments into the\n\t    // right place.\n\t    var targetPrev, prevEl, currentPrev;\n\t    var insertionIndex = 0;\n\t    for (i = 0, l = frags.length; i < l; i++) {\n\t      frag = frags[i];\n\t      // this is the frag that we should be after\n\t      targetPrev = frags[i - 1];\n\t      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n\t      if (frag.reused && !frag.staggerCb) {\n\t        currentPrev = findPrevFrag(frag, start, this.id);\n\t        if (currentPrev !== targetPrev && (!currentPrev ||\n\t        // optimization for moving a single item.\n\t        // thanks to suggestions by @livoras in #1807\n\t        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n\t          this.move(frag, prevEl);\n\t        }\n\t      } else {\n\t        // new instance, or still in stagger.\n\t        // insert with updated stagger index.\n\t        this.insert(frag, insertionIndex++, prevEl, inDocument);\n\t      }\n\t      frag.reused = frag.fresh = false;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Create a new fragment instance.\n\t   *\n\t   * @param {*} value\n\t   * @param {String} alias\n\t   * @param {Number} index\n\t   * @param {String} [key]\n\t   * @return {Fragment}\n\t   */\n\t\n\t  create: function create(value, alias, index, key) {\n\t    var host = this._host;\n\t    // create iteration scope\n\t    var parentScope = this._scope || this.vm;\n\t    var scope = Object.create(parentScope);\n\t    // ref holder for the scope\n\t    scope.$refs = Object.create(parentScope.$refs);\n\t    scope.$els = Object.create(parentScope.$els);\n\t    // make sure point $parent to parent scope\n\t    scope.$parent = parentScope;\n\t    // for two-way binding on alias\n\t    scope.$forContext = this;\n\t    // define scope properties\n\t    // important: define the scope alias without forced conversion\n\t    // so that frozen data structures remain non-reactive.\n\t    withoutConversion(function () {\n\t      defineReactive(scope, alias, value);\n\t    });\n\t    defineReactive(scope, '$index', index);\n\t    if (key) {\n\t      defineReactive(scope, '$key', key);\n\t    } else if (scope.$key) {\n\t      // avoid accidental fallback\n\t      def(scope, '$key', null);\n\t    }\n\t    if (this.iterator) {\n\t      defineReactive(scope, this.iterator, key !== null ? key : index);\n\t    }\n\t    var frag = this.factory.create(host, scope, this._frag);\n\t    frag.forId = this.id;\n\t    this.cacheFrag(value, frag, index, key);\n\t    return frag;\n\t  },\n\t\n\t  /**\n\t   * Update the v-ref on owner vm.\n\t   */\n\t\n\t  updateRef: function updateRef() {\n\t    var ref = this.descriptor.ref;\n\t    if (!ref) return;\n\t    var hash = (this._scope || this.vm).$refs;\n\t    var refs;\n\t    if (!this.fromObject) {\n\t      refs = this.frags.map(findVmFromFrag);\n\t    } else {\n\t      refs = {};\n\t      this.frags.forEach(function (frag) {\n\t        refs[frag.scope.$key] = findVmFromFrag(frag);\n\t      });\n\t    }\n\t    hash[ref] = refs;\n\t  },\n\t\n\t  /**\n\t   * For option lists, update the containing v-model on\n\t   * parent <select>.\n\t   */\n\t\n\t  updateModel: function updateModel() {\n\t    if (this.isOption) {\n\t      var parent = this.start.parentNode;\n\t      var model = parent && parent.__v_model;\n\t      if (model) {\n\t        model.forceUpdate();\n\t      }\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Insert a fragment. Handles staggering.\n\t   *\n\t   * @param {Fragment} frag\n\t   * @param {Number} index\n\t   * @param {Node} prevEl\n\t   * @param {Boolean} inDocument\n\t   */\n\t\n\t  insert: function insert(frag, index, prevEl, inDocument) {\n\t    if (frag.staggerCb) {\n\t      frag.staggerCb.cancel();\n\t      frag.staggerCb = null;\n\t    }\n\t    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n\t    if (inDocument && staggerAmount) {\n\t      // create an anchor and insert it synchronously,\n\t      // so that we can resolve the correct order without\n\t      // worrying about some elements not inserted yet\n\t      var anchor = frag.staggerAnchor;\n\t      if (!anchor) {\n\t        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n\t        anchor.__v_frag = frag;\n\t      }\n\t      after(anchor, prevEl);\n\t      var op = frag.staggerCb = cancellable(function () {\n\t        frag.staggerCb = null;\n\t        frag.before(anchor);\n\t        remove(anchor);\n\t      });\n\t      setTimeout(op, staggerAmount);\n\t    } else {\n\t      var target = prevEl.nextSibling;\n\t      /* istanbul ignore if */\n\t      if (!target) {\n\t        // reset end anchor position in case the position was messed up\n\t        // by an external drag-n-drop library.\n\t        after(this.end, prevEl);\n\t        target = this.end;\n\t      }\n\t      frag.before(target);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Remove a fragment. Handles staggering.\n\t   *\n\t   * @param {Fragment} frag\n\t   * @param {Number} index\n\t   * @param {Number} total\n\t   * @param {Boolean} inDocument\n\t   */\n\t\n\t  remove: function remove(frag, index, total, inDocument) {\n\t    if (frag.staggerCb) {\n\t      frag.staggerCb.cancel();\n\t      frag.staggerCb = null;\n\t      // it's not possible for the same frag to be removed\n\t      // twice, so if we have a pending stagger callback,\n\t      // it means this frag is queued for enter but removed\n\t      // before its transition started. Since it is already\n\t      // destroyed, we can just leave it in detached state.\n\t      return;\n\t    }\n\t    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n\t    if (inDocument && staggerAmount) {\n\t      var op = frag.staggerCb = cancellable(function () {\n\t        frag.staggerCb = null;\n\t        frag.remove();\n\t      });\n\t      setTimeout(op, staggerAmount);\n\t    } else {\n\t      frag.remove();\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Move a fragment to a new position.\n\t   * Force no transition.\n\t   *\n\t   * @param {Fragment} frag\n\t   * @param {Node} prevEl\n\t   */\n\t\n\t  move: function move(frag, prevEl) {\n\t    // fix a common issue with Sortable:\n\t    // if prevEl doesn't have nextSibling, this means it's\n\t    // been dragged after the end anchor. Just re-position\n\t    // the end anchor to the end of the container.\n\t    /* istanbul ignore if */\n\t    if (!prevEl.nextSibling) {\n\t      this.end.parentNode.appendChild(this.end);\n\t    }\n\t    frag.before(prevEl.nextSibling, false);\n\t  },\n\t\n\t  /**\n\t   * Cache a fragment using track-by or the object key.\n\t   *\n\t   * @param {*} value\n\t   * @param {Fragment} frag\n\t   * @param {Number} index\n\t   * @param {String} [key]\n\t   */\n\t\n\t  cacheFrag: function cacheFrag(value, frag, index, key) {\n\t    var trackByKey = this.params.trackBy;\n\t    var cache = this.cache;\n\t    var primitive = !isObject(value);\n\t    var id;\n\t    if (key || trackByKey || primitive) {\n\t      id = getTrackByKey(index, key, value, trackByKey);\n\t      if (!cache[id]) {\n\t        cache[id] = frag;\n\t      } else if (trackByKey !== '$index') {\n\t        (\"production\") !== 'production' && this.warnDuplicate(value);\n\t      }\n\t    } else {\n\t      id = this.id;\n\t      if (hasOwn(value, id)) {\n\t        if (value[id] === null) {\n\t          value[id] = frag;\n\t        } else {\n\t          (\"production\") !== 'production' && this.warnDuplicate(value);\n\t        }\n\t      } else if (Object.isExtensible(value)) {\n\t        def(value, id, frag);\n\t      } else if (false) {\n\t        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n\t      }\n\t    }\n\t    frag.raw = value;\n\t  },\n\t\n\t  /**\n\t   * Get a cached fragment from the value/index/key\n\t   *\n\t   * @param {*} value\n\t   * @param {Number} index\n\t   * @param {String} key\n\t   * @return {Fragment}\n\t   */\n\t\n\t  getCachedFrag: function getCachedFrag(value, index, key) {\n\t    var trackByKey = this.params.trackBy;\n\t    var primitive = !isObject(value);\n\t    var frag;\n\t    if (key || trackByKey || primitive) {\n\t      var id = getTrackByKey(index, key, value, trackByKey);\n\t      frag = this.cache[id];\n\t    } else {\n\t      frag = value[this.id];\n\t    }\n\t    if (frag && (frag.reused || frag.fresh)) {\n\t      (\"production\") !== 'production' && this.warnDuplicate(value);\n\t    }\n\t    return frag;\n\t  },\n\t\n\t  /**\n\t   * Delete a fragment from cache.\n\t   *\n\t   * @param {Fragment} frag\n\t   */\n\t\n\t  deleteCachedFrag: function deleteCachedFrag(frag) {\n\t    var value = frag.raw;\n\t    var trackByKey = this.params.trackBy;\n\t    var scope = frag.scope;\n\t    var index = scope.$index;\n\t    // fix #948: avoid accidentally fall through to\n\t    // a parent repeater which happens to have $key.\n\t    var key = hasOwn(scope, '$key') && scope.$key;\n\t    var primitive = !isObject(value);\n\t    if (trackByKey || key || primitive) {\n\t      var id = getTrackByKey(index, key, value, trackByKey);\n\t      this.cache[id] = null;\n\t    } else {\n\t      value[this.id] = null;\n\t      frag.raw = null;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Get the stagger amount for an insertion/removal.\n\t   *\n\t   * @param {Fragment} frag\n\t   * @param {Number} index\n\t   * @param {Number} total\n\t   * @param {String} type\n\t   */\n\t\n\t  getStagger: function getStagger(frag, index, total, type) {\n\t    type = type + 'Stagger';\n\t    var trans = frag.node.__v_trans;\n\t    var hooks = trans && trans.hooks;\n\t    var hook = hooks && (hooks[type] || hooks.stagger);\n\t    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n\t  },\n\t\n\t  /**\n\t   * Pre-process the value before piping it through the\n\t   * filters. This is passed to and called by the watcher.\n\t   */\n\t\n\t  _preProcess: function _preProcess(value) {\n\t    // regardless of type, store the un-filtered raw value.\n\t    this.rawValue = value;\n\t    return value;\n\t  },\n\t\n\t  /**\n\t   * Post-process the value after it has been piped through\n\t   * the filters. This is passed to and called by the watcher.\n\t   *\n\t   * It is necessary for this to be called during the\n\t   * watcher's dependency collection phase because we want\n\t   * the v-for to update when the source Object is mutated.\n\t   */\n\t\n\t  _postProcess: function _postProcess(value) {\n\t    if (isArray(value)) {\n\t      return value;\n\t    } else if (isPlainObject(value)) {\n\t      // convert plain object to array.\n\t      var keys = Object.keys(value);\n\t      var i = keys.length;\n\t      var res = new Array(i);\n\t      var key;\n\t      while (i--) {\n\t        key = keys[i];\n\t        res[i] = {\n\t          $key: key,\n\t          $value: value[key]\n\t        };\n\t      }\n\t      return res;\n\t    } else {\n\t      if (typeof value === 'number' && !isNaN(value)) {\n\t        value = range(value);\n\t      }\n\t      return value || [];\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    if (this.descriptor.ref) {\n\t      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n\t    }\n\t    if (this.frags) {\n\t      var i = this.frags.length;\n\t      var frag;\n\t      while (i--) {\n\t        frag = this.frags[i];\n\t        this.deleteCachedFrag(frag);\n\t        frag.destroy();\n\t      }\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Helper to find the previous element that is a fragment\n\t * anchor. This is necessary because a destroyed frag's\n\t * element could still be lingering in the DOM before its\n\t * leaving transition finishes, but its inserted flag\n\t * should have been set to false so we can skip them.\n\t *\n\t * If this is a block repeat, we want to make sure we only\n\t * return frag that is bound to this v-for. (see #929)\n\t *\n\t * @param {Fragment} frag\n\t * @param {Comment|Text} anchor\n\t * @param {String} id\n\t * @return {Fragment}\n\t */\n\t\n\tfunction findPrevFrag(frag, anchor, id) {\n\t  var el = frag.node.previousSibling;\n\t  /* istanbul ignore if */\n\t  if (!el) return;\n\t  frag = el.__v_frag;\n\t  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n\t    el = el.previousSibling;\n\t    /* istanbul ignore if */\n\t    if (!el) return;\n\t    frag = el.__v_frag;\n\t  }\n\t  return frag;\n\t}\n\t\n\t/**\n\t * Create a range array from given number.\n\t *\n\t * @param {Number} n\n\t * @return {Array}\n\t */\n\t\n\tfunction range(n) {\n\t  var i = -1;\n\t  var ret = new Array(Math.floor(n));\n\t  while (++i < n) {\n\t    ret[i] = i;\n\t  }\n\t  return ret;\n\t}\n\t\n\t/**\n\t * Get the track by key for an item.\n\t *\n\t * @param {Number} index\n\t * @param {String} key\n\t * @param {*} value\n\t * @param {String} [trackByKey]\n\t */\n\t\n\tfunction getTrackByKey(index, key, value, trackByKey) {\n\t  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n\t}\n\t\n\tif (false) {\n\t  vFor.warnDuplicate = function (value) {\n\t    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n\t  };\n\t}\n\t\n\t/**\n\t * Find a vm from a fragment.\n\t *\n\t * @param {Fragment} frag\n\t * @return {Vue|undefined}\n\t */\n\t\n\tfunction findVmFromFrag(frag) {\n\t  var node = frag.node;\n\t  // handle multi-node frag\n\t  if (frag.end) {\n\t    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n\t      node = node.nextSibling;\n\t    }\n\t  }\n\t  return node.__vue__;\n\t}\n\t\n\tvar vIf = {\n\t\n\t  priority: IF,\n\t  terminal: true,\n\t\n\t  bind: function bind() {\n\t    var el = this.el;\n\t    if (!el.__vue__) {\n\t      // check else block\n\t      var next = el.nextElementSibling;\n\t      if (next && getAttr(next, 'v-else') !== null) {\n\t        remove(next);\n\t        this.elseEl = next;\n\t      }\n\t      // check main block\n\t      this.anchor = createAnchor('v-if');\n\t      replace(el, this.anchor);\n\t    } else {\n\t      (\"production\") !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n\t      this.invalid = true;\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    if (this.invalid) return;\n\t    if (value) {\n\t      if (!this.frag) {\n\t        this.insert();\n\t      }\n\t    } else {\n\t      this.remove();\n\t    }\n\t  },\n\t\n\t  insert: function insert() {\n\t    if (this.elseFrag) {\n\t      this.elseFrag.remove();\n\t      this.elseFrag = null;\n\t    }\n\t    // lazy init factory\n\t    if (!this.factory) {\n\t      this.factory = new FragmentFactory(this.vm, this.el);\n\t    }\n\t    this.frag = this.factory.create(this._host, this._scope, this._frag);\n\t    this.frag.before(this.anchor);\n\t  },\n\t\n\t  remove: function remove() {\n\t    if (this.frag) {\n\t      this.frag.remove();\n\t      this.frag = null;\n\t    }\n\t    if (this.elseEl && !this.elseFrag) {\n\t      if (!this.elseFactory) {\n\t        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n\t      }\n\t      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n\t      this.elseFrag.before(this.anchor);\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    if (this.frag) {\n\t      this.frag.destroy();\n\t    }\n\t    if (this.elseFrag) {\n\t      this.elseFrag.destroy();\n\t    }\n\t  }\n\t};\n\t\n\tvar show = {\n\t\n\t  bind: function bind() {\n\t    // check else block\n\t    var next = this.el.nextElementSibling;\n\t    if (next && getAttr(next, 'v-else') !== null) {\n\t      this.elseEl = next;\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    this.apply(this.el, value);\n\t    if (this.elseEl) {\n\t      this.apply(this.elseEl, !value);\n\t    }\n\t  },\n\t\n\t  apply: function apply(el, value) {\n\t    if (inDoc(el)) {\n\t      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n\t    } else {\n\t      toggle();\n\t    }\n\t    function toggle() {\n\t      el.style.display = value ? '' : 'none';\n\t    }\n\t  }\n\t};\n\t\n\tvar text$2 = {\n\t\n\t  bind: function bind() {\n\t    var self = this;\n\t    var el = this.el;\n\t    var isRange = el.type === 'range';\n\t    var lazy = this.params.lazy;\n\t    var number = this.params.number;\n\t    var debounce = this.params.debounce;\n\t\n\t    // handle composition events.\n\t    //   http://blog.evanyou.me/2014/01/03/composition-event/\n\t    // skip this for Android because it handles composition\n\t    // events quite differently. Android doesn't trigger\n\t    // composition events for language input methods e.g.\n\t    // Chinese, but instead triggers them for spelling\n\t    // suggestions... (see Discussion/#162)\n\t    var composing = false;\n\t    if (!isAndroid && !isRange) {\n\t      this.on('compositionstart', function () {\n\t        composing = true;\n\t      });\n\t      this.on('compositionend', function () {\n\t        composing = false;\n\t        // in IE11 the \"compositionend\" event fires AFTER\n\t        // the \"input\" event, so the input handler is blocked\n\t        // at the end... have to call it here.\n\t        //\n\t        // #1327: in lazy mode this is unecessary.\n\t        if (!lazy) {\n\t          self.listener();\n\t        }\n\t      });\n\t    }\n\t\n\t    // prevent messing with the input when user is typing,\n\t    // and force update on blur.\n\t    this.focused = false;\n\t    if (!isRange && !lazy) {\n\t      this.on('focus', function () {\n\t        self.focused = true;\n\t      });\n\t      this.on('blur', function () {\n\t        self.focused = false;\n\t        // do not sync value after fragment removal (#2017)\n\t        if (!self._frag || self._frag.inserted) {\n\t          self.rawListener();\n\t        }\n\t      });\n\t    }\n\t\n\t    // Now attach the main listener\n\t    this.listener = this.rawListener = function () {\n\t      if (composing || !self._bound) {\n\t        return;\n\t      }\n\t      var val = number || isRange ? toNumber(el.value) : el.value;\n\t      self.set(val);\n\t      // force update on next tick to avoid lock & same value\n\t      // also only update when user is not typing\n\t      nextTick(function () {\n\t        if (self._bound && !self.focused) {\n\t          self.update(self._watcher.value);\n\t        }\n\t      });\n\t    };\n\t\n\t    // apply debounce\n\t    if (debounce) {\n\t      this.listener = _debounce(this.listener, debounce);\n\t    }\n\t\n\t    // Support jQuery events, since jQuery.trigger() doesn't\n\t    // trigger native events in some cases and some plugins\n\t    // rely on $.trigger()\n\t    //\n\t    // We want to make sure if a listener is attached using\n\t    // jQuery, it is also removed with jQuery, that's why\n\t    // we do the check for each directive instance and\n\t    // store that check result on itself. This also allows\n\t    // easier test coverage control by unsetting the global\n\t    // jQuery variable in tests.\n\t    this.hasjQuery = typeof jQuery === 'function';\n\t    if (this.hasjQuery) {\n\t      var method = jQuery.fn.on ? 'on' : 'bind';\n\t      jQuery(el)[method]('change', this.rawListener);\n\t      if (!lazy) {\n\t        jQuery(el)[method]('input', this.listener);\n\t      }\n\t    } else {\n\t      this.on('change', this.rawListener);\n\t      if (!lazy) {\n\t        this.on('input', this.listener);\n\t      }\n\t    }\n\t\n\t    // IE9 doesn't fire input event on backspace/del/cut\n\t    if (!lazy && isIE9) {\n\t      this.on('cut', function () {\n\t        nextTick(self.listener);\n\t      });\n\t      this.on('keyup', function (e) {\n\t        if (e.keyCode === 46 || e.keyCode === 8) {\n\t          self.listener();\n\t        }\n\t      });\n\t    }\n\t\n\t    // set initial value if present\n\t    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n\t      this.afterBind = this.listener;\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    // #3029 only update when the value changes. This prevent\n\t    // browsers from overwriting values like selectionStart\n\t    value = _toString(value);\n\t    if (value !== this.el.value) this.el.value = value;\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    var el = this.el;\n\t    if (this.hasjQuery) {\n\t      var method = jQuery.fn.off ? 'off' : 'unbind';\n\t      jQuery(el)[method]('change', this.listener);\n\t      jQuery(el)[method]('input', this.listener);\n\t    }\n\t  }\n\t};\n\t\n\tvar radio = {\n\t\n\t  bind: function bind() {\n\t    var self = this;\n\t    var el = this.el;\n\t\n\t    this.getValue = function () {\n\t      // value overwrite via v-bind:value\n\t      if (el.hasOwnProperty('_value')) {\n\t        return el._value;\n\t      }\n\t      var val = el.value;\n\t      if (self.params.number) {\n\t        val = toNumber(val);\n\t      }\n\t      return val;\n\t    };\n\t\n\t    this.listener = function () {\n\t      self.set(self.getValue());\n\t    };\n\t    this.on('change', this.listener);\n\t\n\t    if (el.hasAttribute('checked')) {\n\t      this.afterBind = this.listener;\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    this.el.checked = looseEqual(value, this.getValue());\n\t  }\n\t};\n\t\n\tvar select = {\n\t\n\t  bind: function bind() {\n\t    var _this = this;\n\t\n\t    var self = this;\n\t    var el = this.el;\n\t\n\t    // method to force update DOM using latest value.\n\t    this.forceUpdate = function () {\n\t      if (self._watcher) {\n\t        self.update(self._watcher.get());\n\t      }\n\t    };\n\t\n\t    // check if this is a multiple select\n\t    var multiple = this.multiple = el.hasAttribute('multiple');\n\t\n\t    // attach listener\n\t    this.listener = function () {\n\t      var value = getValue(el, multiple);\n\t      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n\t      self.set(value);\n\t    };\n\t    this.on('change', this.listener);\n\t\n\t    // if has initial value, set afterBind\n\t    var initValue = getValue(el, multiple, true);\n\t    if (multiple && initValue.length || !multiple && initValue !== null) {\n\t      this.afterBind = this.listener;\n\t    }\n\t\n\t    // All major browsers except Firefox resets\n\t    // selectedIndex with value -1 to 0 when the element\n\t    // is appended to a new parent, therefore we have to\n\t    // force a DOM update whenever that happens...\n\t    this.vm.$on('hook:attached', function () {\n\t      nextTick(_this.forceUpdate);\n\t    });\n\t    if (!inDoc(el)) {\n\t      nextTick(this.forceUpdate);\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    var el = this.el;\n\t    el.selectedIndex = -1;\n\t    var multi = this.multiple && isArray(value);\n\t    var options = el.options;\n\t    var i = options.length;\n\t    var op, val;\n\t    while (i--) {\n\t      op = options[i];\n\t      val = op.hasOwnProperty('_value') ? op._value : op.value;\n\t      /* eslint-disable eqeqeq */\n\t      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n\t      /* eslint-enable eqeqeq */\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    /* istanbul ignore next */\n\t    this.vm.$off('hook:attached', this.forceUpdate);\n\t  }\n\t};\n\t\n\t/**\n\t * Get select value\n\t *\n\t * @param {SelectElement} el\n\t * @param {Boolean} multi\n\t * @param {Boolean} init\n\t * @return {Array|*}\n\t */\n\t\n\tfunction getValue(el, multi, init) {\n\t  var res = multi ? [] : null;\n\t  var op, val, selected;\n\t  for (var i = 0, l = el.options.length; i < l; i++) {\n\t    op = el.options[i];\n\t    selected = init ? op.hasAttribute('selected') : op.selected;\n\t    if (selected) {\n\t      val = op.hasOwnProperty('_value') ? op._value : op.value;\n\t      if (multi) {\n\t        res.push(val);\n\t      } else {\n\t        return val;\n\t      }\n\t    }\n\t  }\n\t  return res;\n\t}\n\t\n\t/**\n\t * Native Array.indexOf uses strict equal, but in this\n\t * case we need to match string/numbers with custom equal.\n\t *\n\t * @param {Array} arr\n\t * @param {*} val\n\t */\n\t\n\tfunction indexOf$1(arr, val) {\n\t  var i = arr.length;\n\t  while (i--) {\n\t    if (looseEqual(arr[i], val)) {\n\t      return i;\n\t    }\n\t  }\n\t  return -1;\n\t}\n\t\n\tvar checkbox = {\n\t\n\t  bind: function bind() {\n\t    var self = this;\n\t    var el = this.el;\n\t\n\t    this.getValue = function () {\n\t      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n\t    };\n\t\n\t    function getBooleanValue() {\n\t      var val = el.checked;\n\t      if (val && el.hasOwnProperty('_trueValue')) {\n\t        return el._trueValue;\n\t      }\n\t      if (!val && el.hasOwnProperty('_falseValue')) {\n\t        return el._falseValue;\n\t      }\n\t      return val;\n\t    }\n\t\n\t    this.listener = function () {\n\t      var model = self._watcher.get();\n\t      if (isArray(model)) {\n\t        var val = self.getValue();\n\t        var i = indexOf(model, val);\n\t        if (el.checked) {\n\t          if (i < 0) {\n\t            self.set(model.concat(val));\n\t          }\n\t        } else if (i > -1) {\n\t          self.set(model.slice(0, i).concat(model.slice(i + 1)));\n\t        }\n\t      } else {\n\t        self.set(getBooleanValue());\n\t      }\n\t    };\n\t\n\t    this.on('change', this.listener);\n\t    if (el.hasAttribute('checked')) {\n\t      this.afterBind = this.listener;\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    var el = this.el;\n\t    if (isArray(value)) {\n\t      el.checked = indexOf(value, this.getValue()) > -1;\n\t    } else {\n\t      if (el.hasOwnProperty('_trueValue')) {\n\t        el.checked = looseEqual(value, el._trueValue);\n\t      } else {\n\t        el.checked = !!value;\n\t      }\n\t    }\n\t  }\n\t};\n\t\n\tvar handlers = {\n\t  text: text$2,\n\t  radio: radio,\n\t  select: select,\n\t  checkbox: checkbox\n\t};\n\t\n\tvar model = {\n\t\n\t  priority: MODEL,\n\t  twoWay: true,\n\t  handlers: handlers,\n\t  params: ['lazy', 'number', 'debounce'],\n\t\n\t  /**\n\t   * Possible elements:\n\t   *   <select>\n\t   *   <textarea>\n\t   *   <input type=\"*\">\n\t   *     - text\n\t   *     - checkbox\n\t   *     - radio\n\t   *     - number\n\t   */\n\t\n\t  bind: function bind() {\n\t    // friendly warning...\n\t    this.checkFilters();\n\t    if (this.hasRead && !this.hasWrite) {\n\t      (\"production\") !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n\t    }\n\t    var el = this.el;\n\t    var tag = el.tagName;\n\t    var handler;\n\t    if (tag === 'INPUT') {\n\t      handler = handlers[el.type] || handlers.text;\n\t    } else if (tag === 'SELECT') {\n\t      handler = handlers.select;\n\t    } else if (tag === 'TEXTAREA') {\n\t      handler = handlers.text;\n\t    } else {\n\t      (\"production\") !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n\t      return;\n\t    }\n\t    el.__v_model = this;\n\t    handler.bind.call(this);\n\t    this.update = handler.update;\n\t    this._unbind = handler.unbind;\n\t  },\n\t\n\t  /**\n\t   * Check read/write filter stats.\n\t   */\n\t\n\t  checkFilters: function checkFilters() {\n\t    var filters = this.filters;\n\t    if (!filters) return;\n\t    var i = filters.length;\n\t    while (i--) {\n\t      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n\t      if (typeof filter === 'function' || filter.read) {\n\t        this.hasRead = true;\n\t      }\n\t      if (filter.write) {\n\t        this.hasWrite = true;\n\t      }\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    this.el.__v_model = null;\n\t    this._unbind && this._unbind();\n\t  }\n\t};\n\t\n\t// keyCode aliases\n\tvar keyCodes = {\n\t  esc: 27,\n\t  tab: 9,\n\t  enter: 13,\n\t  space: 32,\n\t  'delete': [8, 46],\n\t  up: 38,\n\t  left: 37,\n\t  right: 39,\n\t  down: 40\n\t};\n\t\n\tfunction keyFilter(handler, keys) {\n\t  var codes = keys.map(function (key) {\n\t    var charCode = key.charCodeAt(0);\n\t    if (charCode > 47 && charCode < 58) {\n\t      return parseInt(key, 10);\n\t    }\n\t    if (key.length === 1) {\n\t      charCode = key.toUpperCase().charCodeAt(0);\n\t      if (charCode > 64 && charCode < 91) {\n\t        return charCode;\n\t      }\n\t    }\n\t    return keyCodes[key];\n\t  });\n\t  codes = [].concat.apply([], codes);\n\t  return function keyHandler(e) {\n\t    if (codes.indexOf(e.keyCode) > -1) {\n\t      return handler.call(this, e);\n\t    }\n\t  };\n\t}\n\t\n\tfunction stopFilter(handler) {\n\t  return function stopHandler(e) {\n\t    e.stopPropagation();\n\t    return handler.call(this, e);\n\t  };\n\t}\n\t\n\tfunction preventFilter(handler) {\n\t  return function preventHandler(e) {\n\t    e.preventDefault();\n\t    return handler.call(this, e);\n\t  };\n\t}\n\t\n\tfunction selfFilter(handler) {\n\t  return function selfHandler(e) {\n\t    if (e.target === e.currentTarget) {\n\t      return handler.call(this, e);\n\t    }\n\t  };\n\t}\n\t\n\tvar on$1 = {\n\t\n\t  priority: ON,\n\t  acceptStatement: true,\n\t  keyCodes: keyCodes,\n\t\n\t  bind: function bind() {\n\t    // deal with iframes\n\t    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n\t      var self = this;\n\t      this.iframeBind = function () {\n\t        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n\t      };\n\t      this.on('load', this.iframeBind);\n\t    }\n\t  },\n\t\n\t  update: function update(handler) {\n\t    // stub a noop for v-on with no value,\n\t    // e.g. @mousedown.prevent\n\t    if (!this.descriptor.raw) {\n\t      handler = function () {};\n\t    }\n\t\n\t    if (typeof handler !== 'function') {\n\t      (\"production\") !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n\t      return;\n\t    }\n\t\n\t    // apply modifiers\n\t    if (this.modifiers.stop) {\n\t      handler = stopFilter(handler);\n\t    }\n\t    if (this.modifiers.prevent) {\n\t      handler = preventFilter(handler);\n\t    }\n\t    if (this.modifiers.self) {\n\t      handler = selfFilter(handler);\n\t    }\n\t    // key filter\n\t    var keys = Object.keys(this.modifiers).filter(function (key) {\n\t      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n\t    });\n\t    if (keys.length) {\n\t      handler = keyFilter(handler, keys);\n\t    }\n\t\n\t    this.reset();\n\t    this.handler = handler;\n\t\n\t    if (this.iframeBind) {\n\t      this.iframeBind();\n\t    } else {\n\t      on(this.el, this.arg, this.handler, this.modifiers.capture);\n\t    }\n\t  },\n\t\n\t  reset: function reset() {\n\t    var el = this.iframeBind ? this.el.contentWindow : this.el;\n\t    if (this.handler) {\n\t      off(el, this.arg, this.handler);\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    this.reset();\n\t  }\n\t};\n\t\n\tvar prefixes = ['-webkit-', '-moz-', '-ms-'];\n\tvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\n\tvar importantRE = /!important;?$/;\n\tvar propCache = Object.create(null);\n\t\n\tvar testEl = null;\n\t\n\tvar style = {\n\t\n\t  deep: true,\n\t\n\t  update: function update(value) {\n\t    if (typeof value === 'string') {\n\t      this.el.style.cssText = value;\n\t    } else if (isArray(value)) {\n\t      this.handleObject(value.reduce(extend, {}));\n\t    } else {\n\t      this.handleObject(value || {});\n\t    }\n\t  },\n\t\n\t  handleObject: function handleObject(value) {\n\t    // cache object styles so that only changed props\n\t    // are actually updated.\n\t    var cache = this.cache || (this.cache = {});\n\t    var name, val;\n\t    for (name in cache) {\n\t      if (!(name in value)) {\n\t        this.handleSingle(name, null);\n\t        delete cache[name];\n\t      }\n\t    }\n\t    for (name in value) {\n\t      val = value[name];\n\t      if (val !== cache[name]) {\n\t        cache[name] = val;\n\t        this.handleSingle(name, val);\n\t      }\n\t    }\n\t  },\n\t\n\t  handleSingle: function handleSingle(prop, value) {\n\t    prop = normalize(prop);\n\t    if (!prop) return; // unsupported prop\n\t    // cast possible numbers/booleans into strings\n\t    if (value != null) value += '';\n\t    if (value) {\n\t      var isImportant = importantRE.test(value) ? 'important' : '';\n\t      if (isImportant) {\n\t        /* istanbul ignore if */\n\t        if (false) {\n\t          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n\t        }\n\t        value = value.replace(importantRE, '').trim();\n\t        this.el.style.setProperty(prop.kebab, value, isImportant);\n\t      } else {\n\t        this.el.style[prop.camel] = value;\n\t      }\n\t    } else {\n\t      this.el.style[prop.camel] = '';\n\t    }\n\t  }\n\t\n\t};\n\t\n\t/**\n\t * Normalize a CSS property name.\n\t * - cache result\n\t * - auto prefix\n\t * - camelCase -> dash-case\n\t *\n\t * @param {String} prop\n\t * @return {String}\n\t */\n\t\n\tfunction normalize(prop) {\n\t  if (propCache[prop]) {\n\t    return propCache[prop];\n\t  }\n\t  var res = prefix(prop);\n\t  propCache[prop] = propCache[res] = res;\n\t  return res;\n\t}\n\t\n\t/**\n\t * Auto detect the appropriate prefix for a CSS property.\n\t * https://gist.github.com/paulirish/523692\n\t *\n\t * @param {String} prop\n\t * @return {String}\n\t */\n\t\n\tfunction prefix(prop) {\n\t  prop = hyphenate(prop);\n\t  var camel = camelize(prop);\n\t  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n\t  if (!testEl) {\n\t    testEl = document.createElement('div');\n\t  }\n\t  var i = prefixes.length;\n\t  var prefixed;\n\t  if (camel !== 'filter' && camel in testEl.style) {\n\t    return {\n\t      kebab: prop,\n\t      camel: camel\n\t    };\n\t  }\n\t  while (i--) {\n\t    prefixed = camelPrefixes[i] + upper;\n\t    if (prefixed in testEl.style) {\n\t      return {\n\t        kebab: prefixes[i] + prop,\n\t        camel: prefixed\n\t      };\n\t    }\n\t  }\n\t}\n\t\n\t// xlink\n\tvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\tvar xlinkRE = /^xlink:/;\n\t\n\t// check for attributes that prohibit interpolations\n\tvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n\t// these attributes should also set their corresponding properties\n\t// because they only affect the initial state of the element\n\tvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n\t// these attributes expect enumrated values of \"true\" or \"false\"\n\t// but are not boolean attributes\n\tvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\t\n\t// these attributes should set a hidden property for\n\t// binding v-model to object values\n\tvar modelProps = {\n\t  value: '_value',\n\t  'true-value': '_trueValue',\n\t  'false-value': '_falseValue'\n\t};\n\t\n\tvar bind$1 = {\n\t\n\t  priority: BIND,\n\t\n\t  bind: function bind() {\n\t    var attr = this.arg;\n\t    var tag = this.el.tagName;\n\t    // should be deep watch on object mode\n\t    if (!attr) {\n\t      this.deep = true;\n\t    }\n\t    // handle interpolation bindings\n\t    var descriptor = this.descriptor;\n\t    var tokens = descriptor.interp;\n\t    if (tokens) {\n\t      // handle interpolations with one-time tokens\n\t      if (descriptor.hasOneTime) {\n\t        this.expression = tokensToExp(tokens, this._scope || this.vm);\n\t      }\n\t\n\t      // only allow binding on native attributes\n\t      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n\t        (\"production\") !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n\t        this.el.removeAttribute(attr);\n\t        this.invalid = true;\n\t      }\n\t\n\t      /* istanbul ignore if */\n\t      if (false) {\n\t        var raw = attr + '=\"' + descriptor.raw + '\": ';\n\t        // warn src\n\t        if (attr === 'src') {\n\t          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n\t        }\n\t\n\t        // warn style\n\t        if (attr === 'style') {\n\t          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n\t        }\n\t      }\n\t    }\n\t  },\n\t\n\t  update: function update(value) {\n\t    if (this.invalid) {\n\t      return;\n\t    }\n\t    var attr = this.arg;\n\t    if (this.arg) {\n\t      this.handleSingle(attr, value);\n\t    } else {\n\t      this.handleObject(value || {});\n\t    }\n\t  },\n\t\n\t  // share object handler with v-bind:class\n\t  handleObject: style.handleObject,\n\t\n\t  handleSingle: function handleSingle(attr, value) {\n\t    var el = this.el;\n\t    var interp = this.descriptor.interp;\n\t    if (this.modifiers.camel) {\n\t      attr = camelize(attr);\n\t    }\n\t    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n\t      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n\t      ? '' : value : value;\n\t\n\t      if (el[attr] !== attrValue) {\n\t        el[attr] = attrValue;\n\t      }\n\t    }\n\t    // set model props\n\t    var modelProp = modelProps[attr];\n\t    if (!interp && modelProp) {\n\t      el[modelProp] = value;\n\t      // update v-model if present\n\t      var model = el.__v_model;\n\t      if (model) {\n\t        model.listener();\n\t      }\n\t    }\n\t    // do not set value attribute for textarea\n\t    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n\t      el.removeAttribute(attr);\n\t      return;\n\t    }\n\t    // update attribute\n\t    if (enumeratedAttrRE.test(attr)) {\n\t      el.setAttribute(attr, value ? 'true' : 'false');\n\t    } else if (value != null && value !== false) {\n\t      if (attr === 'class') {\n\t        // handle edge case #1960:\n\t        // class interpolation should not overwrite Vue transition class\n\t        if (el.__v_trans) {\n\t          value += ' ' + el.__v_trans.id + '-transition';\n\t        }\n\t        setClass(el, value);\n\t      } else if (xlinkRE.test(attr)) {\n\t        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n\t      } else {\n\t        el.setAttribute(attr, value === true ? '' : value);\n\t      }\n\t    } else {\n\t      el.removeAttribute(attr);\n\t    }\n\t  }\n\t};\n\t\n\tvar el = {\n\t\n\t  priority: EL,\n\t\n\t  bind: function bind() {\n\t    /* istanbul ignore if */\n\t    if (!this.arg) {\n\t      return;\n\t    }\n\t    var id = this.id = camelize(this.arg);\n\t    var refs = (this._scope || this.vm).$els;\n\t    if (hasOwn(refs, id)) {\n\t      refs[id] = this.el;\n\t    } else {\n\t      defineReactive(refs, id, this.el);\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    var refs = (this._scope || this.vm).$els;\n\t    if (refs[this.id] === this.el) {\n\t      refs[this.id] = null;\n\t    }\n\t  }\n\t};\n\t\n\tvar ref = {\n\t  bind: function bind() {\n\t    (\"production\") !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n\t  }\n\t};\n\t\n\tvar cloak = {\n\t  bind: function bind() {\n\t    var el = this.el;\n\t    this.vm.$once('pre-hook:compiled', function () {\n\t      el.removeAttribute('v-cloak');\n\t    });\n\t  }\n\t};\n\t\n\t// logic control\n\t// two-way binding\n\t// event handling\n\t// attributes\n\t// ref & el\n\t// cloak\n\t// must export plain object\n\tvar directives = {\n\t  text: text$1,\n\t  html: html,\n\t  'for': vFor,\n\t  'if': vIf,\n\t  show: show,\n\t  model: model,\n\t  on: on$1,\n\t  bind: bind$1,\n\t  el: el,\n\t  ref: ref,\n\t  cloak: cloak\n\t};\n\t\n\tvar vClass = {\n\t\n\t  deep: true,\n\t\n\t  update: function update(value) {\n\t    if (!value) {\n\t      this.cleanup();\n\t    } else if (typeof value === 'string') {\n\t      this.setClass(value.trim().split(/\\s+/));\n\t    } else {\n\t      this.setClass(normalize$1(value));\n\t    }\n\t  },\n\t\n\t  setClass: function setClass(value) {\n\t    this.cleanup(value);\n\t    for (var i = 0, l = value.length; i < l; i++) {\n\t      var val = value[i];\n\t      if (val) {\n\t        apply(this.el, val, addClass);\n\t      }\n\t    }\n\t    this.prevKeys = value;\n\t  },\n\t\n\t  cleanup: function cleanup(value) {\n\t    var prevKeys = this.prevKeys;\n\t    if (!prevKeys) return;\n\t    var i = prevKeys.length;\n\t    while (i--) {\n\t      var key = prevKeys[i];\n\t      if (!value || value.indexOf(key) < 0) {\n\t        apply(this.el, key, removeClass);\n\t      }\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Normalize objects and arrays (potentially containing objects)\n\t * into array of strings.\n\t *\n\t * @param {Object|Array<String|Object>} value\n\t * @return {Array<String>}\n\t */\n\t\n\tfunction normalize$1(value) {\n\t  var res = [];\n\t  if (isArray(value)) {\n\t    for (var i = 0, l = value.length; i < l; i++) {\n\t      var _key = value[i];\n\t      if (_key) {\n\t        if (typeof _key === 'string') {\n\t          res.push(_key);\n\t        } else {\n\t          for (var k in _key) {\n\t            if (_key[k]) res.push(k);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  } else if (isObject(value)) {\n\t    for (var key in value) {\n\t      if (value[key]) res.push(key);\n\t    }\n\t  }\n\t  return res;\n\t}\n\t\n\t/**\n\t * Add or remove a class/classes on an element\n\t *\n\t * @param {Element} el\n\t * @param {String} key The class name. This may or may not\n\t *                     contain a space character, in such a\n\t *                     case we'll deal with multiple class\n\t *                     names at once.\n\t * @param {Function} fn\n\t */\n\t\n\tfunction apply(el, key, fn) {\n\t  key = key.trim();\n\t  if (key.indexOf(' ') === -1) {\n\t    fn(el, key);\n\t    return;\n\t  }\n\t  // The key contains one or more space characters.\n\t  // Since a class name doesn't accept such characters, we\n\t  // treat it as multiple classes.\n\t  var keys = key.split(/\\s+/);\n\t  for (var i = 0, l = keys.length; i < l; i++) {\n\t    fn(el, keys[i]);\n\t  }\n\t}\n\t\n\tvar component = {\n\t\n\t  priority: COMPONENT,\n\t\n\t  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\t\n\t  /**\n\t   * Setup. Two possible usages:\n\t   *\n\t   * - static:\n\t   *   <comp> or <div v-component=\"comp\">\n\t   *\n\t   * - dynamic:\n\t   *   <component :is=\"view\">\n\t   */\n\t\n\t  bind: function bind() {\n\t    if (!this.el.__vue__) {\n\t      // keep-alive cache\n\t      this.keepAlive = this.params.keepAlive;\n\t      if (this.keepAlive) {\n\t        this.cache = {};\n\t      }\n\t      // check inline-template\n\t      if (this.params.inlineTemplate) {\n\t        // extract inline template as a DocumentFragment\n\t        this.inlineTemplate = extractContent(this.el, true);\n\t      }\n\t      // component resolution related state\n\t      this.pendingComponentCb = this.Component = null;\n\t      // transition related state\n\t      this.pendingRemovals = 0;\n\t      this.pendingRemovalCb = null;\n\t      // create a ref anchor\n\t      this.anchor = createAnchor('v-component');\n\t      replace(this.el, this.anchor);\n\t      // remove is attribute.\n\t      // this is removed during compilation, but because compilation is\n\t      // cached, when the component is used elsewhere this attribute\n\t      // will remain at link time.\n\t      this.el.removeAttribute('is');\n\t      this.el.removeAttribute(':is');\n\t      // remove ref, same as above\n\t      if (this.descriptor.ref) {\n\t        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n\t      }\n\t      // if static, build right now.\n\t      if (this.literal) {\n\t        this.setComponent(this.expression);\n\t      }\n\t    } else {\n\t      (\"production\") !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Public update, called by the watcher in the dynamic\n\t   * literal scenario, e.g. <component :is=\"view\">\n\t   */\n\t\n\t  update: function update(value) {\n\t    if (!this.literal) {\n\t      this.setComponent(value);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Switch dynamic components. May resolve the component\n\t   * asynchronously, and perform transition based on\n\t   * specified transition mode. Accepts a few additional\n\t   * arguments specifically for vue-router.\n\t   *\n\t   * The callback is called when the full transition is\n\t   * finished.\n\t   *\n\t   * @param {String} value\n\t   * @param {Function} [cb]\n\t   */\n\t\n\t  setComponent: function setComponent(value, cb) {\n\t    this.invalidatePending();\n\t    if (!value) {\n\t      // just remove current\n\t      this.unbuild(true);\n\t      this.remove(this.childVM, cb);\n\t      this.childVM = null;\n\t    } else {\n\t      var self = this;\n\t      this.resolveComponent(value, function () {\n\t        self.mountComponent(cb);\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Resolve the component constructor to use when creating\n\t   * the child vm.\n\t   *\n\t   * @param {String|Function} value\n\t   * @param {Function} cb\n\t   */\n\t\n\t  resolveComponent: function resolveComponent(value, cb) {\n\t    var self = this;\n\t    this.pendingComponentCb = cancellable(function (Component) {\n\t      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n\t      self.Component = Component;\n\t      cb();\n\t    });\n\t    this.vm._resolveComponent(value, this.pendingComponentCb);\n\t  },\n\t\n\t  /**\n\t   * Create a new instance using the current constructor and\n\t   * replace the existing instance. This method doesn't care\n\t   * whether the new component and the old one are actually\n\t   * the same.\n\t   *\n\t   * @param {Function} [cb]\n\t   */\n\t\n\t  mountComponent: function mountComponent(cb) {\n\t    // actual mount\n\t    this.unbuild(true);\n\t    var self = this;\n\t    var activateHooks = this.Component.options.activate;\n\t    var cached = this.getCached();\n\t    var newComponent = this.build();\n\t    if (activateHooks && !cached) {\n\t      this.waitingFor = newComponent;\n\t      callActivateHooks(activateHooks, newComponent, function () {\n\t        if (self.waitingFor !== newComponent) {\n\t          return;\n\t        }\n\t        self.waitingFor = null;\n\t        self.transition(newComponent, cb);\n\t      });\n\t    } else {\n\t      // update ref for kept-alive component\n\t      if (cached) {\n\t        newComponent._updateRef();\n\t      }\n\t      this.transition(newComponent, cb);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * When the component changes or unbinds before an async\n\t   * constructor is resolved, we need to invalidate its\n\t   * pending callback.\n\t   */\n\t\n\t  invalidatePending: function invalidatePending() {\n\t    if (this.pendingComponentCb) {\n\t      this.pendingComponentCb.cancel();\n\t      this.pendingComponentCb = null;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Instantiate/insert a new child vm.\n\t   * If keep alive and has cached instance, insert that\n\t   * instance; otherwise build a new one and cache it.\n\t   *\n\t   * @param {Object} [extraOptions]\n\t   * @return {Vue} - the created instance\n\t   */\n\t\n\t  build: function build(extraOptions) {\n\t    var cached = this.getCached();\n\t    if (cached) {\n\t      return cached;\n\t    }\n\t    if (this.Component) {\n\t      // default options\n\t      var options = {\n\t        name: this.ComponentName,\n\t        el: cloneNode(this.el),\n\t        template: this.inlineTemplate,\n\t        // make sure to add the child with correct parent\n\t        // if this is a transcluded component, its parent\n\t        // should be the transclusion host.\n\t        parent: this._host || this.vm,\n\t        // if no inline-template, then the compiled\n\t        // linker can be cached for better performance.\n\t        _linkerCachable: !this.inlineTemplate,\n\t        _ref: this.descriptor.ref,\n\t        _asComponent: true,\n\t        _isRouterView: this._isRouterView,\n\t        // if this is a transcluded component, context\n\t        // will be the common parent vm of this instance\n\t        // and its host.\n\t        _context: this.vm,\n\t        // if this is inside an inline v-for, the scope\n\t        // will be the intermediate scope created for this\n\t        // repeat fragment. this is used for linking props\n\t        // and container directives.\n\t        _scope: this._scope,\n\t        // pass in the owner fragment of this component.\n\t        // this is necessary so that the fragment can keep\n\t        // track of its contained components in order to\n\t        // call attach/detach hooks for them.\n\t        _frag: this._frag\n\t      };\n\t      // extra options\n\t      // in 1.0.0 this is used by vue-router only\n\t      /* istanbul ignore if */\n\t      if (extraOptions) {\n\t        extend(options, extraOptions);\n\t      }\n\t      var child = new this.Component(options);\n\t      if (this.keepAlive) {\n\t        this.cache[this.Component.cid] = child;\n\t      }\n\t      /* istanbul ignore if */\n\t      if (false) {\n\t        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n\t      }\n\t      return child;\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Try to get a cached instance of the current component.\n\t   *\n\t   * @return {Vue|undefined}\n\t   */\n\t\n\t  getCached: function getCached() {\n\t    return this.keepAlive && this.cache[this.Component.cid];\n\t  },\n\t\n\t  /**\n\t   * Teardown the current child, but defers cleanup so\n\t   * that we can separate the destroy and removal steps.\n\t   *\n\t   * @param {Boolean} defer\n\t   */\n\t\n\t  unbuild: function unbuild(defer) {\n\t    if (this.waitingFor) {\n\t      if (!this.keepAlive) {\n\t        this.waitingFor.$destroy();\n\t      }\n\t      this.waitingFor = null;\n\t    }\n\t    var child = this.childVM;\n\t    if (!child || this.keepAlive) {\n\t      if (child) {\n\t        // remove ref\n\t        child._inactive = true;\n\t        child._updateRef(true);\n\t      }\n\t      return;\n\t    }\n\t    // the sole purpose of `deferCleanup` is so that we can\n\t    // \"deactivate\" the vm right now and perform DOM removal\n\t    // later.\n\t    child.$destroy(false, defer);\n\t  },\n\t\n\t  /**\n\t   * Remove current destroyed child and manually do\n\t   * the cleanup after removal.\n\t   *\n\t   * @param {Function} cb\n\t   */\n\t\n\t  remove: function remove(child, cb) {\n\t    var keepAlive = this.keepAlive;\n\t    if (child) {\n\t      // we may have a component switch when a previous\n\t      // component is still being transitioned out.\n\t      // we want to trigger only one lastest insertion cb\n\t      // when the existing transition finishes. (#1119)\n\t      this.pendingRemovals++;\n\t      this.pendingRemovalCb = cb;\n\t      var self = this;\n\t      child.$remove(function () {\n\t        self.pendingRemovals--;\n\t        if (!keepAlive) child._cleanup();\n\t        if (!self.pendingRemovals && self.pendingRemovalCb) {\n\t          self.pendingRemovalCb();\n\t          self.pendingRemovalCb = null;\n\t        }\n\t      });\n\t    } else if (cb) {\n\t      cb();\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Actually swap the components, depending on the\n\t   * transition mode. Defaults to simultaneous.\n\t   *\n\t   * @param {Vue} target\n\t   * @param {Function} [cb]\n\t   */\n\t\n\t  transition: function transition(target, cb) {\n\t    var self = this;\n\t    var current = this.childVM;\n\t    // for devtool inspection\n\t    if (current) current._inactive = true;\n\t    target._inactive = false;\n\t    this.childVM = target;\n\t    switch (self.params.transitionMode) {\n\t      case 'in-out':\n\t        target.$before(self.anchor, function () {\n\t          self.remove(current, cb);\n\t        });\n\t        break;\n\t      case 'out-in':\n\t        self.remove(current, function () {\n\t          target.$before(self.anchor, cb);\n\t        });\n\t        break;\n\t      default:\n\t        self.remove(current);\n\t        target.$before(self.anchor, cb);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Unbind.\n\t   */\n\t\n\t  unbind: function unbind() {\n\t    this.invalidatePending();\n\t    // Do not defer cleanup when unbinding\n\t    this.unbuild();\n\t    // destroy all keep-alive cached instances\n\t    if (this.cache) {\n\t      for (var key in this.cache) {\n\t        this.cache[key].$destroy();\n\t      }\n\t      this.cache = null;\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Call activate hooks in order (asynchronous)\n\t *\n\t * @param {Array} hooks\n\t * @param {Vue} vm\n\t * @param {Function} cb\n\t */\n\t\n\tfunction callActivateHooks(hooks, vm, cb) {\n\t  var total = hooks.length;\n\t  var called = 0;\n\t  hooks[0].call(vm, next);\n\t  function next() {\n\t    if (++called >= total) {\n\t      cb();\n\t    } else {\n\t      hooks[called].call(vm, next);\n\t    }\n\t  }\n\t}\n\t\n\tvar propBindingModes = config._propBindingModes;\n\tvar empty = {};\n\t\n\t// regexes\n\tvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\n\tvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\t\n\t/**\n\t * Compile props on a root element and return\n\t * a props link function.\n\t *\n\t * @param {Element|DocumentFragment} el\n\t * @param {Array} propOptions\n\t * @param {Vue} vm\n\t * @return {Function} propsLinkFn\n\t */\n\t\n\tfunction compileProps(el, propOptions, vm) {\n\t  var props = [];\n\t  var propsData = vm.$options.propsData;\n\t  var names = Object.keys(propOptions);\n\t  var i = names.length;\n\t  var options, name, attr, value, path, parsed, prop;\n\t  while (i--) {\n\t    name = names[i];\n\t    options = propOptions[name] || empty;\n\t\n\t    if (false) {\n\t      warn('Do not use $data as prop.', vm);\n\t      continue;\n\t    }\n\t\n\t    // props could contain dashes, which will be\n\t    // interpreted as minus calculations by the parser\n\t    // so we need to camelize the path here\n\t    path = camelize(name);\n\t    if (!identRE$1.test(path)) {\n\t      (\"production\") !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n\t      continue;\n\t    }\n\t\n\t    prop = {\n\t      name: name,\n\t      path: path,\n\t      options: options,\n\t      mode: propBindingModes.ONE_WAY,\n\t      raw: null\n\t    };\n\t\n\t    attr = hyphenate(name);\n\t    // first check dynamic version\n\t    if ((value = getBindAttr(el, attr)) === null) {\n\t      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n\t        prop.mode = propBindingModes.TWO_WAY;\n\t      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n\t        prop.mode = propBindingModes.ONE_TIME;\n\t      }\n\t    }\n\t    if (value !== null) {\n\t      // has dynamic binding!\n\t      prop.raw = value;\n\t      parsed = parseDirective(value);\n\t      value = parsed.expression;\n\t      prop.filters = parsed.filters;\n\t      // check binding type\n\t      if (isLiteral(value) && !parsed.filters) {\n\t        // for expressions containing literal numbers and\n\t        // booleans, there's no need to setup a prop binding,\n\t        // so we can optimize them as a one-time set.\n\t        prop.optimizedLiteral = true;\n\t      } else {\n\t        prop.dynamic = true;\n\t        // check non-settable path for two-way bindings\n\t        if (false) {\n\t          prop.mode = propBindingModes.ONE_WAY;\n\t          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n\t        }\n\t      }\n\t      prop.parentPath = value;\n\t\n\t      // warn required two-way\n\t      if (false) {\n\t        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n\t      }\n\t    } else if ((value = getAttr(el, attr)) !== null) {\n\t      // has literal binding!\n\t      prop.raw = value;\n\t    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\n\t      // has propsData\n\t      prop.raw = value;\n\t    } else if (false) {\n\t      // check possible camelCase prop usage\n\t      var lowerCaseName = path.toLowerCase();\n\t      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n\t      if (value) {\n\t        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n\t      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\n\t        // warn missing required\n\t        warn('Missing required prop: ' + name, vm);\n\t      }\n\t    }\n\t    // push prop\n\t    props.push(prop);\n\t  }\n\t  return makePropsLinkFn(props);\n\t}\n\t\n\t/**\n\t * Build a function that applies props to a vm.\n\t *\n\t * @param {Array} props\n\t * @return {Function} propsLinkFn\n\t */\n\t\n\tfunction makePropsLinkFn(props) {\n\t  return function propsLinkFn(vm, scope) {\n\t    // store resolved props info\n\t    vm._props = {};\n\t    var inlineProps = vm.$options.propsData;\n\t    var i = props.length;\n\t    var prop, path, options, value, raw;\n\t    while (i--) {\n\t      prop = props[i];\n\t      raw = prop.raw;\n\t      path = prop.path;\n\t      options = prop.options;\n\t      vm._props[path] = prop;\n\t      if (inlineProps && hasOwn(inlineProps, path)) {\n\t        initProp(vm, prop, inlineProps[path]);\n\t      }if (raw === null) {\n\t        // initialize absent prop\n\t        initProp(vm, prop, undefined);\n\t      } else if (prop.dynamic) {\n\t        // dynamic prop\n\t        if (prop.mode === propBindingModes.ONE_TIME) {\n\t          // one time binding\n\t          value = (scope || vm._context || vm).$get(prop.parentPath);\n\t          initProp(vm, prop, value);\n\t        } else {\n\t          if (vm._context) {\n\t            // dynamic binding\n\t            vm._bindDir({\n\t              name: 'prop',\n\t              def: propDef,\n\t              prop: prop\n\t            }, null, null, scope); // el, host, scope\n\t          } else {\n\t              // root instance\n\t              initProp(vm, prop, vm.$get(prop.parentPath));\n\t            }\n\t        }\n\t      } else if (prop.optimizedLiteral) {\n\t        // optimized literal, cast it and just set once\n\t        var stripped = stripQuotes(raw);\n\t        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n\t        initProp(vm, prop, value);\n\t      } else {\n\t        // string literal, but we need to cater for\n\t        // Boolean props with no value, or with same\n\t        // literal value (e.g. disabled=\"disabled\")\n\t        // see https://github.com/vuejs/vue-loader/issues/182\n\t        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n\t        initProp(vm, prop, value);\n\t      }\n\t    }\n\t  };\n\t}\n\t\n\t/**\n\t * Process a prop with a rawValue, applying necessary coersions,\n\t * default values & assertions and call the given callback with\n\t * processed value.\n\t *\n\t * @param {Vue} vm\n\t * @param {Object} prop\n\t * @param {*} rawValue\n\t * @param {Function} fn\n\t */\n\t\n\tfunction processPropValue(vm, prop, rawValue, fn) {\n\t  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n\t  var value = rawValue;\n\t  if (value === undefined) {\n\t    value = getPropDefaultValue(vm, prop);\n\t  }\n\t  value = coerceProp(prop, value, vm);\n\t  var coerced = value !== rawValue;\n\t  if (!assertProp(prop, value, vm)) {\n\t    value = undefined;\n\t  }\n\t  if (isSimple && !coerced) {\n\t    withoutConversion(function () {\n\t      fn(value);\n\t    });\n\t  } else {\n\t    fn(value);\n\t  }\n\t}\n\t\n\t/**\n\t * Set a prop's initial value on a vm and its data object.\n\t *\n\t * @param {Vue} vm\n\t * @param {Object} prop\n\t * @param {*} value\n\t */\n\t\n\tfunction initProp(vm, prop, value) {\n\t  processPropValue(vm, prop, value, function (value) {\n\t    defineReactive(vm, prop.path, value);\n\t  });\n\t}\n\t\n\t/**\n\t * Update a prop's value on a vm.\n\t *\n\t * @param {Vue} vm\n\t * @param {Object} prop\n\t * @param {*} value\n\t */\n\t\n\tfunction updateProp(vm, prop, value) {\n\t  processPropValue(vm, prop, value, function (value) {\n\t    vm[prop.path] = value;\n\t  });\n\t}\n\t\n\t/**\n\t * Get the default value of a prop.\n\t *\n\t * @param {Vue} vm\n\t * @param {Object} prop\n\t * @return {*}\n\t */\n\t\n\tfunction getPropDefaultValue(vm, prop) {\n\t  // no default, return undefined\n\t  var options = prop.options;\n\t  if (!hasOwn(options, 'default')) {\n\t    // absent boolean value defaults to false\n\t    return options.type === Boolean ? false : undefined;\n\t  }\n\t  var def = options['default'];\n\t  // warn against non-factory defaults for Object & Array\n\t  if (isObject(def)) {\n\t    (\"production\") !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n\t  }\n\t  // call factory function for non-Function types\n\t  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n\t}\n\t\n\t/**\n\t * Assert whether a prop is valid.\n\t *\n\t * @param {Object} prop\n\t * @param {*} value\n\t * @param {Vue} vm\n\t */\n\t\n\tfunction assertProp(prop, value, vm) {\n\t  if (!prop.options.required && ( // non-required\n\t  prop.raw === null || // abscent\n\t  value == null) // null or undefined\n\t  ) {\n\t      return true;\n\t    }\n\t  var options = prop.options;\n\t  var type = options.type;\n\t  var valid = !type;\n\t  var expectedTypes = [];\n\t  if (type) {\n\t    if (!isArray(type)) {\n\t      type = [type];\n\t    }\n\t    for (var i = 0; i < type.length && !valid; i++) {\n\t      var assertedType = assertType(value, type[i]);\n\t      expectedTypes.push(assertedType.expectedType);\n\t      valid = assertedType.valid;\n\t    }\n\t  }\n\t  if (!valid) {\n\t    if (false) {\n\t      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n\t    }\n\t    return false;\n\t  }\n\t  var validator = options.validator;\n\t  if (validator) {\n\t    if (!validator(value)) {\n\t      (\"production\") !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\t/**\n\t * Force parsing value with coerce option.\n\t *\n\t * @param {*} value\n\t * @param {Object} options\n\t * @return {*}\n\t */\n\t\n\tfunction coerceProp(prop, value, vm) {\n\t  var coerce = prop.options.coerce;\n\t  if (!coerce) {\n\t    return value;\n\t  }\n\t  if (typeof coerce === 'function') {\n\t    return coerce(value);\n\t  } else {\n\t    (\"production\") !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n\t    return value;\n\t  }\n\t}\n\t\n\t/**\n\t * Assert the type of a value\n\t *\n\t * @param {*} value\n\t * @param {Function} type\n\t * @return {Object}\n\t */\n\t\n\tfunction assertType(value, type) {\n\t  var valid;\n\t  var expectedType;\n\t  if (type === String) {\n\t    expectedType = 'string';\n\t    valid = typeof value === expectedType;\n\t  } else if (type === Number) {\n\t    expectedType = 'number';\n\t    valid = typeof value === expectedType;\n\t  } else if (type === Boolean) {\n\t    expectedType = 'boolean';\n\t    valid = typeof value === expectedType;\n\t  } else if (type === Function) {\n\t    expectedType = 'function';\n\t    valid = typeof value === expectedType;\n\t  } else if (type === Object) {\n\t    expectedType = 'object';\n\t    valid = isPlainObject(value);\n\t  } else if (type === Array) {\n\t    expectedType = 'array';\n\t    valid = isArray(value);\n\t  } else {\n\t    valid = value instanceof type;\n\t  }\n\t  return {\n\t    valid: valid,\n\t    expectedType: expectedType\n\t  };\n\t}\n\t\n\t/**\n\t * Format type for output\n\t *\n\t * @param {String} type\n\t * @return {String}\n\t */\n\t\n\tfunction formatType(type) {\n\t  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n\t}\n\t\n\t/**\n\t * Format value\n\t *\n\t * @param {*} value\n\t * @return {String}\n\t */\n\t\n\tfunction formatValue(val) {\n\t  return Object.prototype.toString.call(val).slice(8, -1);\n\t}\n\t\n\tvar bindingModes = config._propBindingModes;\n\t\n\tvar propDef = {\n\t\n\t  bind: function bind() {\n\t    var child = this.vm;\n\t    var parent = child._context;\n\t    // passed in from compiler directly\n\t    var prop = this.descriptor.prop;\n\t    var childKey = prop.path;\n\t    var parentKey = prop.parentPath;\n\t    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\t\n\t    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n\t      updateProp(child, prop, val);\n\t    }, {\n\t      twoWay: twoWay,\n\t      filters: prop.filters,\n\t      // important: props need to be observed on the\n\t      // v-for scope if present\n\t      scope: this._scope\n\t    });\n\t\n\t    // set the child initial value.\n\t    initProp(child, prop, parentWatcher.value);\n\t\n\t    // setup two-way binding\n\t    if (twoWay) {\n\t      // important: defer the child watcher creation until\n\t      // the created hook (after data observation)\n\t      var self = this;\n\t      child.$once('pre-hook:created', function () {\n\t        self.childWatcher = new Watcher(child, childKey, function (val) {\n\t          parentWatcher.set(val);\n\t        }, {\n\t          // ensure sync upward before parent sync down.\n\t          // this is necessary in cases e.g. the child\n\t          // mutates a prop array, then replaces it. (#1683)\n\t          sync: true\n\t        });\n\t      });\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    this.parentWatcher.teardown();\n\t    if (this.childWatcher) {\n\t      this.childWatcher.teardown();\n\t    }\n\t  }\n\t};\n\t\n\tvar queue$1 = [];\n\tvar queued = false;\n\t\n\t/**\n\t * Push a job into the queue.\n\t *\n\t * @param {Function} job\n\t */\n\t\n\tfunction pushJob(job) {\n\t  queue$1.push(job);\n\t  if (!queued) {\n\t    queued = true;\n\t    nextTick(flush);\n\t  }\n\t}\n\t\n\t/**\n\t * Flush the queue, and do one forced reflow before\n\t * triggering transitions.\n\t */\n\t\n\tfunction flush() {\n\t  // Force layout\n\t  var f = document.documentElement.offsetHeight;\n\t  for (var i = 0; i < queue$1.length; i++) {\n\t    queue$1[i]();\n\t  }\n\t  queue$1 = [];\n\t  queued = false;\n\t  // dummy return, so js linters don't complain about\n\t  // unused variable f\n\t  return f;\n\t}\n\t\n\tvar TYPE_TRANSITION = 'transition';\n\tvar TYPE_ANIMATION = 'animation';\n\tvar transDurationProp = transitionProp + 'Duration';\n\tvar animDurationProp = animationProp + 'Duration';\n\t\n\t/**\n\t * If a just-entered element is applied the\n\t * leave class while its enter transition hasn't started yet,\n\t * and the transitioned property has the same value for both\n\t * enter/leave, then the leave transition will be skipped and\n\t * the transitionend event never fires. This function ensures\n\t * its callback to be called after a transition has started\n\t * by waiting for double raf.\n\t *\n\t * It falls back to setTimeout on devices that support CSS\n\t * transitions but not raf (e.g. Android 4.2 browser) - since\n\t * these environments are usually slow, we are giving it a\n\t * relatively large timeout.\n\t */\n\t\n\tvar raf = inBrowser && window.requestAnimationFrame;\n\tvar waitForTransitionStart = raf\n\t/* istanbul ignore next */\n\t? function (fn) {\n\t  raf(function () {\n\t    raf(fn);\n\t  });\n\t} : function (fn) {\n\t  setTimeout(fn, 50);\n\t};\n\t\n\t/**\n\t * A Transition object that encapsulates the state and logic\n\t * of the transition.\n\t *\n\t * @param {Element} el\n\t * @param {String} id\n\t * @param {Object} hooks\n\t * @param {Vue} vm\n\t */\n\tfunction Transition(el, id, hooks, vm) {\n\t  this.id = id;\n\t  this.el = el;\n\t  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n\t  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n\t  this.hooks = hooks;\n\t  this.vm = vm;\n\t  // async state\n\t  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n\t  this.justEntered = false;\n\t  this.entered = this.left = false;\n\t  this.typeCache = {};\n\t  // check css transition type\n\t  this.type = hooks && hooks.type;\n\t  /* istanbul ignore if */\n\t  if (false) {\n\t    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n\t      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n\t    }\n\t  }\n\t  // bind\n\t  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n\t    self[m] = bind(self[m], self);\n\t  });\n\t}\n\t\n\tvar p$1 = Transition.prototype;\n\t\n\t/**\n\t * Start an entering transition.\n\t *\n\t * 1. enter transition triggered\n\t * 2. call beforeEnter hook\n\t * 3. add enter class\n\t * 4. insert/show element\n\t * 5. call enter hook (with possible explicit js callback)\n\t * 6. reflow\n\t * 7. based on transition type:\n\t *    - transition:\n\t *        remove class now, wait for transitionend,\n\t *        then done if there's no explicit js callback.\n\t *    - animation:\n\t *        wait for animationend, remove class,\n\t *        then done if there's no explicit js callback.\n\t *    - no css transition:\n\t *        done now if there's no explicit js callback.\n\t * 8. wait for either done or js callback, then call\n\t *    afterEnter hook.\n\t *\n\t * @param {Function} op - insert/show the element\n\t * @param {Function} [cb]\n\t */\n\t\n\tp$1.enter = function (op, cb) {\n\t  this.cancelPending();\n\t  this.callHook('beforeEnter');\n\t  this.cb = cb;\n\t  addClass(this.el, this.enterClass);\n\t  op();\n\t  this.entered = false;\n\t  this.callHookWithCb('enter');\n\t  if (this.entered) {\n\t    return; // user called done synchronously.\n\t  }\n\t  this.cancel = this.hooks && this.hooks.enterCancelled;\n\t  pushJob(this.enterNextTick);\n\t};\n\t\n\t/**\n\t * The \"nextTick\" phase of an entering transition, which is\n\t * to be pushed into a queue and executed after a reflow so\n\t * that removing the class can trigger a CSS transition.\n\t */\n\t\n\tp$1.enterNextTick = function () {\n\t  var _this = this;\n\t\n\t  // prevent transition skipping\n\t  this.justEntered = true;\n\t  waitForTransitionStart(function () {\n\t    _this.justEntered = false;\n\t  });\n\t  var enterDone = this.enterDone;\n\t  var type = this.getCssTransitionType(this.enterClass);\n\t  if (!this.pendingJsCb) {\n\t    if (type === TYPE_TRANSITION) {\n\t      // trigger transition by removing enter class now\n\t      removeClass(this.el, this.enterClass);\n\t      this.setupCssCb(transitionEndEvent, enterDone);\n\t    } else if (type === TYPE_ANIMATION) {\n\t      this.setupCssCb(animationEndEvent, enterDone);\n\t    } else {\n\t      enterDone();\n\t    }\n\t  } else if (type === TYPE_TRANSITION) {\n\t    removeClass(this.el, this.enterClass);\n\t  }\n\t};\n\t\n\t/**\n\t * The \"cleanup\" phase of an entering transition.\n\t */\n\t\n\tp$1.enterDone = function () {\n\t  this.entered = true;\n\t  this.cancel = this.pendingJsCb = null;\n\t  removeClass(this.el, this.enterClass);\n\t  this.callHook('afterEnter');\n\t  if (this.cb) this.cb();\n\t};\n\t\n\t/**\n\t * Start a leaving transition.\n\t *\n\t * 1. leave transition triggered.\n\t * 2. call beforeLeave hook\n\t * 3. add leave class (trigger css transition)\n\t * 4. call leave hook (with possible explicit js callback)\n\t * 5. reflow if no explicit js callback is provided\n\t * 6. based on transition type:\n\t *    - transition or animation:\n\t *        wait for end event, remove class, then done if\n\t *        there's no explicit js callback.\n\t *    - no css transition:\n\t *        done if there's no explicit js callback.\n\t * 7. wait for either done or js callback, then call\n\t *    afterLeave hook.\n\t *\n\t * @param {Function} op - remove/hide the element\n\t * @param {Function} [cb]\n\t */\n\t\n\tp$1.leave = function (op, cb) {\n\t  this.cancelPending();\n\t  this.callHook('beforeLeave');\n\t  this.op = op;\n\t  this.cb = cb;\n\t  addClass(this.el, this.leaveClass);\n\t  this.left = false;\n\t  this.callHookWithCb('leave');\n\t  if (this.left) {\n\t    return; // user called done synchronously.\n\t  }\n\t  this.cancel = this.hooks && this.hooks.leaveCancelled;\n\t  // only need to handle leaveDone if\n\t  // 1. the transition is already done (synchronously called\n\t  //    by the user, which causes this.op set to null)\n\t  // 2. there's no explicit js callback\n\t  if (this.op && !this.pendingJsCb) {\n\t    // if a CSS transition leaves immediately after enter,\n\t    // the transitionend event never fires. therefore we\n\t    // detect such cases and end the leave immediately.\n\t    if (this.justEntered) {\n\t      this.leaveDone();\n\t    } else {\n\t      pushJob(this.leaveNextTick);\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * The \"nextTick\" phase of a leaving transition.\n\t */\n\t\n\tp$1.leaveNextTick = function () {\n\t  var type = this.getCssTransitionType(this.leaveClass);\n\t  if (type) {\n\t    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n\t    this.setupCssCb(event, this.leaveDone);\n\t  } else {\n\t    this.leaveDone();\n\t  }\n\t};\n\t\n\t/**\n\t * The \"cleanup\" phase of a leaving transition.\n\t */\n\t\n\tp$1.leaveDone = function () {\n\t  this.left = true;\n\t  this.cancel = this.pendingJsCb = null;\n\t  this.op();\n\t  removeClass(this.el, this.leaveClass);\n\t  this.callHook('afterLeave');\n\t  if (this.cb) this.cb();\n\t  this.op = null;\n\t};\n\t\n\t/**\n\t * Cancel any pending callbacks from a previously running\n\t * but not finished transition.\n\t */\n\t\n\tp$1.cancelPending = function () {\n\t  this.op = this.cb = null;\n\t  var hasPending = false;\n\t  if (this.pendingCssCb) {\n\t    hasPending = true;\n\t    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n\t    this.pendingCssEvent = this.pendingCssCb = null;\n\t  }\n\t  if (this.pendingJsCb) {\n\t    hasPending = true;\n\t    this.pendingJsCb.cancel();\n\t    this.pendingJsCb = null;\n\t  }\n\t  if (hasPending) {\n\t    removeClass(this.el, this.enterClass);\n\t    removeClass(this.el, this.leaveClass);\n\t  }\n\t  if (this.cancel) {\n\t    this.cancel.call(this.vm, this.el);\n\t    this.cancel = null;\n\t  }\n\t};\n\t\n\t/**\n\t * Call a user-provided synchronous hook function.\n\t *\n\t * @param {String} type\n\t */\n\t\n\tp$1.callHook = function (type) {\n\t  if (this.hooks && this.hooks[type]) {\n\t    this.hooks[type].call(this.vm, this.el);\n\t  }\n\t};\n\t\n\t/**\n\t * Call a user-provided, potentially-async hook function.\n\t * We check for the length of arguments to see if the hook\n\t * expects a `done` callback. If true, the transition's end\n\t * will be determined by when the user calls that callback;\n\t * otherwise, the end is determined by the CSS transition or\n\t * animation.\n\t *\n\t * @param {String} type\n\t */\n\t\n\tp$1.callHookWithCb = function (type) {\n\t  var hook = this.hooks && this.hooks[type];\n\t  if (hook) {\n\t    if (hook.length > 1) {\n\t      this.pendingJsCb = cancellable(this[type + 'Done']);\n\t    }\n\t    hook.call(this.vm, this.el, this.pendingJsCb);\n\t  }\n\t};\n\t\n\t/**\n\t * Get an element's transition type based on the\n\t * calculated styles.\n\t *\n\t * @param {String} className\n\t * @return {Number}\n\t */\n\t\n\tp$1.getCssTransitionType = function (className) {\n\t  /* istanbul ignore if */\n\t  if (!transitionEndEvent ||\n\t  // skip CSS transitions if page is not visible -\n\t  // this solves the issue of transitionend events not\n\t  // firing until the page is visible again.\n\t  // pageVisibility API is supported in IE10+, same as\n\t  // CSS transitions.\n\t  document.hidden ||\n\t  // explicit js-only transition\n\t  this.hooks && this.hooks.css === false ||\n\t  // element is hidden\n\t  isHidden(this.el)) {\n\t    return;\n\t  }\n\t  var type = this.type || this.typeCache[className];\n\t  if (type) return type;\n\t  var inlineStyles = this.el.style;\n\t  var computedStyles = window.getComputedStyle(this.el);\n\t  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n\t  if (transDuration && transDuration !== '0s') {\n\t    type = TYPE_TRANSITION;\n\t  } else {\n\t    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n\t    if (animDuration && animDuration !== '0s') {\n\t      type = TYPE_ANIMATION;\n\t    }\n\t  }\n\t  if (type) {\n\t    this.typeCache[className] = type;\n\t  }\n\t  return type;\n\t};\n\t\n\t/**\n\t * Setup a CSS transitionend/animationend callback.\n\t *\n\t * @param {String} event\n\t * @param {Function} cb\n\t */\n\t\n\tp$1.setupCssCb = function (event, cb) {\n\t  this.pendingCssEvent = event;\n\t  var self = this;\n\t  var el = this.el;\n\t  var onEnd = this.pendingCssCb = function (e) {\n\t    if (e.target === el) {\n\t      off(el, event, onEnd);\n\t      self.pendingCssEvent = self.pendingCssCb = null;\n\t      if (!self.pendingJsCb && cb) {\n\t        cb();\n\t      }\n\t    }\n\t  };\n\t  on(el, event, onEnd);\n\t};\n\t\n\t/**\n\t * Check if an element is hidden - in that case we can just\n\t * skip the transition alltogether.\n\t *\n\t * @param {Element} el\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isHidden(el) {\n\t  if (/svg$/.test(el.namespaceURI)) {\n\t    // SVG elements do not have offset(Width|Height)\n\t    // so we need to check the client rect\n\t    var rect = el.getBoundingClientRect();\n\t    return !(rect.width || rect.height);\n\t  } else {\n\t    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n\t  }\n\t}\n\t\n\tvar transition$1 = {\n\t\n\t  priority: TRANSITION,\n\t\n\t  update: function update(id, oldId) {\n\t    var el = this.el;\n\t    // resolve on owner vm\n\t    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n\t    id = id || 'v';\n\t    oldId = oldId || 'v';\n\t    el.__v_trans = new Transition(el, id, hooks, this.vm);\n\t    removeClass(el, oldId + '-transition');\n\t    addClass(el, id + '-transition');\n\t  }\n\t};\n\t\n\tvar internalDirectives = {\n\t  style: style,\n\t  'class': vClass,\n\t  component: component,\n\t  prop: propDef,\n\t  transition: transition$1\n\t};\n\t\n\t// special binding prefixes\n\tvar bindRE = /^v-bind:|^:/;\n\tvar onRE = /^v-on:|^@/;\n\tvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\n\tvar modifierRE = /\\.[^\\.]+/g;\n\tvar transitionRE = /^(v-bind:|:)?transition$/;\n\t\n\t// default directive priority\n\tvar DEFAULT_PRIORITY = 1000;\n\tvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\t\n\t/**\n\t * Compile a template and return a reusable composite link\n\t * function, which recursively contains more link functions\n\t * inside. This top level compile function would normally\n\t * be called on instance root nodes, but can also be used\n\t * for partial compilation if the partial argument is true.\n\t *\n\t * The returned composite link function, when called, will\n\t * return an unlink function that tearsdown all directives\n\t * created during the linking phase.\n\t *\n\t * @param {Element|DocumentFragment} el\n\t * @param {Object} options\n\t * @param {Boolean} partial\n\t * @return {Function}\n\t */\n\t\n\tfunction compile(el, options, partial) {\n\t  // link function for the node itself.\n\t  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n\t  // link function for the childNodes\n\t  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\t\n\t  /**\n\t   * A composite linker function to be called on a already\n\t   * compiled piece of DOM, which instantiates all directive\n\t   * instances.\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {Element|DocumentFragment} el\n\t   * @param {Vue} [host] - host vm of transcluded content\n\t   * @param {Object} [scope] - v-for scope\n\t   * @param {Fragment} [frag] - link context fragment\n\t   * @return {Function|undefined}\n\t   */\n\t\n\t  return function compositeLinkFn(vm, el, host, scope, frag) {\n\t    // cache childNodes before linking parent, fix #657\n\t    var childNodes = toArray(el.childNodes);\n\t    // link\n\t    var dirs = linkAndCapture(function compositeLinkCapturer() {\n\t      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n\t      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n\t    }, vm);\n\t    return makeUnlinkFn(vm, dirs);\n\t  };\n\t}\n\t\n\t/**\n\t * Apply a linker to a vm/element pair and capture the\n\t * directives created during the process.\n\t *\n\t * @param {Function} linker\n\t * @param {Vue} vm\n\t */\n\t\n\tfunction linkAndCapture(linker, vm) {\n\t  /* istanbul ignore if */\n\t  if (true) {\n\t    // reset directives before every capture in production\n\t    // mode, so that when unlinking we don't need to splice\n\t    // them out (which turns out to be a perf hit).\n\t    // they are kept in development mode because they are\n\t    // useful for Vue's own tests.\n\t    vm._directives = [];\n\t  }\n\t  var originalDirCount = vm._directives.length;\n\t  linker();\n\t  var dirs = vm._directives.slice(originalDirCount);\n\t  sortDirectives(dirs);\n\t  for (var i = 0, l = dirs.length; i < l; i++) {\n\t    dirs[i]._bind();\n\t  }\n\t  return dirs;\n\t}\n\t\n\t/**\n\t * sort directives by priority (stable sort)\n\t *\n\t * @param {Array} dirs\n\t */\n\tfunction sortDirectives(dirs) {\n\t  if (dirs.length === 0) return;\n\t\n\t  var groupedMap = {};\n\t  var i, j, k, l;\n\t  var index = 0;\n\t  var priorities = [];\n\t  for (i = 0, j = dirs.length; i < j; i++) {\n\t    var dir = dirs[i];\n\t    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\n\t    var array = groupedMap[priority];\n\t    if (!array) {\n\t      array = groupedMap[priority] = [];\n\t      priorities.push(priority);\n\t    }\n\t    array.push(dir);\n\t  }\n\t\n\t  priorities.sort(function (a, b) {\n\t    return a > b ? -1 : a === b ? 0 : 1;\n\t  });\n\t  for (i = 0, j = priorities.length; i < j; i++) {\n\t    var group = groupedMap[priorities[i]];\n\t    for (k = 0, l = group.length; k < l; k++) {\n\t      dirs[index++] = group[k];\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Linker functions return an unlink function that\n\t * tearsdown all directives instances generated during\n\t * the process.\n\t *\n\t * We create unlink functions with only the necessary\n\t * information to avoid retaining additional closures.\n\t *\n\t * @param {Vue} vm\n\t * @param {Array} dirs\n\t * @param {Vue} [context]\n\t * @param {Array} [contextDirs]\n\t * @return {Function}\n\t */\n\t\n\tfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n\t  function unlink(destroying) {\n\t    teardownDirs(vm, dirs, destroying);\n\t    if (context && contextDirs) {\n\t      teardownDirs(context, contextDirs);\n\t    }\n\t  }\n\t  // expose linked directives\n\t  unlink.dirs = dirs;\n\t  return unlink;\n\t}\n\t\n\t/**\n\t * Teardown partial linked directives.\n\t *\n\t * @param {Vue} vm\n\t * @param {Array} dirs\n\t * @param {Boolean} destroying\n\t */\n\t\n\tfunction teardownDirs(vm, dirs, destroying) {\n\t  var i = dirs.length;\n\t  while (i--) {\n\t    dirs[i]._teardown();\n\t    if (false) {\n\t      vm._directives.$remove(dirs[i]);\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Compile link props on an instance.\n\t *\n\t * @param {Vue} vm\n\t * @param {Element} el\n\t * @param {Object} props\n\t * @param {Object} [scope]\n\t * @return {Function}\n\t */\n\t\n\tfunction compileAndLinkProps(vm, el, props, scope) {\n\t  var propsLinkFn = compileProps(el, props, vm);\n\t  var propDirs = linkAndCapture(function () {\n\t    propsLinkFn(vm, scope);\n\t  }, vm);\n\t  return makeUnlinkFn(vm, propDirs);\n\t}\n\t\n\t/**\n\t * Compile the root element of an instance.\n\t *\n\t * 1. attrs on context container (context scope)\n\t * 2. attrs on the component template root node, if\n\t *    replace:true (child scope)\n\t *\n\t * If this is a fragment instance, we only need to compile 1.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @param {Object} contextOptions\n\t * @return {Function}\n\t */\n\t\n\tfunction compileRoot(el, options, contextOptions) {\n\t  var containerAttrs = options._containerAttrs;\n\t  var replacerAttrs = options._replacerAttrs;\n\t  var contextLinkFn, replacerLinkFn;\n\t\n\t  // only need to compile other attributes for\n\t  // non-fragment instances\n\t  if (el.nodeType !== 11) {\n\t    // for components, container and replacer need to be\n\t    // compiled separately and linked in different scopes.\n\t    if (options._asComponent) {\n\t      // 2. container attributes\n\t      if (containerAttrs && contextOptions) {\n\t        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n\t      }\n\t      if (replacerAttrs) {\n\t        // 3. replacer attributes\n\t        replacerLinkFn = compileDirectives(replacerAttrs, options);\n\t      }\n\t    } else {\n\t      // non-component, just compile as a normal element.\n\t      replacerLinkFn = compileDirectives(el.attributes, options);\n\t    }\n\t  } else if (false) {\n\t    // warn container directives for fragment instances\n\t    var names = containerAttrs.filter(function (attr) {\n\t      // allow vue-loader/vueify scoped css attributes\n\t      return attr.name.indexOf('_v-') < 0 &&\n\t      // allow event listeners\n\t      !onRE.test(attr.name) &&\n\t      // allow slots\n\t      attr.name !== 'slot';\n\t    }).map(function (attr) {\n\t      return '\"' + attr.name + '\"';\n\t    });\n\t    if (names.length) {\n\t      var plural = names.length > 1;\n\t\n\t      var componentName = options.el.tagName.toLowerCase();\n\t      if (componentName === 'component' && options.name) {\n\t        componentName += ':' + options.name;\n\t      }\n\t\n\t      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n\t    }\n\t  }\n\t\n\t  options._containerAttrs = options._replacerAttrs = null;\n\t  return function rootLinkFn(vm, el, scope) {\n\t    // link context scope dirs\n\t    var context = vm._context;\n\t    var contextDirs;\n\t    if (context && contextLinkFn) {\n\t      contextDirs = linkAndCapture(function () {\n\t        contextLinkFn(context, el, null, scope);\n\t      }, context);\n\t    }\n\t\n\t    // link self\n\t    var selfDirs = linkAndCapture(function () {\n\t      if (replacerLinkFn) replacerLinkFn(vm, el);\n\t    }, vm);\n\t\n\t    // return the unlink function that tearsdown context\n\t    // container directives.\n\t    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n\t  };\n\t}\n\t\n\t/**\n\t * Compile a node and return a nodeLinkFn based on the\n\t * node type.\n\t *\n\t * @param {Node} node\n\t * @param {Object} options\n\t * @return {Function|null}\n\t */\n\t\n\tfunction compileNode(node, options) {\n\t  var type = node.nodeType;\n\t  if (type === 1 && !isScript(node)) {\n\t    return compileElement(node, options);\n\t  } else if (type === 3 && node.data.trim()) {\n\t    return compileTextNode(node, options);\n\t  } else {\n\t    return null;\n\t  }\n\t}\n\t\n\t/**\n\t * Compile an element and return a nodeLinkFn.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @return {Function|null}\n\t */\n\t\n\tfunction compileElement(el, options) {\n\t  // preprocess textareas.\n\t  // textarea treats its text content as the initial value.\n\t  // just bind it as an attr directive for value.\n\t  if (el.tagName === 'TEXTAREA') {\n\t    // a textarea which has v-pre attr should skip complie.\n\t    if (getAttr(el, 'v-pre') !== null) {\n\t      return skip;\n\t    }\n\t    var tokens = parseText(el.value);\n\t    if (tokens) {\n\t      el.setAttribute(':value', tokensToExp(tokens));\n\t      el.value = '';\n\t    }\n\t  }\n\t  var linkFn;\n\t  var hasAttrs = el.hasAttributes();\n\t  var attrs = hasAttrs && toArray(el.attributes);\n\t  // check terminal directives (for & if)\n\t  if (hasAttrs) {\n\t    linkFn = checkTerminalDirectives(el, attrs, options);\n\t  }\n\t  // check element directives\n\t  if (!linkFn) {\n\t    linkFn = checkElementDirectives(el, options);\n\t  }\n\t  // check component\n\t  if (!linkFn) {\n\t    linkFn = checkComponent(el, options);\n\t  }\n\t  // normal directives\n\t  if (!linkFn && hasAttrs) {\n\t    linkFn = compileDirectives(attrs, options);\n\t  }\n\t  return linkFn;\n\t}\n\t\n\t/**\n\t * Compile a textNode and return a nodeLinkFn.\n\t *\n\t * @param {TextNode} node\n\t * @param {Object} options\n\t * @return {Function|null} textNodeLinkFn\n\t */\n\t\n\tfunction compileTextNode(node, options) {\n\t  // skip marked text nodes\n\t  if (node._skip) {\n\t    return removeText;\n\t  }\n\t\n\t  var tokens = parseText(node.wholeText);\n\t  if (!tokens) {\n\t    return null;\n\t  }\n\t\n\t  // mark adjacent text nodes as skipped,\n\t  // because we are using node.wholeText to compile\n\t  // all adjacent text nodes together. This fixes\n\t  // issues in IE where sometimes it splits up a single\n\t  // text node into multiple ones.\n\t  var next = node.nextSibling;\n\t  while (next && next.nodeType === 3) {\n\t    next._skip = true;\n\t    next = next.nextSibling;\n\t  }\n\t\n\t  var frag = document.createDocumentFragment();\n\t  var el, token;\n\t  for (var i = 0, l = tokens.length; i < l; i++) {\n\t    token = tokens[i];\n\t    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n\t    frag.appendChild(el);\n\t  }\n\t  return makeTextNodeLinkFn(tokens, frag, options);\n\t}\n\t\n\t/**\n\t * Linker for an skipped text node.\n\t *\n\t * @param {Vue} vm\n\t * @param {Text} node\n\t */\n\t\n\tfunction removeText(vm, node) {\n\t  remove(node);\n\t}\n\t\n\t/**\n\t * Process a single text token.\n\t *\n\t * @param {Object} token\n\t * @param {Object} options\n\t * @return {Node}\n\t */\n\t\n\tfunction processTextToken(token, options) {\n\t  var el;\n\t  if (token.oneTime) {\n\t    el = document.createTextNode(token.value);\n\t  } else {\n\t    if (token.html) {\n\t      el = document.createComment('v-html');\n\t      setTokenType('html');\n\t    } else {\n\t      // IE will clean up empty textNodes during\n\t      // frag.cloneNode(true), so we have to give it\n\t      // something here...\n\t      el = document.createTextNode(' ');\n\t      setTokenType('text');\n\t    }\n\t  }\n\t  function setTokenType(type) {\n\t    if (token.descriptor) return;\n\t    var parsed = parseDirective(token.value);\n\t    token.descriptor = {\n\t      name: type,\n\t      def: directives[type],\n\t      expression: parsed.expression,\n\t      filters: parsed.filters\n\t    };\n\t  }\n\t  return el;\n\t}\n\t\n\t/**\n\t * Build a function that processes a textNode.\n\t *\n\t * @param {Array<Object>} tokens\n\t * @param {DocumentFragment} frag\n\t */\n\t\n\tfunction makeTextNodeLinkFn(tokens, frag) {\n\t  return function textNodeLinkFn(vm, el, host, scope) {\n\t    var fragClone = frag.cloneNode(true);\n\t    var childNodes = toArray(fragClone.childNodes);\n\t    var token, value, node;\n\t    for (var i = 0, l = tokens.length; i < l; i++) {\n\t      token = tokens[i];\n\t      value = token.value;\n\t      if (token.tag) {\n\t        node = childNodes[i];\n\t        if (token.oneTime) {\n\t          value = (scope || vm).$eval(value);\n\t          if (token.html) {\n\t            replace(node, parseTemplate(value, true));\n\t          } else {\n\t            node.data = _toString(value);\n\t          }\n\t        } else {\n\t          vm._bindDir(token.descriptor, node, host, scope);\n\t        }\n\t      }\n\t    }\n\t    replace(el, fragClone);\n\t  };\n\t}\n\t\n\t/**\n\t * Compile a node list and return a childLinkFn.\n\t *\n\t * @param {NodeList} nodeList\n\t * @param {Object} options\n\t * @return {Function|undefined}\n\t */\n\t\n\tfunction compileNodeList(nodeList, options) {\n\t  var linkFns = [];\n\t  var nodeLinkFn, childLinkFn, node;\n\t  for (var i = 0, l = nodeList.length; i < l; i++) {\n\t    node = nodeList[i];\n\t    nodeLinkFn = compileNode(node, options);\n\t    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n\t    linkFns.push(nodeLinkFn, childLinkFn);\n\t  }\n\t  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n\t}\n\t\n\t/**\n\t * Make a child link function for a node's childNodes.\n\t *\n\t * @param {Array<Function>} linkFns\n\t * @return {Function} childLinkFn\n\t */\n\t\n\tfunction makeChildLinkFn(linkFns) {\n\t  return function childLinkFn(vm, nodes, host, scope, frag) {\n\t    var node, nodeLinkFn, childrenLinkFn;\n\t    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n\t      node = nodes[n];\n\t      nodeLinkFn = linkFns[i++];\n\t      childrenLinkFn = linkFns[i++];\n\t      // cache childNodes before linking parent, fix #657\n\t      var childNodes = toArray(node.childNodes);\n\t      if (nodeLinkFn) {\n\t        nodeLinkFn(vm, node, host, scope, frag);\n\t      }\n\t      if (childrenLinkFn) {\n\t        childrenLinkFn(vm, childNodes, host, scope, frag);\n\t      }\n\t    }\n\t  };\n\t}\n\t\n\t/**\n\t * Check for element directives (custom elements that should\n\t * be resovled as terminal directives).\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t */\n\t\n\tfunction checkElementDirectives(el, options) {\n\t  var tag = el.tagName.toLowerCase();\n\t  if (commonTagRE.test(tag)) {\n\t    return;\n\t  }\n\t  var def = resolveAsset(options, 'elementDirectives', tag);\n\t  if (def) {\n\t    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n\t  }\n\t}\n\t\n\t/**\n\t * Check if an element is a component. If yes, return\n\t * a component link function.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @return {Function|undefined}\n\t */\n\t\n\tfunction checkComponent(el, options) {\n\t  var component = checkComponentAttr(el, options);\n\t  if (component) {\n\t    var ref = findRef(el);\n\t    var descriptor = {\n\t      name: 'component',\n\t      ref: ref,\n\t      expression: component.id,\n\t      def: internalDirectives.component,\n\t      modifiers: {\n\t        literal: !component.dynamic\n\t      }\n\t    };\n\t    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n\t      if (ref) {\n\t        defineReactive((scope || vm).$refs, ref, null);\n\t      }\n\t      vm._bindDir(descriptor, el, host, scope, frag);\n\t    };\n\t    componentLinkFn.terminal = true;\n\t    return componentLinkFn;\n\t  }\n\t}\n\t\n\t/**\n\t * Check an element for terminal directives in fixed order.\n\t * If it finds one, return a terminal link function.\n\t *\n\t * @param {Element} el\n\t * @param {Array} attrs\n\t * @param {Object} options\n\t * @return {Function} terminalLinkFn\n\t */\n\t\n\tfunction checkTerminalDirectives(el, attrs, options) {\n\t  // skip v-pre\n\t  if (getAttr(el, 'v-pre') !== null) {\n\t    return skip;\n\t  }\n\t  // skip v-else block, but only if following v-if\n\t  if (el.hasAttribute('v-else')) {\n\t    var prev = el.previousElementSibling;\n\t    if (prev && prev.hasAttribute('v-if')) {\n\t      return skip;\n\t    }\n\t  }\n\t\n\t  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n\t  for (var i = 0, j = attrs.length; i < j; i++) {\n\t    attr = attrs[i];\n\t    name = attr.name.replace(modifierRE, '');\n\t    if (matched = name.match(dirAttrRE)) {\n\t      def = resolveAsset(options, 'directives', matched[1]);\n\t      if (def && def.terminal) {\n\t        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n\t          termDef = def;\n\t          rawName = attr.name;\n\t          modifiers = parseModifiers(attr.name);\n\t          value = attr.value;\n\t          dirName = matched[1];\n\t          arg = matched[2];\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  if (termDef) {\n\t    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n\t  }\n\t}\n\t\n\tfunction skip() {}\n\tskip.terminal = true;\n\t\n\t/**\n\t * Build a node link function for a terminal directive.\n\t * A terminal link function terminates the current\n\t * compilation recursion and handles compilation of the\n\t * subtree in the directive.\n\t *\n\t * @param {Element} el\n\t * @param {String} dirName\n\t * @param {String} value\n\t * @param {Object} options\n\t * @param {Object} def\n\t * @param {String} [rawName]\n\t * @param {String} [arg]\n\t * @param {Object} [modifiers]\n\t * @return {Function} terminalLinkFn\n\t */\n\t\n\tfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n\t  var parsed = parseDirective(value);\n\t  var descriptor = {\n\t    name: dirName,\n\t    arg: arg,\n\t    expression: parsed.expression,\n\t    filters: parsed.filters,\n\t    raw: value,\n\t    attr: rawName,\n\t    modifiers: modifiers,\n\t    def: def\n\t  };\n\t  // check ref for v-for, v-if and router-view\n\t  if (dirName === 'for' || dirName === 'router-view') {\n\t    descriptor.ref = findRef(el);\n\t  }\n\t  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n\t    if (descriptor.ref) {\n\t      defineReactive((scope || vm).$refs, descriptor.ref, null);\n\t    }\n\t    vm._bindDir(descriptor, el, host, scope, frag);\n\t  };\n\t  fn.terminal = true;\n\t  return fn;\n\t}\n\t\n\t/**\n\t * Compile the directives on an element and return a linker.\n\t *\n\t * @param {Array|NamedNodeMap} attrs\n\t * @param {Object} options\n\t * @return {Function}\n\t */\n\t\n\tfunction compileDirectives(attrs, options) {\n\t  var i = attrs.length;\n\t  var dirs = [];\n\t  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n\t  while (i--) {\n\t    attr = attrs[i];\n\t    name = rawName = attr.name;\n\t    value = rawValue = attr.value;\n\t    tokens = parseText(value);\n\t    // reset arg\n\t    arg = null;\n\t    // check modifiers\n\t    modifiers = parseModifiers(name);\n\t    name = name.replace(modifierRE, '');\n\t\n\t    // attribute interpolations\n\t    if (tokens) {\n\t      value = tokensToExp(tokens);\n\t      arg = name;\n\t      pushDir('bind', directives.bind, tokens);\n\t      // warn against mixing mustaches with v-bind\n\t      if (false) {\n\t        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n\t          return attr.name === ':class' || attr.name === 'v-bind:class';\n\t        })) {\n\t          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n\t        }\n\t      }\n\t    } else\n\t\n\t      // special attribute: transition\n\t      if (transitionRE.test(name)) {\n\t        modifiers.literal = !bindRE.test(name);\n\t        pushDir('transition', internalDirectives.transition);\n\t      } else\n\t\n\t        // event handlers\n\t        if (onRE.test(name)) {\n\t          arg = name.replace(onRE, '');\n\t          pushDir('on', directives.on);\n\t        } else\n\t\n\t          // attribute bindings\n\t          if (bindRE.test(name)) {\n\t            dirName = name.replace(bindRE, '');\n\t            if (dirName === 'style' || dirName === 'class') {\n\t              pushDir(dirName, internalDirectives[dirName]);\n\t            } else {\n\t              arg = dirName;\n\t              pushDir('bind', directives.bind);\n\t            }\n\t          } else\n\t\n\t            // normal directives\n\t            if (matched = name.match(dirAttrRE)) {\n\t              dirName = matched[1];\n\t              arg = matched[2];\n\t\n\t              // skip v-else (when used with v-show)\n\t              if (dirName === 'else') {\n\t                continue;\n\t              }\n\t\n\t              dirDef = resolveAsset(options, 'directives', dirName, true);\n\t              if (dirDef) {\n\t                pushDir(dirName, dirDef);\n\t              }\n\t            }\n\t  }\n\t\n\t  /**\n\t   * Push a directive.\n\t   *\n\t   * @param {String} dirName\n\t   * @param {Object|Function} def\n\t   * @param {Array} [interpTokens]\n\t   */\n\t\n\t  function pushDir(dirName, def, interpTokens) {\n\t    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n\t    var parsed = !hasOneTimeToken && parseDirective(value);\n\t    dirs.push({\n\t      name: dirName,\n\t      attr: rawName,\n\t      raw: rawValue,\n\t      def: def,\n\t      arg: arg,\n\t      modifiers: modifiers,\n\t      // conversion from interpolation strings with one-time token\n\t      // to expression is differed until directive bind time so that we\n\t      // have access to the actual vm context for one-time bindings.\n\t      expression: parsed && parsed.expression,\n\t      filters: parsed && parsed.filters,\n\t      interp: interpTokens,\n\t      hasOneTime: hasOneTimeToken\n\t    });\n\t  }\n\t\n\t  if (dirs.length) {\n\t    return makeNodeLinkFn(dirs);\n\t  }\n\t}\n\t\n\t/**\n\t * Parse modifiers from directive attribute name.\n\t *\n\t * @param {String} name\n\t * @return {Object}\n\t */\n\t\n\tfunction parseModifiers(name) {\n\t  var res = Object.create(null);\n\t  var match = name.match(modifierRE);\n\t  if (match) {\n\t    var i = match.length;\n\t    while (i--) {\n\t      res[match[i].slice(1)] = true;\n\t    }\n\t  }\n\t  return res;\n\t}\n\t\n\t/**\n\t * Build a link function for all directives on a single node.\n\t *\n\t * @param {Array} directives\n\t * @return {Function} directivesLinkFn\n\t */\n\t\n\tfunction makeNodeLinkFn(directives) {\n\t  return function nodeLinkFn(vm, el, host, scope, frag) {\n\t    // reverse apply because it's sorted low to high\n\t    var i = directives.length;\n\t    while (i--) {\n\t      vm._bindDir(directives[i], el, host, scope, frag);\n\t    }\n\t  };\n\t}\n\t\n\t/**\n\t * Check if an interpolation string contains one-time tokens.\n\t *\n\t * @param {Array} tokens\n\t * @return {Boolean}\n\t */\n\t\n\tfunction hasOneTime(tokens) {\n\t  var i = tokens.length;\n\t  while (i--) {\n\t    if (tokens[i].oneTime) return true;\n\t  }\n\t}\n\t\n\tfunction isScript(el) {\n\t  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n\t}\n\t\n\tvar specialCharRE = /[^\\w\\-:\\.]/;\n\t\n\t/**\n\t * Process an element or a DocumentFragment based on a\n\t * instance option object. This allows us to transclude\n\t * a template node/fragment before the instance is created,\n\t * so the processed fragment can then be cloned and reused\n\t * in v-for.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @return {Element|DocumentFragment}\n\t */\n\t\n\tfunction transclude(el, options) {\n\t  // extract container attributes to pass them down\n\t  // to compiler, because they need to be compiled in\n\t  // parent scope. we are mutating the options object here\n\t  // assuming the same object will be used for compile\n\t  // right after this.\n\t  if (options) {\n\t    options._containerAttrs = extractAttrs(el);\n\t  }\n\t  // for template tags, what we want is its content as\n\t  // a documentFragment (for fragment instances)\n\t  if (isTemplate(el)) {\n\t    el = parseTemplate(el);\n\t  }\n\t  if (options) {\n\t    if (options._asComponent && !options.template) {\n\t      options.template = '<slot></slot>';\n\t    }\n\t    if (options.template) {\n\t      options._content = extractContent(el);\n\t      el = transcludeTemplate(el, options);\n\t    }\n\t  }\n\t  if (isFragment(el)) {\n\t    // anchors for fragment instance\n\t    // passing in `persist: true` to avoid them being\n\t    // discarded by IE during template cloning\n\t    prepend(createAnchor('v-start', true), el);\n\t    el.appendChild(createAnchor('v-end', true));\n\t  }\n\t  return el;\n\t}\n\t\n\t/**\n\t * Process the template option.\n\t * If the replace option is true this will swap the $el.\n\t *\n\t * @param {Element} el\n\t * @param {Object} options\n\t * @return {Element|DocumentFragment}\n\t */\n\t\n\tfunction transcludeTemplate(el, options) {\n\t  var template = options.template;\n\t  var frag = parseTemplate(template, true);\n\t  if (frag) {\n\t    var replacer = frag.firstChild;\n\t    if (!replacer) {\n\t      return frag;\n\t    }\n\t    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n\t    if (options.replace) {\n\t      /* istanbul ignore if */\n\t      if (el === document.body) {\n\t        (\"production\") !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n\t      }\n\t      // there are many cases where the instance must\n\t      // become a fragment instance: basically anything that\n\t      // can create more than 1 root nodes.\n\t      if (\n\t      // multi-children template\n\t      frag.childNodes.length > 1 ||\n\t      // non-element template\n\t      replacer.nodeType !== 1 ||\n\t      // single nested component\n\t      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n\t      // element directive\n\t      resolveAsset(options, 'elementDirectives', tag) ||\n\t      // for block\n\t      replacer.hasAttribute('v-for') ||\n\t      // if block\n\t      replacer.hasAttribute('v-if')) {\n\t        return frag;\n\t      } else {\n\t        options._replacerAttrs = extractAttrs(replacer);\n\t        mergeAttrs(el, replacer);\n\t        return replacer;\n\t      }\n\t    } else {\n\t      el.appendChild(frag);\n\t      return el;\n\t    }\n\t  } else {\n\t    (\"production\") !== 'production' && warn('Invalid template option: ' + template);\n\t  }\n\t}\n\t\n\t/**\n\t * Helper to extract a component container's attributes\n\t * into a plain object array.\n\t *\n\t * @param {Element} el\n\t * @return {Array}\n\t */\n\t\n\tfunction extractAttrs(el) {\n\t  if (el.nodeType === 1 && el.hasAttributes()) {\n\t    return toArray(el.attributes);\n\t  }\n\t}\n\t\n\t/**\n\t * Merge the attributes of two elements, and make sure\n\t * the class names are merged properly.\n\t *\n\t * @param {Element} from\n\t * @param {Element} to\n\t */\n\t\n\tfunction mergeAttrs(from, to) {\n\t  var attrs = from.attributes;\n\t  var i = attrs.length;\n\t  var name, value;\n\t  while (i--) {\n\t    name = attrs[i].name;\n\t    value = attrs[i].value;\n\t    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n\t      to.setAttribute(name, value);\n\t    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n\t      value.split(/\\s+/).forEach(function (cls) {\n\t        addClass(to, cls);\n\t      });\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Scan and determine slot content distribution.\n\t * We do this during transclusion instead at compile time so that\n\t * the distribution is decoupled from the compilation order of\n\t * the slots.\n\t *\n\t * @param {Element|DocumentFragment} template\n\t * @param {Element} content\n\t * @param {Vue} vm\n\t */\n\t\n\tfunction resolveSlots(vm, content) {\n\t  if (!content) {\n\t    return;\n\t  }\n\t  var contents = vm._slotContents = Object.create(null);\n\t  var el, name;\n\t  for (var i = 0, l = content.children.length; i < l; i++) {\n\t    el = content.children[i];\n\t    /* eslint-disable no-cond-assign */\n\t    if (name = el.getAttribute('slot')) {\n\t      (contents[name] || (contents[name] = [])).push(el);\n\t    }\n\t    /* eslint-enable no-cond-assign */\n\t    if (false) {\n\t      warn('The \"slot\" attribute must be static.', vm.$parent);\n\t    }\n\t  }\n\t  for (name in contents) {\n\t    contents[name] = extractFragment(contents[name], content);\n\t  }\n\t  if (content.hasChildNodes()) {\n\t    var nodes = content.childNodes;\n\t    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n\t      return;\n\t    }\n\t    contents['default'] = extractFragment(content.childNodes, content);\n\t  }\n\t}\n\t\n\t/**\n\t * Extract qualified content nodes from a node list.\n\t *\n\t * @param {NodeList} nodes\n\t * @return {DocumentFragment}\n\t */\n\t\n\tfunction extractFragment(nodes, parent) {\n\t  var frag = document.createDocumentFragment();\n\t  nodes = toArray(nodes);\n\t  for (var i = 0, l = nodes.length; i < l; i++) {\n\t    var node = nodes[i];\n\t    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n\t      parent.removeChild(node);\n\t      node = parseTemplate(node, true);\n\t    }\n\t    frag.appendChild(node);\n\t  }\n\t  return frag;\n\t}\n\t\n\t\n\t\n\tvar compiler = Object.freeze({\n\t\tcompile: compile,\n\t\tcompileAndLinkProps: compileAndLinkProps,\n\t\tcompileRoot: compileRoot,\n\t\ttransclude: transclude,\n\t\tresolveSlots: resolveSlots\n\t});\n\t\n\tfunction stateMixin (Vue) {\n\t  /**\n\t   * Accessor for `$data` property, since setting $data\n\t   * requires observing the new object and updating\n\t   * proxied properties.\n\t   */\n\t\n\t  Object.defineProperty(Vue.prototype, '$data', {\n\t    get: function get() {\n\t      return this._data;\n\t    },\n\t    set: function set(newData) {\n\t      if (newData !== this._data) {\n\t        this._setData(newData);\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Setup the scope of an instance, which contains:\n\t   * - observed data\n\t   * - computed properties\n\t   * - user methods\n\t   * - meta properties\n\t   */\n\t\n\t  Vue.prototype._initState = function () {\n\t    this._initProps();\n\t    this._initMeta();\n\t    this._initMethods();\n\t    this._initData();\n\t    this._initComputed();\n\t  };\n\t\n\t  /**\n\t   * Initialize props.\n\t   */\n\t\n\t  Vue.prototype._initProps = function () {\n\t    var options = this.$options;\n\t    var el = options.el;\n\t    var props = options.props;\n\t    if (props && !el) {\n\t      (\"production\") !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n\t    }\n\t    // make sure to convert string selectors into element now\n\t    el = options.el = query(el);\n\t    this._propsUnlinkFn = el && el.nodeType === 1 && props\n\t    // props must be linked in proper scope if inside v-for\n\t    ? compileAndLinkProps(this, el, props, this._scope) : null;\n\t  };\n\t\n\t  /**\n\t   * Initialize the data.\n\t   */\n\t\n\t  Vue.prototype._initData = function () {\n\t    var dataFn = this.$options.data;\n\t    var data = this._data = dataFn ? dataFn() : {};\n\t    if (!isPlainObject(data)) {\n\t      data = {};\n\t      (\"production\") !== 'production' && warn('data functions should return an object.', this);\n\t    }\n\t    var props = this._props;\n\t    // proxy data on instance\n\t    var keys = Object.keys(data);\n\t    var i, key;\n\t    i = keys.length;\n\t    while (i--) {\n\t      key = keys[i];\n\t      // there are two scenarios where we can proxy a data key:\n\t      // 1. it's not already defined as a prop\n\t      // 2. it's provided via a instantiation option AND there are no\n\t      //    template prop present\n\t      if (!props || !hasOwn(props, key)) {\n\t        this._proxy(key);\n\t      } else if (false) {\n\t        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n\t      }\n\t    }\n\t    // observe data\n\t    observe(data, this);\n\t  };\n\t\n\t  /**\n\t   * Swap the instance's $data. Called in $data's setter.\n\t   *\n\t   * @param {Object} newData\n\t   */\n\t\n\t  Vue.prototype._setData = function (newData) {\n\t    newData = newData || {};\n\t    var oldData = this._data;\n\t    this._data = newData;\n\t    var keys, key, i;\n\t    // unproxy keys not present in new data\n\t    keys = Object.keys(oldData);\n\t    i = keys.length;\n\t    while (i--) {\n\t      key = keys[i];\n\t      if (!(key in newData)) {\n\t        this._unproxy(key);\n\t      }\n\t    }\n\t    // proxy keys not already proxied,\n\t    // and trigger change for changed values\n\t    keys = Object.keys(newData);\n\t    i = keys.length;\n\t    while (i--) {\n\t      key = keys[i];\n\t      if (!hasOwn(this, key)) {\n\t        // new property\n\t        this._proxy(key);\n\t      }\n\t    }\n\t    oldData.__ob__.removeVm(this);\n\t    observe(newData, this);\n\t    this._digest();\n\t  };\n\t\n\t  /**\n\t   * Proxy a property, so that\n\t   * vm.prop === vm._data.prop\n\t   *\n\t   * @param {String} key\n\t   */\n\t\n\t  Vue.prototype._proxy = function (key) {\n\t    if (!isReserved(key)) {\n\t      // need to store ref to self here\n\t      // because these getter/setters might\n\t      // be called by child scopes via\n\t      // prototype inheritance.\n\t      var self = this;\n\t      Object.defineProperty(self, key, {\n\t        configurable: true,\n\t        enumerable: true,\n\t        get: function proxyGetter() {\n\t          return self._data[key];\n\t        },\n\t        set: function proxySetter(val) {\n\t          self._data[key] = val;\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Unproxy a property.\n\t   *\n\t   * @param {String} key\n\t   */\n\t\n\t  Vue.prototype._unproxy = function (key) {\n\t    if (!isReserved(key)) {\n\t      delete this[key];\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Force update on every watcher in scope.\n\t   */\n\t\n\t  Vue.prototype._digest = function () {\n\t    for (var i = 0, l = this._watchers.length; i < l; i++) {\n\t      this._watchers[i].update(true); // shallow updates\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Setup computed properties. They are essentially\n\t   * special getter/setters\n\t   */\n\t\n\t  function noop() {}\n\t  Vue.prototype._initComputed = function () {\n\t    var computed = this.$options.computed;\n\t    if (computed) {\n\t      for (var key in computed) {\n\t        var userDef = computed[key];\n\t        var def = {\n\t          enumerable: true,\n\t          configurable: true\n\t        };\n\t        if (typeof userDef === 'function') {\n\t          def.get = makeComputedGetter(userDef, this);\n\t          def.set = noop;\n\t        } else {\n\t          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n\t          def.set = userDef.set ? bind(userDef.set, this) : noop;\n\t        }\n\t        Object.defineProperty(this, key, def);\n\t      }\n\t    }\n\t  };\n\t\n\t  function makeComputedGetter(getter, owner) {\n\t    var watcher = new Watcher(owner, getter, null, {\n\t      lazy: true\n\t    });\n\t    return function computedGetter() {\n\t      if (watcher.dirty) {\n\t        watcher.evaluate();\n\t      }\n\t      if (Dep.target) {\n\t        watcher.depend();\n\t      }\n\t      return watcher.value;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Setup instance methods. Methods must be bound to the\n\t   * instance since they might be passed down as a prop to\n\t   * child components.\n\t   */\n\t\n\t  Vue.prototype._initMethods = function () {\n\t    var methods = this.$options.methods;\n\t    if (methods) {\n\t      for (var key in methods) {\n\t        this[key] = bind(methods[key], this);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Initialize meta information like $index, $key & $value.\n\t   */\n\t\n\t  Vue.prototype._initMeta = function () {\n\t    var metas = this.$options._meta;\n\t    if (metas) {\n\t      for (var key in metas) {\n\t        defineReactive(this, key, metas[key]);\n\t      }\n\t    }\n\t  };\n\t}\n\t\n\tvar eventRE = /^v-on:|^@/;\n\t\n\tfunction eventsMixin (Vue) {\n\t  /**\n\t   * Setup the instance's option events & watchers.\n\t   * If the value is a string, we pull it from the\n\t   * instance's methods by name.\n\t   */\n\t\n\t  Vue.prototype._initEvents = function () {\n\t    var options = this.$options;\n\t    if (options._asComponent) {\n\t      registerComponentEvents(this, options.el);\n\t    }\n\t    registerCallbacks(this, '$on', options.events);\n\t    registerCallbacks(this, '$watch', options.watch);\n\t  };\n\t\n\t  /**\n\t   * Register v-on events on a child component\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {Element} el\n\t   */\n\t\n\t  function registerComponentEvents(vm, el) {\n\t    var attrs = el.attributes;\n\t    var name, value, handler;\n\t    for (var i = 0, l = attrs.length; i < l; i++) {\n\t      name = attrs[i].name;\n\t      if (eventRE.test(name)) {\n\t        name = name.replace(eventRE, '');\n\t        // force the expression into a statement so that\n\t        // it always dynamically resolves the method to call (#2670)\n\t        // kinda ugly hack, but does the job.\n\t        value = attrs[i].value;\n\t        if (isSimplePath(value)) {\n\t          value += '.apply(this, $arguments)';\n\t        }\n\t        handler = (vm._scope || vm._context).$eval(value, true);\n\t        handler._fromParent = true;\n\t        vm.$on(name.replace(eventRE), handler);\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Register callbacks for option events and watchers.\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {String} action\n\t   * @param {Object} hash\n\t   */\n\t\n\t  function registerCallbacks(vm, action, hash) {\n\t    if (!hash) return;\n\t    var handlers, key, i, j;\n\t    for (key in hash) {\n\t      handlers = hash[key];\n\t      if (isArray(handlers)) {\n\t        for (i = 0, j = handlers.length; i < j; i++) {\n\t          register(vm, action, key, handlers[i]);\n\t        }\n\t      } else {\n\t        register(vm, action, key, handlers);\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Helper to register an event/watch callback.\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {String} action\n\t   * @param {String} key\n\t   * @param {Function|String|Object} handler\n\t   * @param {Object} [options]\n\t   */\n\t\n\t  function register(vm, action, key, handler, options) {\n\t    var type = typeof handler;\n\t    if (type === 'function') {\n\t      vm[action](key, handler, options);\n\t    } else if (type === 'string') {\n\t      var methods = vm.$options.methods;\n\t      var method = methods && methods[handler];\n\t      if (method) {\n\t        vm[action](key, method, options);\n\t      } else {\n\t        (\"production\") !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n\t      }\n\t    } else if (handler && type === 'object') {\n\t      register(vm, action, key, handler.handler, handler);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Setup recursive attached/detached calls\n\t   */\n\t\n\t  Vue.prototype._initDOMHooks = function () {\n\t    this.$on('hook:attached', onAttached);\n\t    this.$on('hook:detached', onDetached);\n\t  };\n\t\n\t  /**\n\t   * Callback to recursively call attached hook on children\n\t   */\n\t\n\t  function onAttached() {\n\t    if (!this._isAttached) {\n\t      this._isAttached = true;\n\t      this.$children.forEach(callAttach);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Iterator to call attached hook\n\t   *\n\t   * @param {Vue} child\n\t   */\n\t\n\t  function callAttach(child) {\n\t    if (!child._isAttached && inDoc(child.$el)) {\n\t      child._callHook('attached');\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Callback to recursively call detached hook on children\n\t   */\n\t\n\t  function onDetached() {\n\t    if (this._isAttached) {\n\t      this._isAttached = false;\n\t      this.$children.forEach(callDetach);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Iterator to call detached hook\n\t   *\n\t   * @param {Vue} child\n\t   */\n\t\n\t  function callDetach(child) {\n\t    if (child._isAttached && !inDoc(child.$el)) {\n\t      child._callHook('detached');\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Trigger all handlers for a hook\n\t   *\n\t   * @param {String} hook\n\t   */\n\t\n\t  Vue.prototype._callHook = function (hook) {\n\t    this.$emit('pre-hook:' + hook);\n\t    var handlers = this.$options[hook];\n\t    if (handlers) {\n\t      for (var i = 0, j = handlers.length; i < j; i++) {\n\t        handlers[i].call(this);\n\t      }\n\t    }\n\t    this.$emit('hook:' + hook);\n\t  };\n\t}\n\t\n\tfunction noop$1() {}\n\t\n\t/**\n\t * A directive links a DOM element with a piece of data,\n\t * which is the result of evaluating an expression.\n\t * It registers a watcher with the expression and calls\n\t * the DOM update function when a change is triggered.\n\t *\n\t * @param {Object} descriptor\n\t *                 - {String} name\n\t *                 - {Object} def\n\t *                 - {String} expression\n\t *                 - {Array<Object>} [filters]\n\t *                 - {Object} [modifiers]\n\t *                 - {Boolean} literal\n\t *                 - {String} attr\n\t *                 - {String} arg\n\t *                 - {String} raw\n\t *                 - {String} [ref]\n\t *                 - {Array<Object>} [interp]\n\t *                 - {Boolean} [hasOneTime]\n\t * @param {Vue} vm\n\t * @param {Node} el\n\t * @param {Vue} [host] - transclusion host component\n\t * @param {Object} [scope] - v-for scope\n\t * @param {Fragment} [frag] - owner fragment\n\t * @constructor\n\t */\n\tfunction Directive(descriptor, vm, el, host, scope, frag) {\n\t  this.vm = vm;\n\t  this.el = el;\n\t  // copy descriptor properties\n\t  this.descriptor = descriptor;\n\t  this.name = descriptor.name;\n\t  this.expression = descriptor.expression;\n\t  this.arg = descriptor.arg;\n\t  this.modifiers = descriptor.modifiers;\n\t  this.filters = descriptor.filters;\n\t  this.literal = this.modifiers && this.modifiers.literal;\n\t  // private\n\t  this._locked = false;\n\t  this._bound = false;\n\t  this._listeners = null;\n\t  // link context\n\t  this._host = host;\n\t  this._scope = scope;\n\t  this._frag = frag;\n\t  // store directives on node in dev mode\n\t  if (false) {\n\t    this.el._vue_directives = this.el._vue_directives || [];\n\t    this.el._vue_directives.push(this);\n\t  }\n\t}\n\t\n\t/**\n\t * Initialize the directive, mixin definition properties,\n\t * setup the watcher, call definition bind() and update()\n\t * if present.\n\t */\n\t\n\tDirective.prototype._bind = function () {\n\t  var name = this.name;\n\t  var descriptor = this.descriptor;\n\t\n\t  // remove attribute\n\t  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n\t    var attr = descriptor.attr || 'v-' + name;\n\t    this.el.removeAttribute(attr);\n\t  }\n\t\n\t  // copy def properties\n\t  var def = descriptor.def;\n\t  if (typeof def === 'function') {\n\t    this.update = def;\n\t  } else {\n\t    extend(this, def);\n\t  }\n\t\n\t  // setup directive params\n\t  this._setupParams();\n\t\n\t  // initial bind\n\t  if (this.bind) {\n\t    this.bind();\n\t  }\n\t  this._bound = true;\n\t\n\t  if (this.literal) {\n\t    this.update && this.update(descriptor.raw);\n\t  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n\t    // wrapped updater for context\n\t    var dir = this;\n\t    if (this.update) {\n\t      this._update = function (val, oldVal) {\n\t        if (!dir._locked) {\n\t          dir.update(val, oldVal);\n\t        }\n\t      };\n\t    } else {\n\t      this._update = noop$1;\n\t    }\n\t    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n\t    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n\t    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n\t    {\n\t      filters: this.filters,\n\t      twoWay: this.twoWay,\n\t      deep: this.deep,\n\t      preProcess: preProcess,\n\t      postProcess: postProcess,\n\t      scope: this._scope\n\t    });\n\t    // v-model with inital inline value need to sync back to\n\t    // model instead of update to DOM on init. They would\n\t    // set the afterBind hook to indicate that.\n\t    if (this.afterBind) {\n\t      this.afterBind();\n\t    } else if (this.update) {\n\t      this.update(watcher.value);\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Setup all param attributes, e.g. track-by,\n\t * transition-mode, etc...\n\t */\n\t\n\tDirective.prototype._setupParams = function () {\n\t  if (!this.params) {\n\t    return;\n\t  }\n\t  var params = this.params;\n\t  // swap the params array with a fresh object.\n\t  this.params = Object.create(null);\n\t  var i = params.length;\n\t  var key, val, mappedKey;\n\t  while (i--) {\n\t    key = hyphenate(params[i]);\n\t    mappedKey = camelize(key);\n\t    val = getBindAttr(this.el, key);\n\t    if (val != null) {\n\t      // dynamic\n\t      this._setupParamWatcher(mappedKey, val);\n\t    } else {\n\t      // static\n\t      val = getAttr(this.el, key);\n\t      if (val != null) {\n\t        this.params[mappedKey] = val === '' ? true : val;\n\t      }\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Setup a watcher for a dynamic param.\n\t *\n\t * @param {String} key\n\t * @param {String} expression\n\t */\n\t\n\tDirective.prototype._setupParamWatcher = function (key, expression) {\n\t  var self = this;\n\t  var called = false;\n\t  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n\t    self.params[key] = val;\n\t    // since we are in immediate mode,\n\t    // only call the param change callbacks if this is not the first update.\n\t    if (called) {\n\t      var cb = self.paramWatchers && self.paramWatchers[key];\n\t      if (cb) {\n\t        cb.call(self, val, oldVal);\n\t      }\n\t    } else {\n\t      called = true;\n\t    }\n\t  }, {\n\t    immediate: true,\n\t    user: false\n\t  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n\t};\n\t\n\t/**\n\t * Check if the directive is a function caller\n\t * and if the expression is a callable one. If both true,\n\t * we wrap up the expression and use it as the event\n\t * handler.\n\t *\n\t * e.g. on-click=\"a++\"\n\t *\n\t * @return {Boolean}\n\t */\n\t\n\tDirective.prototype._checkStatement = function () {\n\t  var expression = this.expression;\n\t  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n\t    var fn = parseExpression$1(expression).get;\n\t    var scope = this._scope || this.vm;\n\t    var handler = function handler(e) {\n\t      scope.$event = e;\n\t      fn.call(scope, scope);\n\t      scope.$event = null;\n\t    };\n\t    if (this.filters) {\n\t      handler = scope._applyFilters(handler, null, this.filters);\n\t    }\n\t    this.update(handler);\n\t    return true;\n\t  }\n\t};\n\t\n\t/**\n\t * Set the corresponding value with the setter.\n\t * This should only be used in two-way directives\n\t * e.g. v-model.\n\t *\n\t * @param {*} value\n\t * @public\n\t */\n\t\n\tDirective.prototype.set = function (value) {\n\t  /* istanbul ignore else */\n\t  if (this.twoWay) {\n\t    this._withLock(function () {\n\t      this._watcher.set(value);\n\t    });\n\t  } else if (false) {\n\t    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n\t  }\n\t};\n\t\n\t/**\n\t * Execute a function while preventing that function from\n\t * triggering updates on this directive instance.\n\t *\n\t * @param {Function} fn\n\t */\n\t\n\tDirective.prototype._withLock = function (fn) {\n\t  var self = this;\n\t  self._locked = true;\n\t  fn.call(self);\n\t  nextTick(function () {\n\t    self._locked = false;\n\t  });\n\t};\n\t\n\t/**\n\t * Convenience method that attaches a DOM event listener\n\t * to the directive element and autometically tears it down\n\t * during unbind.\n\t *\n\t * @param {String} event\n\t * @param {Function} handler\n\t * @param {Boolean} [useCapture]\n\t */\n\t\n\tDirective.prototype.on = function (event, handler, useCapture) {\n\t  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n\t};\n\t\n\t/**\n\t * Teardown the watcher and call unbind.\n\t */\n\t\n\tDirective.prototype._teardown = function () {\n\t  if (this._bound) {\n\t    this._bound = false;\n\t    if (this.unbind) {\n\t      this.unbind();\n\t    }\n\t    if (this._watcher) {\n\t      this._watcher.teardown();\n\t    }\n\t    var listeners = this._listeners;\n\t    var i;\n\t    if (listeners) {\n\t      i = listeners.length;\n\t      while (i--) {\n\t        off(this.el, listeners[i][0], listeners[i][1]);\n\t      }\n\t    }\n\t    var unwatchFns = this._paramUnwatchFns;\n\t    if (unwatchFns) {\n\t      i = unwatchFns.length;\n\t      while (i--) {\n\t        unwatchFns[i]();\n\t      }\n\t    }\n\t    if (false) {\n\t      this.el._vue_directives.$remove(this);\n\t    }\n\t    this.vm = this.el = this._watcher = this._listeners = null;\n\t  }\n\t};\n\t\n\tfunction lifecycleMixin (Vue) {\n\t  /**\n\t   * Update v-ref for component.\n\t   *\n\t   * @param {Boolean} remove\n\t   */\n\t\n\t  Vue.prototype._updateRef = function (remove) {\n\t    var ref = this.$options._ref;\n\t    if (ref) {\n\t      var refs = (this._scope || this._context).$refs;\n\t      if (remove) {\n\t        if (refs[ref] === this) {\n\t          refs[ref] = null;\n\t        }\n\t      } else {\n\t        refs[ref] = this;\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Transclude, compile and link element.\n\t   *\n\t   * If a pre-compiled linker is available, that means the\n\t   * passed in element will be pre-transcluded and compiled\n\t   * as well - all we need to do is to call the linker.\n\t   *\n\t   * Otherwise we need to call transclude/compile/link here.\n\t   *\n\t   * @param {Element} el\n\t   */\n\t\n\t  Vue.prototype._compile = function (el) {\n\t    var options = this.$options;\n\t\n\t    // transclude and init element\n\t    // transclude can potentially replace original\n\t    // so we need to keep reference; this step also injects\n\t    // the template and caches the original attributes\n\t    // on the container node and replacer node.\n\t    var original = el;\n\t    el = transclude(el, options);\n\t    this._initElement(el);\n\t\n\t    // handle v-pre on root node (#2026)\n\t    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n\t      return;\n\t    }\n\t\n\t    // root is always compiled per-instance, because\n\t    // container attrs and props can be different every time.\n\t    var contextOptions = this._context && this._context.$options;\n\t    var rootLinker = compileRoot(el, options, contextOptions);\n\t\n\t    // resolve slot distribution\n\t    resolveSlots(this, options._content);\n\t\n\t    // compile and link the rest\n\t    var contentLinkFn;\n\t    var ctor = this.constructor;\n\t    // component compilation can be cached\n\t    // as long as it's not using inline-template\n\t    if (options._linkerCachable) {\n\t      contentLinkFn = ctor.linker;\n\t      if (!contentLinkFn) {\n\t        contentLinkFn = ctor.linker = compile(el, options);\n\t      }\n\t    }\n\t\n\t    // link phase\n\t    // make sure to link root with prop scope!\n\t    var rootUnlinkFn = rootLinker(this, el, this._scope);\n\t    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\t\n\t    // register composite unlink function\n\t    // to be called during instance destruction\n\t    this._unlinkFn = function () {\n\t      rootUnlinkFn();\n\t      // passing destroying: true to avoid searching and\n\t      // splicing the directives\n\t      contentUnlinkFn(true);\n\t    };\n\t\n\t    // finally replace original\n\t    if (options.replace) {\n\t      replace(original, el);\n\t    }\n\t\n\t    this._isCompiled = true;\n\t    this._callHook('compiled');\n\t  };\n\t\n\t  /**\n\t   * Initialize instance element. Called in the public\n\t   * $mount() method.\n\t   *\n\t   * @param {Element} el\n\t   */\n\t\n\t  Vue.prototype._initElement = function (el) {\n\t    if (isFragment(el)) {\n\t      this._isFragment = true;\n\t      this.$el = this._fragmentStart = el.firstChild;\n\t      this._fragmentEnd = el.lastChild;\n\t      // set persisted text anchors to empty\n\t      if (this._fragmentStart.nodeType === 3) {\n\t        this._fragmentStart.data = this._fragmentEnd.data = '';\n\t      }\n\t      this._fragment = el;\n\t    } else {\n\t      this.$el = el;\n\t    }\n\t    this.$el.__vue__ = this;\n\t    this._callHook('beforeCompile');\n\t  };\n\t\n\t  /**\n\t   * Create and bind a directive to an element.\n\t   *\n\t   * @param {Object} descriptor - parsed directive descriptor\n\t   * @param {Node} node   - target node\n\t   * @param {Vue} [host] - transclusion host component\n\t   * @param {Object} [scope] - v-for scope\n\t   * @param {Fragment} [frag] - owner fragment\n\t   */\n\t\n\t  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n\t    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n\t  };\n\t\n\t  /**\n\t   * Teardown an instance, unobserves the data, unbind all the\n\t   * directives, turn off all the event listeners, etc.\n\t   *\n\t   * @param {Boolean} remove - whether to remove the DOM node.\n\t   * @param {Boolean} deferCleanup - if true, defer cleanup to\n\t   *                                 be called later\n\t   */\n\t\n\t  Vue.prototype._destroy = function (remove, deferCleanup) {\n\t    if (this._isBeingDestroyed) {\n\t      if (!deferCleanup) {\n\t        this._cleanup();\n\t      }\n\t      return;\n\t    }\n\t\n\t    var destroyReady;\n\t    var pendingRemoval;\n\t\n\t    var self = this;\n\t    // Cleanup should be called either synchronously or asynchronoysly as\n\t    // callback of this.$remove(), or if remove and deferCleanup are false.\n\t    // In any case it should be called after all other removing, unbinding and\n\t    // turning of is done\n\t    var cleanupIfPossible = function cleanupIfPossible() {\n\t      if (destroyReady && !pendingRemoval && !deferCleanup) {\n\t        self._cleanup();\n\t      }\n\t    };\n\t\n\t    // remove DOM element\n\t    if (remove && this.$el) {\n\t      pendingRemoval = true;\n\t      this.$remove(function () {\n\t        pendingRemoval = false;\n\t        cleanupIfPossible();\n\t      });\n\t    }\n\t\n\t    this._callHook('beforeDestroy');\n\t    this._isBeingDestroyed = true;\n\t    var i;\n\t    // remove self from parent. only necessary\n\t    // if parent is not being destroyed as well.\n\t    var parent = this.$parent;\n\t    if (parent && !parent._isBeingDestroyed) {\n\t      parent.$children.$remove(this);\n\t      // unregister ref (remove: true)\n\t      this._updateRef(true);\n\t    }\n\t    // destroy all children.\n\t    i = this.$children.length;\n\t    while (i--) {\n\t      this.$children[i].$destroy();\n\t    }\n\t    // teardown props\n\t    if (this._propsUnlinkFn) {\n\t      this._propsUnlinkFn();\n\t    }\n\t    // teardown all directives. this also tearsdown all\n\t    // directive-owned watchers.\n\t    if (this._unlinkFn) {\n\t      this._unlinkFn();\n\t    }\n\t    i = this._watchers.length;\n\t    while (i--) {\n\t      this._watchers[i].teardown();\n\t    }\n\t    // remove reference to self on $el\n\t    if (this.$el) {\n\t      this.$el.__vue__ = null;\n\t    }\n\t\n\t    destroyReady = true;\n\t    cleanupIfPossible();\n\t  };\n\t\n\t  /**\n\t   * Clean up to ensure garbage collection.\n\t   * This is called after the leave transition if there\n\t   * is any.\n\t   */\n\t\n\t  Vue.prototype._cleanup = function () {\n\t    if (this._isDestroyed) {\n\t      return;\n\t    }\n\t    // remove self from owner fragment\n\t    // do it in cleanup so that we can call $destroy with\n\t    // defer right when a fragment is about to be removed.\n\t    if (this._frag) {\n\t      this._frag.children.$remove(this);\n\t    }\n\t    // remove reference from data ob\n\t    // frozen object may not have observer.\n\t    if (this._data && this._data.__ob__) {\n\t      this._data.__ob__.removeVm(this);\n\t    }\n\t    // Clean up references to private properties and other\n\t    // instances. preserve reference to _data so that proxy\n\t    // accessors still work. The only potential side effect\n\t    // here is that mutating the instance after it's destroyed\n\t    // may affect the state of other components that are still\n\t    // observing the same object, but that seems to be a\n\t    // reasonable responsibility for the user rather than\n\t    // always throwing an error on them.\n\t    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n\t    // call the last hook...\n\t    this._isDestroyed = true;\n\t    this._callHook('destroyed');\n\t    // turn off all instance listeners.\n\t    this.$off();\n\t  };\n\t}\n\t\n\tfunction miscMixin (Vue) {\n\t  /**\n\t   * Apply a list of filter (descriptors) to a value.\n\t   * Using plain for loops here because this will be called in\n\t   * the getter of any watcher with filters so it is very\n\t   * performance sensitive.\n\t   *\n\t   * @param {*} value\n\t   * @param {*} [oldValue]\n\t   * @param {Array} filters\n\t   * @param {Boolean} write\n\t   * @return {*}\n\t   */\n\t\n\t  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n\t    var filter, fn, args, arg, offset, i, l, j, k;\n\t    for (i = 0, l = filters.length; i < l; i++) {\n\t      filter = filters[write ? l - i - 1 : i];\n\t      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n\t      if (!fn) continue;\n\t      fn = write ? fn.write : fn.read || fn;\n\t      if (typeof fn !== 'function') continue;\n\t      args = write ? [value, oldValue] : [value];\n\t      offset = write ? 2 : 1;\n\t      if (filter.args) {\n\t        for (j = 0, k = filter.args.length; j < k; j++) {\n\t          arg = filter.args[j];\n\t          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n\t        }\n\t      }\n\t      value = fn.apply(this, args);\n\t    }\n\t    return value;\n\t  };\n\t\n\t  /**\n\t   * Resolve a component, depending on whether the component\n\t   * is defined normally or using an async factory function.\n\t   * Resolves synchronously if already resolved, otherwise\n\t   * resolves asynchronously and caches the resolved\n\t   * constructor on the factory.\n\t   *\n\t   * @param {String|Function} value\n\t   * @param {Function} cb\n\t   */\n\t\n\t  Vue.prototype._resolveComponent = function (value, cb) {\n\t    var factory;\n\t    if (typeof value === 'function') {\n\t      factory = value;\n\t    } else {\n\t      factory = resolveAsset(this.$options, 'components', value, true);\n\t    }\n\t    /* istanbul ignore if */\n\t    if (!factory) {\n\t      return;\n\t    }\n\t    // async component factory\n\t    if (!factory.options) {\n\t      if (factory.resolved) {\n\t        // cached\n\t        cb(factory.resolved);\n\t      } else if (factory.requested) {\n\t        // pool callbacks\n\t        factory.pendingCallbacks.push(cb);\n\t      } else {\n\t        factory.requested = true;\n\t        var cbs = factory.pendingCallbacks = [cb];\n\t        factory.call(this, function resolve(res) {\n\t          if (isPlainObject(res)) {\n\t            res = Vue.extend(res);\n\t          }\n\t          // cache resolved\n\t          factory.resolved = res;\n\t          // invoke callbacks\n\t          for (var i = 0, l = cbs.length; i < l; i++) {\n\t            cbs[i](res);\n\t          }\n\t        }, function reject(reason) {\n\t          (\"production\") !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n\t        });\n\t      }\n\t    } else {\n\t      // normal component\n\t      cb(factory);\n\t    }\n\t  };\n\t}\n\t\n\tvar filterRE$1 = /[^|]\\|[^|]/;\n\t\n\tfunction dataAPI (Vue) {\n\t  /**\n\t   * Get the value from an expression on this vm.\n\t   *\n\t   * @param {String} exp\n\t   * @param {Boolean} [asStatement]\n\t   * @return {*}\n\t   */\n\t\n\t  Vue.prototype.$get = function (exp, asStatement) {\n\t    var res = parseExpression$1(exp);\n\t    if (res) {\n\t      if (asStatement) {\n\t        var self = this;\n\t        return function statementHandler() {\n\t          self.$arguments = toArray(arguments);\n\t          var result = res.get.call(self, self);\n\t          self.$arguments = null;\n\t          return result;\n\t        };\n\t      } else {\n\t        try {\n\t          return res.get.call(this, this);\n\t        } catch (e) {}\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Set the value from an expression on this vm.\n\t   * The expression must be a valid left-hand\n\t   * expression in an assignment.\n\t   *\n\t   * @param {String} exp\n\t   * @param {*} val\n\t   */\n\t\n\t  Vue.prototype.$set = function (exp, val) {\n\t    var res = parseExpression$1(exp, true);\n\t    if (res && res.set) {\n\t      res.set.call(this, this, val);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Delete a property on the VM\n\t   *\n\t   * @param {String} key\n\t   */\n\t\n\t  Vue.prototype.$delete = function (key) {\n\t    del(this._data, key);\n\t  };\n\t\n\t  /**\n\t   * Watch an expression, trigger callback when its\n\t   * value changes.\n\t   *\n\t   * @param {String|Function} expOrFn\n\t   * @param {Function} cb\n\t   * @param {Object} [options]\n\t   *                 - {Boolean} deep\n\t   *                 - {Boolean} immediate\n\t   * @return {Function} - unwatchFn\n\t   */\n\t\n\t  Vue.prototype.$watch = function (expOrFn, cb, options) {\n\t    var vm = this;\n\t    var parsed;\n\t    if (typeof expOrFn === 'string') {\n\t      parsed = parseDirective(expOrFn);\n\t      expOrFn = parsed.expression;\n\t    }\n\t    var watcher = new Watcher(vm, expOrFn, cb, {\n\t      deep: options && options.deep,\n\t      sync: options && options.sync,\n\t      filters: parsed && parsed.filters,\n\t      user: !options || options.user !== false\n\t    });\n\t    if (options && options.immediate) {\n\t      cb.call(vm, watcher.value);\n\t    }\n\t    return function unwatchFn() {\n\t      watcher.teardown();\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Evaluate a text directive, including filters.\n\t   *\n\t   * @param {String} text\n\t   * @param {Boolean} [asStatement]\n\t   * @return {String}\n\t   */\n\t\n\t  Vue.prototype.$eval = function (text, asStatement) {\n\t    // check for filters.\n\t    if (filterRE$1.test(text)) {\n\t      var dir = parseDirective(text);\n\t      // the filter regex check might give false positive\n\t      // for pipes inside strings, so it's possible that\n\t      // we don't get any filters here\n\t      var val = this.$get(dir.expression, asStatement);\n\t      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n\t    } else {\n\t      // no filter\n\t      return this.$get(text, asStatement);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Interpolate a piece of template text.\n\t   *\n\t   * @param {String} text\n\t   * @return {String}\n\t   */\n\t\n\t  Vue.prototype.$interpolate = function (text) {\n\t    var tokens = parseText(text);\n\t    var vm = this;\n\t    if (tokens) {\n\t      if (tokens.length === 1) {\n\t        return vm.$eval(tokens[0].value) + '';\n\t      } else {\n\t        return tokens.map(function (token) {\n\t          return token.tag ? vm.$eval(token.value) : token.value;\n\t        }).join('');\n\t      }\n\t    } else {\n\t      return text;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Log instance data as a plain JS object\n\t   * so that it is easier to inspect in console.\n\t   * This method assumes console is available.\n\t   *\n\t   * @param {String} [path]\n\t   */\n\t\n\t  Vue.prototype.$log = function (path) {\n\t    var data = path ? getPath(this._data, path) : this._data;\n\t    if (data) {\n\t      data = clean(data);\n\t    }\n\t    // include computed fields\n\t    if (!path) {\n\t      var key;\n\t      for (key in this.$options.computed) {\n\t        data[key] = clean(this[key]);\n\t      }\n\t      if (this._props) {\n\t        for (key in this._props) {\n\t          data[key] = clean(this[key]);\n\t        }\n\t      }\n\t    }\n\t    console.log(data);\n\t  };\n\t\n\t  /**\n\t   * \"clean\" a getter/setter converted object into a plain\n\t   * object copy.\n\t   *\n\t   * @param {Object} - obj\n\t   * @return {Object}\n\t   */\n\t\n\t  function clean(obj) {\n\t    return JSON.parse(JSON.stringify(obj));\n\t  }\n\t}\n\t\n\tfunction domAPI (Vue) {\n\t  /**\n\t   * Convenience on-instance nextTick. The callback is\n\t   * auto-bound to the instance, and this avoids component\n\t   * modules having to rely on the global Vue.\n\t   *\n\t   * @param {Function} fn\n\t   */\n\t\n\t  Vue.prototype.$nextTick = function (fn) {\n\t    nextTick(fn, this);\n\t  };\n\t\n\t  /**\n\t   * Append instance to target\n\t   *\n\t   * @param {Node} target\n\t   * @param {Function} [cb]\n\t   * @param {Boolean} [withTransition] - defaults to true\n\t   */\n\t\n\t  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n\t    return insert(this, target, cb, withTransition, append, appendWithTransition);\n\t  };\n\t\n\t  /**\n\t   * Prepend instance to target\n\t   *\n\t   * @param {Node} target\n\t   * @param {Function} [cb]\n\t   * @param {Boolean} [withTransition] - defaults to true\n\t   */\n\t\n\t  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n\t    target = query(target);\n\t    if (target.hasChildNodes()) {\n\t      this.$before(target.firstChild, cb, withTransition);\n\t    } else {\n\t      this.$appendTo(target, cb, withTransition);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Insert instance before target\n\t   *\n\t   * @param {Node} target\n\t   * @param {Function} [cb]\n\t   * @param {Boolean} [withTransition] - defaults to true\n\t   */\n\t\n\t  Vue.prototype.$before = function (target, cb, withTransition) {\n\t    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n\t  };\n\t\n\t  /**\n\t   * Insert instance after target\n\t   *\n\t   * @param {Node} target\n\t   * @param {Function} [cb]\n\t   * @param {Boolean} [withTransition] - defaults to true\n\t   */\n\t\n\t  Vue.prototype.$after = function (target, cb, withTransition) {\n\t    target = query(target);\n\t    if (target.nextSibling) {\n\t      this.$before(target.nextSibling, cb, withTransition);\n\t    } else {\n\t      this.$appendTo(target.parentNode, cb, withTransition);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Remove instance from DOM\n\t   *\n\t   * @param {Function} [cb]\n\t   * @param {Boolean} [withTransition] - defaults to true\n\t   */\n\t\n\t  Vue.prototype.$remove = function (cb, withTransition) {\n\t    if (!this.$el.parentNode) {\n\t      return cb && cb();\n\t    }\n\t    var inDocument = this._isAttached && inDoc(this.$el);\n\t    // if we are not in document, no need to check\n\t    // for transitions\n\t    if (!inDocument) withTransition = false;\n\t    var self = this;\n\t    var realCb = function realCb() {\n\t      if (inDocument) self._callHook('detached');\n\t      if (cb) cb();\n\t    };\n\t    if (this._isFragment) {\n\t      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n\t    } else {\n\t      var op = withTransition === false ? removeWithCb : removeWithTransition;\n\t      op(this.$el, this, realCb);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Shared DOM insertion function.\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {Element} target\n\t   * @param {Function} [cb]\n\t   * @param {Boolean} [withTransition]\n\t   * @param {Function} op1 - op for non-transition insert\n\t   * @param {Function} op2 - op for transition insert\n\t   * @return vm\n\t   */\n\t\n\t  function insert(vm, target, cb, withTransition, op1, op2) {\n\t    target = query(target);\n\t    var targetIsDetached = !inDoc(target);\n\t    var op = withTransition === false || targetIsDetached ? op1 : op2;\n\t    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n\t    if (vm._isFragment) {\n\t      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n\t        op(node, target, vm);\n\t      });\n\t      cb && cb();\n\t    } else {\n\t      op(vm.$el, target, vm, cb);\n\t    }\n\t    if (shouldCallHook) {\n\t      vm._callHook('attached');\n\t    }\n\t    return vm;\n\t  }\n\t\n\t  /**\n\t   * Check for selectors\n\t   *\n\t   * @param {String|Element} el\n\t   */\n\t\n\t  function query(el) {\n\t    return typeof el === 'string' ? document.querySelector(el) : el;\n\t  }\n\t\n\t  /**\n\t   * Append operation that takes a callback.\n\t   *\n\t   * @param {Node} el\n\t   * @param {Node} target\n\t   * @param {Vue} vm - unused\n\t   * @param {Function} [cb]\n\t   */\n\t\n\t  function append(el, target, vm, cb) {\n\t    target.appendChild(el);\n\t    if (cb) cb();\n\t  }\n\t\n\t  /**\n\t   * InsertBefore operation that takes a callback.\n\t   *\n\t   * @param {Node} el\n\t   * @param {Node} target\n\t   * @param {Vue} vm - unused\n\t   * @param {Function} [cb]\n\t   */\n\t\n\t  function beforeWithCb(el, target, vm, cb) {\n\t    before(el, target);\n\t    if (cb) cb();\n\t  }\n\t\n\t  /**\n\t   * Remove operation that takes a callback.\n\t   *\n\t   * @param {Node} el\n\t   * @param {Vue} vm - unused\n\t   * @param {Function} [cb]\n\t   */\n\t\n\t  function removeWithCb(el, vm, cb) {\n\t    remove(el);\n\t    if (cb) cb();\n\t  }\n\t}\n\t\n\tfunction eventsAPI (Vue) {\n\t  /**\n\t   * Listen on the given `event` with `fn`.\n\t   *\n\t   * @param {String} event\n\t   * @param {Function} fn\n\t   */\n\t\n\t  Vue.prototype.$on = function (event, fn) {\n\t    (this._events[event] || (this._events[event] = [])).push(fn);\n\t    modifyListenerCount(this, event, 1);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Adds an `event` listener that will be invoked a single\n\t   * time then automatically removed.\n\t   *\n\t   * @param {String} event\n\t   * @param {Function} fn\n\t   */\n\t\n\t  Vue.prototype.$once = function (event, fn) {\n\t    var self = this;\n\t    function on() {\n\t      self.$off(event, on);\n\t      fn.apply(this, arguments);\n\t    }\n\t    on.fn = fn;\n\t    this.$on(event, on);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Remove the given callback for `event` or all\n\t   * registered callbacks.\n\t   *\n\t   * @param {String} event\n\t   * @param {Function} fn\n\t   */\n\t\n\t  Vue.prototype.$off = function (event, fn) {\n\t    var cbs;\n\t    // all\n\t    if (!arguments.length) {\n\t      if (this.$parent) {\n\t        for (event in this._events) {\n\t          cbs = this._events[event];\n\t          if (cbs) {\n\t            modifyListenerCount(this, event, -cbs.length);\n\t          }\n\t        }\n\t      }\n\t      this._events = {};\n\t      return this;\n\t    }\n\t    // specific event\n\t    cbs = this._events[event];\n\t    if (!cbs) {\n\t      return this;\n\t    }\n\t    if (arguments.length === 1) {\n\t      modifyListenerCount(this, event, -cbs.length);\n\t      this._events[event] = null;\n\t      return this;\n\t    }\n\t    // specific handler\n\t    var cb;\n\t    var i = cbs.length;\n\t    while (i--) {\n\t      cb = cbs[i];\n\t      if (cb === fn || cb.fn === fn) {\n\t        modifyListenerCount(this, event, -1);\n\t        cbs.splice(i, 1);\n\t        break;\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Trigger an event on self.\n\t   *\n\t   * @param {String|Object} event\n\t   * @return {Boolean} shouldPropagate\n\t   */\n\t\n\t  Vue.prototype.$emit = function (event) {\n\t    var isSource = typeof event === 'string';\n\t    event = isSource ? event : event.name;\n\t    var cbs = this._events[event];\n\t    var shouldPropagate = isSource || !cbs;\n\t    if (cbs) {\n\t      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n\t      // this is a somewhat hacky solution to the question raised\n\t      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n\t      // the propagation handling is somewhat broken. Therefore we\n\t      // need to treat these inline callbacks differently.\n\t      var hasParentCbs = isSource && cbs.some(function (cb) {\n\t        return cb._fromParent;\n\t      });\n\t      if (hasParentCbs) {\n\t        shouldPropagate = false;\n\t      }\n\t      var args = toArray(arguments, 1);\n\t      for (var i = 0, l = cbs.length; i < l; i++) {\n\t        var cb = cbs[i];\n\t        var res = cb.apply(this, args);\n\t        if (res === true && (!hasParentCbs || cb._fromParent)) {\n\t          shouldPropagate = true;\n\t        }\n\t      }\n\t    }\n\t    return shouldPropagate;\n\t  };\n\t\n\t  /**\n\t   * Recursively broadcast an event to all children instances.\n\t   *\n\t   * @param {String|Object} event\n\t   * @param {...*} additional arguments\n\t   */\n\t\n\t  Vue.prototype.$broadcast = function (event) {\n\t    var isSource = typeof event === 'string';\n\t    event = isSource ? event : event.name;\n\t    // if no child has registered for this event,\n\t    // then there's no need to broadcast.\n\t    if (!this._eventsCount[event]) return;\n\t    var children = this.$children;\n\t    var args = toArray(arguments);\n\t    if (isSource) {\n\t      // use object event to indicate non-source emit\n\t      // on children\n\t      args[0] = { name: event, source: this };\n\t    }\n\t    for (var i = 0, l = children.length; i < l; i++) {\n\t      var child = children[i];\n\t      var shouldPropagate = child.$emit.apply(child, args);\n\t      if (shouldPropagate) {\n\t        child.$broadcast.apply(child, args);\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Recursively propagate an event up the parent chain.\n\t   *\n\t   * @param {String} event\n\t   * @param {...*} additional arguments\n\t   */\n\t\n\t  Vue.prototype.$dispatch = function (event) {\n\t    var shouldPropagate = this.$emit.apply(this, arguments);\n\t    if (!shouldPropagate) return;\n\t    var parent = this.$parent;\n\t    var args = toArray(arguments);\n\t    // use object event to indicate non-source emit\n\t    // on parents\n\t    args[0] = { name: event, source: this };\n\t    while (parent) {\n\t      shouldPropagate = parent.$emit.apply(parent, args);\n\t      parent = shouldPropagate ? parent.$parent : null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Modify the listener counts on all parents.\n\t   * This bookkeeping allows $broadcast to return early when\n\t   * no child has listened to a certain event.\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {String} event\n\t   * @param {Number} count\n\t   */\n\t\n\t  var hookRE = /^hook:/;\n\t  function modifyListenerCount(vm, event, count) {\n\t    var parent = vm.$parent;\n\t    // hooks do not get broadcasted so no need\n\t    // to do bookkeeping for them\n\t    if (!parent || !count || hookRE.test(event)) return;\n\t    while (parent) {\n\t      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n\t      parent = parent.$parent;\n\t    }\n\t  }\n\t}\n\t\n\tfunction lifecycleAPI (Vue) {\n\t  /**\n\t   * Set instance target element and kick off the compilation\n\t   * process. The passed in `el` can be a selector string, an\n\t   * existing Element, or a DocumentFragment (for block\n\t   * instances).\n\t   *\n\t   * @param {Element|DocumentFragment|string} el\n\t   * @public\n\t   */\n\t\n\t  Vue.prototype.$mount = function (el) {\n\t    if (this._isCompiled) {\n\t      (\"production\") !== 'production' && warn('$mount() should be called only once.', this);\n\t      return;\n\t    }\n\t    el = query(el);\n\t    if (!el) {\n\t      el = document.createElement('div');\n\t    }\n\t    this._compile(el);\n\t    this._initDOMHooks();\n\t    if (inDoc(this.$el)) {\n\t      this._callHook('attached');\n\t      ready.call(this);\n\t    } else {\n\t      this.$once('hook:attached', ready);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Mark an instance as ready.\n\t   */\n\t\n\t  function ready() {\n\t    this._isAttached = true;\n\t    this._isReady = true;\n\t    this._callHook('ready');\n\t  }\n\t\n\t  /**\n\t   * Teardown the instance, simply delegate to the internal\n\t   * _destroy.\n\t   *\n\t   * @param {Boolean} remove\n\t   * @param {Boolean} deferCleanup\n\t   */\n\t\n\t  Vue.prototype.$destroy = function (remove, deferCleanup) {\n\t    this._destroy(remove, deferCleanup);\n\t  };\n\t\n\t  /**\n\t   * Partially compile a piece of DOM and return a\n\t   * decompile function.\n\t   *\n\t   * @param {Element|DocumentFragment} el\n\t   * @param {Vue} [host]\n\t   * @param {Object} [scope]\n\t   * @param {Fragment} [frag]\n\t   * @return {Function}\n\t   */\n\t\n\t  Vue.prototype.$compile = function (el, host, scope, frag) {\n\t    return compile(el, this.$options, true)(this, el, host, scope, frag);\n\t  };\n\t}\n\t\n\t/**\n\t * The exposed Vue constructor.\n\t *\n\t * API conventions:\n\t * - public API methods/properties are prefixed with `$`\n\t * - internal methods/properties are prefixed with `_`\n\t * - non-prefixed properties are assumed to be proxied user\n\t *   data.\n\t *\n\t * @constructor\n\t * @param {Object} [options]\n\t * @public\n\t */\n\t\n\tfunction Vue(options) {\n\t  this._init(options);\n\t}\n\t\n\t// install internals\n\tinitMixin(Vue);\n\tstateMixin(Vue);\n\teventsMixin(Vue);\n\tlifecycleMixin(Vue);\n\tmiscMixin(Vue);\n\t\n\t// install instance APIs\n\tdataAPI(Vue);\n\tdomAPI(Vue);\n\teventsAPI(Vue);\n\tlifecycleAPI(Vue);\n\t\n\tvar slot = {\n\t\n\t  priority: SLOT,\n\t  params: ['name'],\n\t\n\t  bind: function bind() {\n\t    // this was resolved during component transclusion\n\t    var name = this.params.name || 'default';\n\t    var content = this.vm._slotContents && this.vm._slotContents[name];\n\t    if (!content || !content.hasChildNodes()) {\n\t      this.fallback();\n\t    } else {\n\t      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n\t    }\n\t  },\n\t\n\t  compile: function compile(content, context, host) {\n\t    if (content && context) {\n\t      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n\t        // if the inserted slot has v-if\n\t        // inject fallback content as the v-else\n\t        var elseBlock = document.createElement('template');\n\t        elseBlock.setAttribute('v-else', '');\n\t        elseBlock.innerHTML = this.el.innerHTML;\n\t        // the else block should be compiled in child scope\n\t        elseBlock._context = this.vm;\n\t        content.appendChild(elseBlock);\n\t      }\n\t      var scope = host ? host._scope : this._scope;\n\t      this.unlink = context.$compile(content, host, scope, this._frag);\n\t    }\n\t    if (content) {\n\t      replace(this.el, content);\n\t    } else {\n\t      remove(this.el);\n\t    }\n\t  },\n\t\n\t  fallback: function fallback() {\n\t    this.compile(extractContent(this.el, true), this.vm);\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    if (this.unlink) {\n\t      this.unlink();\n\t    }\n\t  }\n\t};\n\t\n\tvar partial = {\n\t\n\t  priority: PARTIAL,\n\t\n\t  params: ['name'],\n\t\n\t  // watch changes to name for dynamic partials\n\t  paramWatchers: {\n\t    name: function name(value) {\n\t      vIf.remove.call(this);\n\t      if (value) {\n\t        this.insert(value);\n\t      }\n\t    }\n\t  },\n\t\n\t  bind: function bind() {\n\t    this.anchor = createAnchor('v-partial');\n\t    replace(this.el, this.anchor);\n\t    this.insert(this.params.name);\n\t  },\n\t\n\t  insert: function insert(id) {\n\t    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n\t    if (partial) {\n\t      this.factory = new FragmentFactory(this.vm, partial);\n\t      vIf.insert.call(this);\n\t    }\n\t  },\n\t\n\t  unbind: function unbind() {\n\t    if (this.frag) {\n\t      this.frag.destroy();\n\t    }\n\t  }\n\t};\n\t\n\tvar elementDirectives = {\n\t  slot: slot,\n\t  partial: partial\n\t};\n\t\n\tvar convertArray = vFor._postProcess;\n\t\n\t/**\n\t * Limit filter for arrays\n\t *\n\t * @param {Number} n\n\t * @param {Number} offset (Decimal expected)\n\t */\n\t\n\tfunction limitBy(arr, n, offset) {\n\t  offset = offset ? parseInt(offset, 10) : 0;\n\t  n = toNumber(n);\n\t  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n\t}\n\t\n\t/**\n\t * Filter filter for arrays\n\t *\n\t * @param {String} search\n\t * @param {String} [delimiter]\n\t * @param {String} ...dataKeys\n\t */\n\t\n\tfunction filterBy(arr, search, delimiter) {\n\t  arr = convertArray(arr);\n\t  if (search == null) {\n\t    return arr;\n\t  }\n\t  if (typeof search === 'function') {\n\t    return arr.filter(search);\n\t  }\n\t  // cast to lowercase string\n\t  search = ('' + search).toLowerCase();\n\t  // allow optional `in` delimiter\n\t  // because why not\n\t  var n = delimiter === 'in' ? 3 : 2;\n\t  // extract and flatten keys\n\t  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n\t  var res = [];\n\t  var item, key, val, j;\n\t  for (var i = 0, l = arr.length; i < l; i++) {\n\t    item = arr[i];\n\t    val = item && item.$value || item;\n\t    j = keys.length;\n\t    if (j) {\n\t      while (j--) {\n\t        key = keys[j];\n\t        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n\t          res.push(item);\n\t          break;\n\t        }\n\t      }\n\t    } else if (contains(item, search)) {\n\t      res.push(item);\n\t    }\n\t  }\n\t  return res;\n\t}\n\t\n\t/**\n\t * Order filter for arrays\n\t *\n\t * @param {String|Array<String>|Function} ...sortKeys\n\t * @param {Number} [order]\n\t */\n\t\n\tfunction orderBy(arr) {\n\t  var comparator = null;\n\t  var sortKeys = undefined;\n\t  arr = convertArray(arr);\n\t\n\t  // determine order (last argument)\n\t  var args = toArray(arguments, 1);\n\t  var order = args[args.length - 1];\n\t  if (typeof order === 'number') {\n\t    order = order < 0 ? -1 : 1;\n\t    args = args.length > 1 ? args.slice(0, -1) : args;\n\t  } else {\n\t    order = 1;\n\t  }\n\t\n\t  // determine sortKeys & comparator\n\t  var firstArg = args[0];\n\t  if (!firstArg) {\n\t    return arr;\n\t  } else if (typeof firstArg === 'function') {\n\t    // custom comparator\n\t    comparator = function (a, b) {\n\t      return firstArg(a, b) * order;\n\t    };\n\t  } else {\n\t    // string keys. flatten first\n\t    sortKeys = Array.prototype.concat.apply([], args);\n\t    comparator = function (a, b, i) {\n\t      i = i || 0;\n\t      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n\t    };\n\t  }\n\t\n\t  function baseCompare(a, b, sortKeyIndex) {\n\t    var sortKey = sortKeys[sortKeyIndex];\n\t    if (sortKey) {\n\t      if (sortKey !== '$key') {\n\t        if (isObject(a) && '$value' in a) a = a.$value;\n\t        if (isObject(b) && '$value' in b) b = b.$value;\n\t      }\n\t      a = isObject(a) ? getPath(a, sortKey) : a;\n\t      b = isObject(b) ? getPath(b, sortKey) : b;\n\t    }\n\t    return a === b ? 0 : a > b ? order : -order;\n\t  }\n\t\n\t  // sort on a copy to avoid mutating original array\n\t  return arr.slice().sort(comparator);\n\t}\n\t\n\t/**\n\t * String contain helper\n\t *\n\t * @param {*} val\n\t * @param {String} search\n\t */\n\t\n\tfunction contains(val, search) {\n\t  var i;\n\t  if (isPlainObject(val)) {\n\t    var keys = Object.keys(val);\n\t    i = keys.length;\n\t    while (i--) {\n\t      if (contains(val[keys[i]], search)) {\n\t        return true;\n\t      }\n\t    }\n\t  } else if (isArray(val)) {\n\t    i = val.length;\n\t    while (i--) {\n\t      if (contains(val[i], search)) {\n\t        return true;\n\t      }\n\t    }\n\t  } else if (val != null) {\n\t    return val.toString().toLowerCase().indexOf(search) > -1;\n\t  }\n\t}\n\t\n\tvar digitsRE = /(\\d{3})(?=\\d)/g;\n\t\n\t// asset collections must be a plain object.\n\tvar filters = {\n\t\n\t  orderBy: orderBy,\n\t  filterBy: filterBy,\n\t  limitBy: limitBy,\n\t\n\t  /**\n\t   * Stringify value.\n\t   *\n\t   * @param {Number} indent\n\t   */\n\t\n\t  json: {\n\t    read: function read(value, indent) {\n\t      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n\t    },\n\t    write: function write(value) {\n\t      try {\n\t        return JSON.parse(value);\n\t      } catch (e) {\n\t        return value;\n\t      }\n\t    }\n\t  },\n\t\n\t  /**\n\t   * 'abc' => 'Abc'\n\t   */\n\t\n\t  capitalize: function capitalize(value) {\n\t    if (!value && value !== 0) return '';\n\t    value = value.toString();\n\t    return value.charAt(0).toUpperCase() + value.slice(1);\n\t  },\n\t\n\t  /**\n\t   * 'abc' => 'ABC'\n\t   */\n\t\n\t  uppercase: function uppercase(value) {\n\t    return value || value === 0 ? value.toString().toUpperCase() : '';\n\t  },\n\t\n\t  /**\n\t   * 'AbC' => 'abc'\n\t   */\n\t\n\t  lowercase: function lowercase(value) {\n\t    return value || value === 0 ? value.toString().toLowerCase() : '';\n\t  },\n\t\n\t  /**\n\t   * 12345 => $12,345.00\n\t   *\n\t   * @param {String} sign\n\t   * @param {Number} decimals Decimal places\n\t   */\n\t\n\t  currency: function currency(value, _currency, decimals) {\n\t    value = parseFloat(value);\n\t    if (!isFinite(value) || !value && value !== 0) return '';\n\t    _currency = _currency != null ? _currency : '$';\n\t    decimals = decimals != null ? decimals : 2;\n\t    var stringified = Math.abs(value).toFixed(decimals);\n\t    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n\t    var i = _int.length % 3;\n\t    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n\t    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n\t    var sign = value < 0 ? '-' : '';\n\t    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n\t  },\n\t\n\t  /**\n\t   * 'item' => 'items'\n\t   *\n\t   * @params\n\t   *  an array of strings corresponding to\n\t   *  the single, double, triple ... forms of the word to\n\t   *  be pluralized. When the number to be pluralized\n\t   *  exceeds the length of the args, it will use the last\n\t   *  entry in the array.\n\t   *\n\t   *  e.g. ['single', 'double', 'triple', 'multiple']\n\t   */\n\t\n\t  pluralize: function pluralize(value) {\n\t    var args = toArray(arguments, 1);\n\t    var length = args.length;\n\t    if (length > 1) {\n\t      var index = value % 10 - 1;\n\t      return index in args ? args[index] : args[length - 1];\n\t    } else {\n\t      return args[0] + (value === 1 ? '' : 's');\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Debounce a handler function.\n\t   *\n\t   * @param {Function} handler\n\t   * @param {Number} delay = 300\n\t   * @return {Function}\n\t   */\n\t\n\t  debounce: function debounce(handler, delay) {\n\t    if (!handler) return;\n\t    if (!delay) {\n\t      delay = 300;\n\t    }\n\t    return _debounce(handler, delay);\n\t  }\n\t};\n\t\n\tfunction installGlobalAPI (Vue) {\n\t  /**\n\t   * Vue and every constructor that extends Vue has an\n\t   * associated options object, which can be accessed during\n\t   * compilation steps as `this.constructor.options`.\n\t   *\n\t   * These can be seen as the default options of every\n\t   * Vue instance.\n\t   */\n\t\n\t  Vue.options = {\n\t    directives: directives,\n\t    elementDirectives: elementDirectives,\n\t    filters: filters,\n\t    transitions: {},\n\t    components: {},\n\t    partials: {},\n\t    replace: true\n\t  };\n\t\n\t  /**\n\t   * Expose useful internals\n\t   */\n\t\n\t  Vue.util = util;\n\t  Vue.config = config;\n\t  Vue.set = set;\n\t  Vue['delete'] = del;\n\t  Vue.nextTick = nextTick;\n\t\n\t  /**\n\t   * The following are exposed for advanced usage / plugins\n\t   */\n\t\n\t  Vue.compiler = compiler;\n\t  Vue.FragmentFactory = FragmentFactory;\n\t  Vue.internalDirectives = internalDirectives;\n\t  Vue.parsers = {\n\t    path: path,\n\t    text: text,\n\t    template: template,\n\t    directive: directive,\n\t    expression: expression\n\t  };\n\t\n\t  /**\n\t   * Each instance constructor, including Vue, has a unique\n\t   * cid. This enables us to create wrapped \"child\n\t   * constructors\" for prototypal inheritance and cache them.\n\t   */\n\t\n\t  Vue.cid = 0;\n\t  var cid = 1;\n\t\n\t  /**\n\t   * Class inheritance\n\t   *\n\t   * @param {Object} extendOptions\n\t   */\n\t\n\t  Vue.extend = function (extendOptions) {\n\t    extendOptions = extendOptions || {};\n\t    var Super = this;\n\t    var isFirstExtend = Super.cid === 0;\n\t    if (isFirstExtend && extendOptions._Ctor) {\n\t      return extendOptions._Ctor;\n\t    }\n\t    var name = extendOptions.name || Super.options.name;\n\t    if (false) {\n\t      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n\t        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n\t        name = null;\n\t      }\n\t    }\n\t    var Sub = createClass(name || 'VueComponent');\n\t    Sub.prototype = Object.create(Super.prototype);\n\t    Sub.prototype.constructor = Sub;\n\t    Sub.cid = cid++;\n\t    Sub.options = mergeOptions(Super.options, extendOptions);\n\t    Sub['super'] = Super;\n\t    // allow further extension\n\t    Sub.extend = Super.extend;\n\t    // create asset registers, so extended classes\n\t    // can have their private assets too.\n\t    config._assetTypes.forEach(function (type) {\n\t      Sub[type] = Super[type];\n\t    });\n\t    // enable recursive self-lookup\n\t    if (name) {\n\t      Sub.options.components[name] = Sub;\n\t    }\n\t    // cache constructor\n\t    if (isFirstExtend) {\n\t      extendOptions._Ctor = Sub;\n\t    }\n\t    return Sub;\n\t  };\n\t\n\t  /**\n\t   * A function that returns a sub-class constructor with the\n\t   * given name. This gives us much nicer output when\n\t   * logging instances in the console.\n\t   *\n\t   * @param {String} name\n\t   * @return {Function}\n\t   */\n\t\n\t  function createClass(name) {\n\t    /* eslint-disable no-new-func */\n\t    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n\t    /* eslint-enable no-new-func */\n\t  }\n\t\n\t  /**\n\t   * Plugin system\n\t   *\n\t   * @param {Object} plugin\n\t   */\n\t\n\t  Vue.use = function (plugin) {\n\t    /* istanbul ignore if */\n\t    if (plugin.installed) {\n\t      return;\n\t    }\n\t    // additional parameters\n\t    var args = toArray(arguments, 1);\n\t    args.unshift(this);\n\t    if (typeof plugin.install === 'function') {\n\t      plugin.install.apply(plugin, args);\n\t    } else {\n\t      plugin.apply(null, args);\n\t    }\n\t    plugin.installed = true;\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Apply a global mixin by merging it into the default\n\t   * options.\n\t   */\n\t\n\t  Vue.mixin = function (mixin) {\n\t    Vue.options = mergeOptions(Vue.options, mixin);\n\t  };\n\t\n\t  /**\n\t   * Create asset registration methods with the following\n\t   * signature:\n\t   *\n\t   * @param {String} id\n\t   * @param {*} definition\n\t   */\n\t\n\t  config._assetTypes.forEach(function (type) {\n\t    Vue[type] = function (id, definition) {\n\t      if (!definition) {\n\t        return this.options[type + 's'][id];\n\t      } else {\n\t        /* istanbul ignore if */\n\t        if (false) {\n\t          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n\t            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n\t          }\n\t        }\n\t        if (type === 'component' && isPlainObject(definition)) {\n\t          if (!definition.name) {\n\t            definition.name = id;\n\t          }\n\t          definition = Vue.extend(definition);\n\t        }\n\t        this.options[type + 's'][id] = definition;\n\t        return definition;\n\t      }\n\t    };\n\t  });\n\t\n\t  // expose internal transition API\n\t  extend(Vue.transition, transition);\n\t}\n\t\n\tinstallGlobalAPI(Vue);\n\t\n\tVue.version = '1.0.28';\n\t\n\t// devtools global hook\n\t/* istanbul ignore next */\n\tsetTimeout(function () {\n\t  if (config.devtools) {\n\t    if (devtools) {\n\t      devtools.emit('init', Vue);\n\t    } else if (false) {\n\t      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n\t    }\n\t  }\n\t}, 0);\n\t\n\tmodule.exports = Vue;\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Vuex v1.0.1\n\t * (c) 2017 Evan You\n\t * Released under the MIT License.\n\t */\n\t(function (global, factory) {\n\t\t true ? module.exports = factory() :\n\t\ttypeof define === 'function' && define.amd ? define(factory) :\n\t\t(global.Vuex = factory());\n\t}(this, (function () { 'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t  return typeof obj;\n\t} : function (obj) {\n\t  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n\t};\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tvar classCallCheck = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\t\n\tvar createClass = function () {\n\t  function defineProperties(target, props) {\n\t    for (var i = 0; i < props.length; i++) {\n\t      var descriptor = props[i];\n\t      descriptor.enumerable = descriptor.enumerable || false;\n\t      descriptor.configurable = true;\n\t      if (\"value\" in descriptor) descriptor.writable = true;\n\t      Object.defineProperty(target, descriptor.key, descriptor);\n\t    }\n\t  }\n\t\n\t  return function (Constructor, protoProps, staticProps) {\n\t    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t    if (staticProps) defineProperties(Constructor, staticProps);\n\t    return Constructor;\n\t  };\n\t}();\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tvar toConsumableArray = function (arr) {\n\t  if (Array.isArray(arr)) {\n\t    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\t\n\t    return arr2;\n\t  } else {\n\t    return Array.from(arr);\n\t  }\n\t};\n\t\n\t/**\n\t * Merge an array of objects into one.\n\t *\n\t * @param {Array<Object>} arr\n\t * @return {Object}\n\t */\n\t\n\tfunction mergeObjects(arr) {\n\t  return arr.reduce(function (prev, obj) {\n\t    Object.keys(obj).forEach(function (key) {\n\t      var existing = prev[key];\n\t      if (existing) {\n\t        // allow multiple mutation objects to contain duplicate\n\t        // handlers for the same mutation type\n\t        if (Array.isArray(existing)) {\n\t          prev[key] = existing.concat(obj[key]);\n\t        } else {\n\t          prev[key] = [existing].concat(obj[key]);\n\t        }\n\t      } else {\n\t        prev[key] = obj[key];\n\t      }\n\t    });\n\t    return prev;\n\t  }, {});\n\t}\n\t\n\t/**\n\t * Deep copy the given object considering circular structure.\n\t * This function caches all nested objects and its copies.\n\t * If it detects circular structure, use cached copy to avoid infinite loop.\n\t *\n\t * @param {*} obj\n\t * @param {Array<Object>} cache\n\t * @return {*}\n\t */\n\t\n\t\n\t/**\n\t * Check whether the given value is Object or not\n\t *\n\t * @param {*} obj\n\t * @return {Boolean}\n\t */\n\t\n\tfunction isObject(obj) {\n\t  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n\t}\n\t\n\t/**\n\t * Get state sub tree by given keys.\n\t *\n\t * @param {Object} state\n\t * @param {Array<String>} nestedKeys\n\t * @return {Object}\n\t */\n\tfunction getNestedState(state, nestedKeys) {\n\t  return nestedKeys.reduce(function (state, key) {\n\t    return state[key];\n\t  }, state);\n\t}\n\t\n\t/**\n\t * Hacks to get access to Vue internals.\n\t * Maybe we should expose these...\n\t */\n\t\n\tvar Watcher = void 0;\n\tfunction getWatcher(vm) {\n\t  if (!Watcher) {\n\t    var noop = function noop() {};\n\t    var unwatch = vm.$watch(noop, noop);\n\t    Watcher = vm._watchers[0].constructor;\n\t    unwatch();\n\t  }\n\t  return Watcher;\n\t}\n\t\n\tvar Dep = void 0;\n\tfunction getDep(vm) {\n\t  if (!Dep) {\n\t    Dep = vm._data.__ob__.dep.constructor;\n\t  }\n\t  return Dep;\n\t}\n\t\n\tvar hook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\t\n\tfunction devtoolPlugin(store) {\n\t  if (!hook) return;\n\t\n\t  hook.emit('vuex:init', store);\n\t\n\t  hook.on('vuex:travel-to-state', function (targetState) {\n\t    store.replaceState(targetState);\n\t  });\n\t\n\t  store.subscribe(function (mutation, state) {\n\t    hook.emit('vuex:mutation', mutation, state);\n\t  });\n\t}\n\t\n\tvar override = function (Vue) {\n\t  var version = Number(Vue.version.split('.')[0]);\n\t\n\t  if (version >= 2) {\n\t    var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;\n\t    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });\n\t  } else {\n\t    (function () {\n\t      // override init and inject vuex init procedure\n\t      // for 1.x backwards compatibility.\n\t      var _init = Vue.prototype._init;\n\t      Vue.prototype._init = function () {\n\t        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t        options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;\n\t        _init.call(this, options);\n\t      };\n\t    })();\n\t  }\n\t\n\t  /**\n\t   * Vuex init hook, injected into each instances init hooks list.\n\t   */\n\t\n\t  function vuexInit() {\n\t    var options = this.$options;\n\t    var store = options.store,\n\t        vuex = options.vuex;\n\t    // store injection\n\t\n\t    if (store) {\n\t      this.$store = store;\n\t    } else if (options.parent && options.parent.$store) {\n\t      this.$store = options.parent.$store;\n\t    }\n\t    // vuex option handling\n\t    if (vuex) {\n\t      if (!this.$store) {\n\t        console.warn('[vuex] store not injected. make sure to ' + 'provide the store option in your root component.');\n\t      }\n\t      var state = vuex.state,\n\t          actions = vuex.actions;\n\t      var getters = vuex.getters;\n\t      // handle deprecated state option\n\t\n\t      if (state && !getters) {\n\t        console.warn('[vuex] vuex.state option will been deprecated in 1.0. ' + 'Use vuex.getters instead.');\n\t        getters = state;\n\t      }\n\t      // getters\n\t      if (getters) {\n\t        options.computed = options.computed || {};\n\t        for (var key in getters) {\n\t          defineVuexGetter(this, key, getters[key]);\n\t        }\n\t      }\n\t      // actions\n\t      if (actions) {\n\t        options.methods = options.methods || {};\n\t        for (var _key in actions) {\n\t          options.methods[_key] = makeBoundAction(this.$store, actions[_key], _key);\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Setter for all getter properties.\n\t   */\n\t\n\t  function setter() {\n\t    throw new Error('vuex getter properties are read-only.');\n\t  }\n\t\n\t  /**\n\t   * Define a Vuex getter on an instance.\n\t   *\n\t   * @param {Vue} vm\n\t   * @param {String} key\n\t   * @param {Function} getter\n\t   */\n\t\n\t  function defineVuexGetter(vm, key, getter) {\n\t    if (typeof getter !== 'function') {\n\t      console.warn('[vuex] Getter bound to key \\'vuex.getters.' + key + '\\' is not a function.');\n\t    } else {\n\t      Object.defineProperty(vm, key, {\n\t        enumerable: true,\n\t        configurable: true,\n\t        get: makeComputedGetter(vm.$store, getter),\n\t        set: setter\n\t      });\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Make a computed getter, using the same caching mechanism of computed\n\t   * properties. In addition, it is cached on the raw getter function using\n\t   * the store's unique cache id. This makes the same getter shared\n\t   * across all components use the same underlying watcher, and makes\n\t   * the getter evaluated only once during every flush.\n\t   *\n\t   * @param {Store} store\n\t   * @param {Function} getter\n\t   */\n\t\n\t  function makeComputedGetter(store, getter) {\n\t    var id = store._getterCacheId;\n\t\n\t    // cached\n\t    if (getter[id]) {\n\t      return getter[id];\n\t    }\n\t    var vm = store._vm;\n\t    var Watcher = getWatcher(vm);\n\t    var Dep = getDep(vm);\n\t    var watcher = new Watcher(vm, function (vm) {\n\t      return getter(vm.state);\n\t    }, null, { lazy: true });\n\t    var computedGetter = function computedGetter() {\n\t      if (watcher.dirty) {\n\t        watcher.evaluate();\n\t      }\n\t      if (Dep.target) {\n\t        watcher.depend();\n\t      }\n\t      return watcher.value;\n\t    };\n\t    getter[id] = computedGetter;\n\t    return computedGetter;\n\t  }\n\t\n\t  /**\n\t   * Make a bound-to-store version of a raw action function.\n\t   *\n\t   * @param {Store} store\n\t   * @param {Function} action\n\t   * @param {String} key\n\t   */\n\t\n\t  function makeBoundAction(store, action, key) {\n\t    if (typeof action !== 'function') {\n\t      console.warn('[vuex] Action bound to key \\'vuex.actions.' + key + '\\' is not a function.');\n\t    }\n\t    return function vuexBoundAction() {\n\t      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t      }\n\t\n\t      return action.call.apply(action, [this, store].concat(args));\n\t    };\n\t  }\n\t\n\t  // option merging\n\t  var merge = Vue.config.optionMergeStrategies.computed;\n\t  Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n\t    if (!toVal) return fromVal;\n\t    if (!fromVal) return toVal;\n\t    return {\n\t      getters: merge(toVal.getters, fromVal.getters),\n\t      state: merge(toVal.state, fromVal.state),\n\t      actions: merge(toVal.actions, fromVal.actions)\n\t    };\n\t  };\n\t};\n\t\n\tvar Vue = void 0;\n\tvar uid = 0;\n\t\n\tvar Store = function () {\n\t\n\t  /**\n\t   * @param {Object} options\n\t   *        - {Object} state\n\t   *        - {Object} actions\n\t   *        - {Object} mutations\n\t   *        - {Array} plugins\n\t   *        - {Boolean} strict\n\t   */\n\t\n\t  function Store() {\n\t    var _this = this;\n\t\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        _ref$state = _ref.state,\n\t        state = _ref$state === undefined ? {} : _ref$state,\n\t        _ref$mutations = _ref.mutations,\n\t        mutations = _ref$mutations === undefined ? {} : _ref$mutations,\n\t        _ref$modules = _ref.modules,\n\t        modules = _ref$modules === undefined ? {} : _ref$modules,\n\t        _ref$plugins = _ref.plugins,\n\t        plugins = _ref$plugins === undefined ? [] : _ref$plugins,\n\t        _ref$strict = _ref.strict,\n\t        strict = _ref$strict === undefined ? false : _ref$strict;\n\t\n\t    classCallCheck(this, Store);\n\t\n\t    this._getterCacheId = 'vuex_store_' + uid++;\n\t    this._dispatching = false;\n\t    this._rootMutations = this._mutations = mutations;\n\t    this._modules = modules;\n\t    this._subscribers = [];\n\t    // bind dispatch to self\n\t    var dispatch = this.dispatch;\n\t    this.dispatch = function () {\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      dispatch.apply(_this, args);\n\t    };\n\t    // use a Vue instance to store the state tree\n\t    // suppress warnings just in case the user has added\n\t    // some funky global mixins\n\t    if (!Vue) {\n\t      throw new Error('[vuex] must call Vue.use(Vuex) before creating a store instance.');\n\t    }\n\t    var silent = Vue.config.silent;\n\t    Vue.config.silent = true;\n\t    this._vm = new Vue({\n\t      data: {\n\t        state: state\n\t      }\n\t    });\n\t    Vue.config.silent = silent;\n\t    this._setupModuleState(state, modules);\n\t    this._setupModuleMutations(modules);\n\t    // add extra warnings in strict mode\n\t    if (strict) {\n\t      this._setupMutationCheck();\n\t    }\n\t    // apply plugins\n\t    devtoolPlugin(this);\n\t    plugins.forEach(function (plugin) {\n\t      return plugin(_this);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Getter for the entire state tree.\n\t   * Read only.\n\t   *\n\t   * @return {Object}\n\t   */\n\t\n\t  createClass(Store, [{\n\t    key: 'replaceState',\n\t\n\t\n\t    /**\n\t     * Replace root state.\n\t     *\n\t     * @param {Object} state\n\t     */\n\t\n\t    value: function replaceState(state) {\n\t      this._dispatching = true;\n\t      this._vm.state = state;\n\t      this._dispatching = false;\n\t    }\n\t\n\t    /**\n\t     * Dispatch an action.\n\t     *\n\t     * @param {String} type\n\t     */\n\t\n\t  }, {\n\t    key: 'dispatch',\n\t    value: function dispatch(type) {\n\t      var _this2 = this;\n\t\n\t      for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        payload[_key2 - 1] = arguments[_key2];\n\t      }\n\t\n\t      var silent = false;\n\t      var isObjectStyleDispatch = false;\n\t      // compatibility for object actions, e.g. FSA\n\t      if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type.type && arguments.length === 1) {\n\t        isObjectStyleDispatch = true;\n\t        payload = type;\n\t        if (type.silent) silent = true;\n\t        type = type.type;\n\t      }\n\t      var handler = this._mutations[type];\n\t      var state = this.state;\n\t      if (handler) {\n\t        this._dispatching = true;\n\t        // apply the mutation\n\t        if (Array.isArray(handler)) {\n\t          handler.forEach(function (h) {\n\t            isObjectStyleDispatch ? h(state, payload) : h.apply(undefined, [state].concat(toConsumableArray(payload)));\n\t          });\n\t        } else {\n\t          isObjectStyleDispatch ? handler(state, payload) : handler.apply(undefined, [state].concat(toConsumableArray(payload)));\n\t        }\n\t        this._dispatching = false;\n\t        if (!silent) {\n\t          (function () {\n\t            var mutation = isObjectStyleDispatch ? payload : { type: type, payload: payload };\n\t            _this2._subscribers.forEach(function (sub) {\n\t              return sub(mutation, state);\n\t            });\n\t          })();\n\t        }\n\t      } else {\n\t        console.warn('[vuex] Unknown mutation: ' + type);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Watch state changes on the store.\n\t     * Same API as Vue's $watch, except when watching a function,\n\t     * the function gets the state as the first argument.\n\t     *\n\t     * @param {Function} fn\n\t     * @param {Function} cb\n\t     * @param {Object} [options]\n\t     */\n\t\n\t  }, {\n\t    key: 'watch',\n\t    value: function watch(fn, cb, options) {\n\t      var _this3 = this;\n\t\n\t      if (typeof fn !== 'function') {\n\t        console.error('Vuex store.watch only accepts function.');\n\t        return;\n\t      }\n\t      return this._vm.$watch(function () {\n\t        return fn(_this3.state);\n\t      }, cb, options);\n\t    }\n\t\n\t    /**\n\t     * Subscribe to state changes. Fires after every mutation.\n\t     */\n\t\n\t  }, {\n\t    key: 'subscribe',\n\t    value: function subscribe(fn) {\n\t      var subs = this._subscribers;\n\t      if (subs.indexOf(fn) < 0) {\n\t        subs.push(fn);\n\t      }\n\t      return function () {\n\t        var i = subs.indexOf(fn);\n\t        if (i > -1) {\n\t          subs.splice(i, 1);\n\t        }\n\t      };\n\t    }\n\t\n\t    /**\n\t     * Hot update mutations & modules.\n\t     *\n\t     * @param {Object} options\n\t     *        - {Object} [mutations]\n\t     *        - {Object} [modules]\n\t     */\n\t\n\t  }, {\n\t    key: 'hotUpdate',\n\t    value: function hotUpdate() {\n\t      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t          mutations = _ref2.mutations,\n\t          modules = _ref2.modules;\n\t\n\t      this._rootMutations = this._mutations = mutations || this._rootMutations;\n\t      this._setupModuleMutations(modules || this._modules);\n\t    }\n\t\n\t    /**\n\t     * Attach sub state tree of each module to the root tree.\n\t     *\n\t     * @param {Object} state\n\t     * @param {Object} modules\n\t     */\n\t\n\t  }, {\n\t    key: '_setupModuleState',\n\t    value: function _setupModuleState(state, modules) {\n\t      var _this4 = this;\n\t\n\t      if (!isObject(modules)) return;\n\t\n\t      Object.keys(modules).forEach(function (key) {\n\t        var module = modules[key];\n\t\n\t        // set this module's state\n\t        Vue.set(state, key, module.state || {});\n\t\n\t        // retrieve nested modules\n\t        _this4._setupModuleState(state[key], module.modules);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Bind mutations for each module to its sub tree and\n\t     * merge them all into one final mutations map.\n\t     *\n\t     * @param {Object} updatedModules\n\t     */\n\t\n\t  }, {\n\t    key: '_setupModuleMutations',\n\t    value: function _setupModuleMutations(updatedModules) {\n\t      var modules = this._modules;\n\t      Object.keys(updatedModules).forEach(function (key) {\n\t        modules[key] = updatedModules[key];\n\t      });\n\t      var updatedMutations = this._createModuleMutations(modules, []);\n\t      this._mutations = mergeObjects([this._rootMutations].concat(toConsumableArray(updatedMutations)));\n\t    }\n\t\n\t    /**\n\t     * Helper method for _setupModuleMutations.\n\t     * The method retrieve nested sub modules and\n\t     * bind each mutations to its sub tree recursively.\n\t     *\n\t     * @param {Object} modules\n\t     * @param {Array<String>} nestedKeys\n\t     * @return {Array<Object>}\n\t     */\n\t\n\t  }, {\n\t    key: '_createModuleMutations',\n\t    value: function _createModuleMutations(modules, nestedKeys) {\n\t      var _this5 = this;\n\t\n\t      if (!isObject(modules)) return [];\n\t\n\t      return Object.keys(modules).map(function (key) {\n\t        var module = modules[key];\n\t        var newNestedKeys = nestedKeys.concat(key);\n\t\n\t        // retrieve nested modules\n\t        var nestedMutations = _this5._createModuleMutations(module.modules, newNestedKeys);\n\t\n\t        if (!module || !module.mutations) {\n\t          return mergeObjects(nestedMutations);\n\t        }\n\t\n\t        // bind mutations to sub state tree\n\t        var mutations = {};\n\t        Object.keys(module.mutations).forEach(function (name) {\n\t          var original = module.mutations[name];\n\t          mutations[name] = function (state) {\n\t            for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t              args[_key3 - 1] = arguments[_key3];\n\t            }\n\t\n\t            original.apply(undefined, [getNestedState(state, newNestedKeys)].concat(args));\n\t          };\n\t        });\n\t\n\t        // merge mutations of this module and nested modules\n\t        return mergeObjects([mutations].concat(toConsumableArray(nestedMutations)));\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Setup mutation check: if the Vuex instance's state is mutated\n\t     * outside of a mutation handler, we throw en error. This effectively\n\t     * enforces all mutations to the state to be trackable and hot-reloadable.\n\t     * However, this comes at a run time cost since we are doing a deep\n\t     * watch on the entire state tree, so it is only enabled if the\n\t     * strict option is set to true.\n\t     */\n\t\n\t  }, {\n\t    key: '_setupMutationCheck',\n\t    value: function _setupMutationCheck() {\n\t      var _this6 = this;\n\t\n\t      var Watcher = getWatcher(this._vm);\n\t      /* eslint-disable no-new */\n\t      new Watcher(this._vm, 'state', function () {\n\t        if (!_this6._dispatching) {\n\t          throw new Error('[vuex] Do not mutate vuex store state outside mutation handlers.');\n\t        }\n\t      }, { deep: true, sync: true });\n\t      /* eslint-enable no-new */\n\t    }\n\t  }, {\n\t    key: 'state',\n\t    get: function get$$1() {\n\t      return this._vm.state;\n\t    },\n\t    set: function set$$1(v) {\n\t      throw new Error('[vuex] Use store.replaceState() to explicit replace store state.');\n\t    }\n\t  }]);\n\t  return Store;\n\t}();\n\t\n\tfunction install(_Vue) {\n\t  if (Vue) {\n\t    console.warn('[vuex] already installed. Vue.use(Vuex) should be called only once.');\n\t    return;\n\t  }\n\t  Vue = _Vue;\n\t  override(Vue);\n\t}\n\t\n\t// auto install in dist mode\n\tif (typeof window !== 'undefined' && window.Vue) {\n\t  install(window.Vue);\n\t}\n\t\n\tvar index = {\n\t  Store: Store,\n\t  install: install\n\t};\n\t\n\treturn index;\n\t\n\t})));\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/vendor.0ad8be03111db2f40424.js","/*!\n * Vue.js v1.0.28\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delimited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([^-])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return (/native code/.test(Ctor.toString())\n  );\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc = undefined;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var noop = function noop() {};\n    timerFunc = function () {\n      p.then(nextTickHandler);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) setTimeout(noop);\n    };\n  } else if (typeof MutationObserver !== 'undefined') {\n    // use MutationObserver where native Promise is not available,\n    // e.g. IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = setTimeout;\n  }\n\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar len;\nvar index;\nvar chr;\nvar state;\nvar startState = 0;\nvar filterState = 1;\nvar filterNameState = 2;\nvar filterArgState = 3;\n\nvar doubleChr = 0x22;\nvar singleChr = 0x27;\nvar pipeChr = 0x7C;\nvar escapeChr = 0x5C;\nvar spaceChr = 0x20;\n\nvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\nvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\n\nfunction peek() {\n  return str.charCodeAt(index + 1);\n}\n\nfunction next() {\n  return str.charCodeAt(++index);\n}\n\nfunction eof() {\n  return index >= len;\n}\n\nfunction eatSpace() {\n  while (peek() === spaceChr) {\n    next();\n  }\n}\n\nfunction isStringStart(chr) {\n  return chr === doubleChr || chr === singleChr;\n}\n\nfunction isExpStart(chr) {\n  return expStartChr[chr];\n}\n\nfunction isExpEnd(start, chr) {\n  return expChrPair[start] === chr;\n}\n\nfunction parseString() {\n  var stringQuote = next();\n  var chr;\n  while (!eof()) {\n    chr = next();\n    // escape char\n    if (chr === escapeChr) {\n      next();\n    } else if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\nfunction parseSpecialExp(chr) {\n  var inExp = 0;\n  var startChr = chr;\n\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n      continue;\n    }\n\n    if (startChr === chr) {\n      inExp++;\n    }\n    if (isExpEnd(startChr, chr)) {\n      inExp--;\n    }\n\n    next();\n\n    if (inExp === 0) {\n      break;\n    }\n  }\n}\n\n/**\n * syntax:\n * expression | filterName  [arg  arg [| filterName arg arg]]\n */\n\nfunction parseExpression() {\n  var start = index;\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n    } else if (isExpStart(chr)) {\n      parseSpecialExp(chr);\n    } else if (chr === pipeChr) {\n      next();\n      chr = peek();\n      if (chr === pipeChr) {\n        next();\n      } else {\n        if (state === startState || state === filterArgState) {\n          state = filterState;\n        }\n        break;\n      }\n    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\n      eatSpace();\n      break;\n    } else {\n      if (state === filterState) {\n        state = filterNameState;\n      }\n      next();\n    }\n  }\n\n  return str.slice(start + 1, index) || null;\n}\n\nfunction parseFilterList() {\n  var filters = [];\n  while (!eof()) {\n    filters.push(parseFilter());\n  }\n  return filters;\n}\n\nfunction parseFilter() {\n  var filter = {};\n  var args;\n\n  state = filterState;\n  filter.name = parseExpression().trim();\n\n  state = filterArgState;\n  args = parseFilterArguments();\n\n  if (args.length) {\n    filter.args = args;\n  }\n  return filter;\n}\n\nfunction parseFilterArguments() {\n  var args = [];\n  while (!eof() && state !== filterState) {\n    var arg = parseExpression();\n    if (!arg) {\n      break;\n    }\n    args.push(processFilterArg(arg));\n  }\n\n  return args;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  dir = {};\n  len = str.length;\n  index = -1;\n  chr = '';\n  state = startState;\n\n  var filters;\n\n  if (str.indexOf('|') < 0) {\n    dir.expression = str.trim();\n  } else {\n    dir.expression = parseExpression().trim();\n    filters = parseFilterList();\n    if (filters.length) {\n      dir.filters = filters;\n    }\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to register itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression$1(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression$1(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression$1(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression$1,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression$1(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {\n      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\n    }\n\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new instance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.get();\n      if (isArray(model)) {\n        var val = self.getValue();\n        var i = indexOf(model, val);\n        if (el.checked) {\n          if (i < 0) {\n            self.set(model.concat(val));\n          }\n        } else if (i > -1) {\n          self.set(model.slice(0, i).concat(model.slice(i + 1)));\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// logic control\n// two-way binding\n// event handling\n// attributes\n// ref & el\n// cloak\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var propsData = vm.$options.propsData;\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\n      // has propsData\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  sortDirectives(dirs);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * sort directives by priority (stable sort)\n *\n * @param {Array} dirs\n */\nfunction sortDirectives(dirs) {\n  if (dirs.length === 0) return;\n\n  var groupedMap = {};\n  var i, j, k, l;\n  var index = 0;\n  var priorities = [];\n  for (i = 0, j = dirs.length; i < j; i++) {\n    var dir = dirs[i];\n    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\n    var array = groupedMap[priority];\n    if (!array) {\n      array = groupedMap[priority] = [];\n      priorities.push(priority);\n    }\n    array.push(dir);\n  }\n\n  priorities.sort(function (a, b) {\n    return a > b ? -1 : a === b ? 0 : 1;\n  });\n  for (i = 0, j = priorities.length; i < j; i++) {\n    var group = groupedMap[priorities[i]];\n    for (k = 0, l = group.length; k < l; k++) {\n      dirs[index++] = group[k];\n    }\n  }\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n\n      var componentName = options.el.tagName.toLowerCase();\n      if (componentName === 'component' && options.name) {\n        componentName += ':' + options.name;\n      }\n\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    // a textarea which has v-pre attr should skip complie.\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for, v-if and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    if (!replacer) {\n      return frag;\n    }\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression$1(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression$1(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression$1(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Order filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.28';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue@1.0.28@vue/dist/vue.common.js\n// module id = 1\n// module chunks = 2","/*!\n * Vuex v1.0.1\n * (c) 2017 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Vuex = factory());\n}(this, (function () { 'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/**\n * Merge an array of objects into one.\n *\n * @param {Array<Object>} arr\n * @return {Object}\n */\n\nfunction mergeObjects(arr) {\n  return arr.reduce(function (prev, obj) {\n    Object.keys(obj).forEach(function (key) {\n      var existing = prev[key];\n      if (existing) {\n        // allow multiple mutation objects to contain duplicate\n        // handlers for the same mutation type\n        if (Array.isArray(existing)) {\n          prev[key] = existing.concat(obj[key]);\n        } else {\n          prev[key] = [existing].concat(obj[key]);\n        }\n      } else {\n        prev[key] = obj[key];\n      }\n    });\n    return prev;\n  }, {});\n}\n\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * Check whether the given value is Object or not\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n}\n\n/**\n * Get state sub tree by given keys.\n *\n * @param {Object} state\n * @param {Array<String>} nestedKeys\n * @return {Object}\n */\nfunction getNestedState(state, nestedKeys) {\n  return nestedKeys.reduce(function (state, key) {\n    return state[key];\n  }, state);\n}\n\n/**\n * Hacks to get access to Vue internals.\n * Maybe we should expose these...\n */\n\nvar Watcher = void 0;\nfunction getWatcher(vm) {\n  if (!Watcher) {\n    var noop = function noop() {};\n    var unwatch = vm.$watch(noop, noop);\n    Watcher = vm._watchers[0].constructor;\n    unwatch();\n  }\n  return Watcher;\n}\n\nvar Dep = void 0;\nfunction getDep(vm) {\n  if (!Dep) {\n    Dep = vm._data.__ob__.dep.constructor;\n  }\n  return Dep;\n}\n\nvar hook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin(store) {\n  if (!hook) return;\n\n  hook.emit('vuex:init', store);\n\n  hook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    hook.emit('vuex:mutation', mutation, state);\n  });\n}\n\nvar override = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;\n    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });\n  } else {\n    (function () {\n      // override init and inject vuex init procedure\n      // for 1.x backwards compatibility.\n      var _init = Vue.prototype._init;\n      Vue.prototype._init = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;\n        _init.call(this, options);\n      };\n    })();\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit() {\n    var options = this.$options;\n    var store = options.store,\n        vuex = options.vuex;\n    // store injection\n\n    if (store) {\n      this.$store = store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n    // vuex option handling\n    if (vuex) {\n      if (!this.$store) {\n        console.warn('[vuex] store not injected. make sure to ' + 'provide the store option in your root component.');\n      }\n      var state = vuex.state,\n          actions = vuex.actions;\n      var getters = vuex.getters;\n      // handle deprecated state option\n\n      if (state && !getters) {\n        console.warn('[vuex] vuex.state option will been deprecated in 1.0. ' + 'Use vuex.getters instead.');\n        getters = state;\n      }\n      // getters\n      if (getters) {\n        options.computed = options.computed || {};\n        for (var key in getters) {\n          defineVuexGetter(this, key, getters[key]);\n        }\n      }\n      // actions\n      if (actions) {\n        options.methods = options.methods || {};\n        for (var _key in actions) {\n          options.methods[_key] = makeBoundAction(this.$store, actions[_key], _key);\n        }\n      }\n    }\n  }\n\n  /**\n   * Setter for all getter properties.\n   */\n\n  function setter() {\n    throw new Error('vuex getter properties are read-only.');\n  }\n\n  /**\n   * Define a Vuex getter on an instance.\n   *\n   * @param {Vue} vm\n   * @param {String} key\n   * @param {Function} getter\n   */\n\n  function defineVuexGetter(vm, key, getter) {\n    if (typeof getter !== 'function') {\n      console.warn('[vuex] Getter bound to key \\'vuex.getters.' + key + '\\' is not a function.');\n    } else {\n      Object.defineProperty(vm, key, {\n        enumerable: true,\n        configurable: true,\n        get: makeComputedGetter(vm.$store, getter),\n        set: setter\n      });\n    }\n  }\n\n  /**\n   * Make a computed getter, using the same caching mechanism of computed\n   * properties. In addition, it is cached on the raw getter function using\n   * the store's unique cache id. This makes the same getter shared\n   * across all components use the same underlying watcher, and makes\n   * the getter evaluated only once during every flush.\n   *\n   * @param {Store} store\n   * @param {Function} getter\n   */\n\n  function makeComputedGetter(store, getter) {\n    var id = store._getterCacheId;\n\n    // cached\n    if (getter[id]) {\n      return getter[id];\n    }\n    var vm = store._vm;\n    var Watcher = getWatcher(vm);\n    var Dep = getDep(vm);\n    var watcher = new Watcher(vm, function (vm) {\n      return getter(vm.state);\n    }, null, { lazy: true });\n    var computedGetter = function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n    getter[id] = computedGetter;\n    return computedGetter;\n  }\n\n  /**\n   * Make a bound-to-store version of a raw action function.\n   *\n   * @param {Store} store\n   * @param {Function} action\n   * @param {String} key\n   */\n\n  function makeBoundAction(store, action, key) {\n    if (typeof action !== 'function') {\n      console.warn('[vuex] Action bound to key \\'vuex.actions.' + key + '\\' is not a function.');\n    }\n    return function vuexBoundAction() {\n      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return action.call.apply(action, [this, store].concat(args));\n    };\n  }\n\n  // option merging\n  var merge = Vue.config.optionMergeStrategies.computed;\n  Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n    if (!toVal) return fromVal;\n    if (!fromVal) return toVal;\n    return {\n      getters: merge(toVal.getters, fromVal.getters),\n      state: merge(toVal.state, fromVal.state),\n      actions: merge(toVal.actions, fromVal.actions)\n    };\n  };\n};\n\nvar Vue = void 0;\nvar uid = 0;\n\nvar Store = function () {\n\n  /**\n   * @param {Object} options\n   *        - {Object} state\n   *        - {Object} actions\n   *        - {Object} mutations\n   *        - {Array} plugins\n   *        - {Boolean} strict\n   */\n\n  function Store() {\n    var _this = this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$state = _ref.state,\n        state = _ref$state === undefined ? {} : _ref$state,\n        _ref$mutations = _ref.mutations,\n        mutations = _ref$mutations === undefined ? {} : _ref$mutations,\n        _ref$modules = _ref.modules,\n        modules = _ref$modules === undefined ? {} : _ref$modules,\n        _ref$plugins = _ref.plugins,\n        plugins = _ref$plugins === undefined ? [] : _ref$plugins,\n        _ref$strict = _ref.strict,\n        strict = _ref$strict === undefined ? false : _ref$strict;\n\n    classCallCheck(this, Store);\n\n    this._getterCacheId = 'vuex_store_' + uid++;\n    this._dispatching = false;\n    this._rootMutations = this._mutations = mutations;\n    this._modules = modules;\n    this._subscribers = [];\n    // bind dispatch to self\n    var dispatch = this.dispatch;\n    this.dispatch = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      dispatch.apply(_this, args);\n    };\n    // use a Vue instance to store the state tree\n    // suppress warnings just in case the user has added\n    // some funky global mixins\n    if (!Vue) {\n      throw new Error('[vuex] must call Vue.use(Vuex) before creating a store instance.');\n    }\n    var silent = Vue.config.silent;\n    Vue.config.silent = true;\n    this._vm = new Vue({\n      data: {\n        state: state\n      }\n    });\n    Vue.config.silent = silent;\n    this._setupModuleState(state, modules);\n    this._setupModuleMutations(modules);\n    // add extra warnings in strict mode\n    if (strict) {\n      this._setupMutationCheck();\n    }\n    // apply plugins\n    devtoolPlugin(this);\n    plugins.forEach(function (plugin) {\n      return plugin(_this);\n    });\n  }\n\n  /**\n   * Getter for the entire state tree.\n   * Read only.\n   *\n   * @return {Object}\n   */\n\n  createClass(Store, [{\n    key: 'replaceState',\n\n\n    /**\n     * Replace root state.\n     *\n     * @param {Object} state\n     */\n\n    value: function replaceState(state) {\n      this._dispatching = true;\n      this._vm.state = state;\n      this._dispatching = false;\n    }\n\n    /**\n     * Dispatch an action.\n     *\n     * @param {String} type\n     */\n\n  }, {\n    key: 'dispatch',\n    value: function dispatch(type) {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        payload[_key2 - 1] = arguments[_key2];\n      }\n\n      var silent = false;\n      var isObjectStyleDispatch = false;\n      // compatibility for object actions, e.g. FSA\n      if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type.type && arguments.length === 1) {\n        isObjectStyleDispatch = true;\n        payload = type;\n        if (type.silent) silent = true;\n        type = type.type;\n      }\n      var handler = this._mutations[type];\n      var state = this.state;\n      if (handler) {\n        this._dispatching = true;\n        // apply the mutation\n        if (Array.isArray(handler)) {\n          handler.forEach(function (h) {\n            isObjectStyleDispatch ? h(state, payload) : h.apply(undefined, [state].concat(toConsumableArray(payload)));\n          });\n        } else {\n          isObjectStyleDispatch ? handler(state, payload) : handler.apply(undefined, [state].concat(toConsumableArray(payload)));\n        }\n        this._dispatching = false;\n        if (!silent) {\n          (function () {\n            var mutation = isObjectStyleDispatch ? payload : { type: type, payload: payload };\n            _this2._subscribers.forEach(function (sub) {\n              return sub(mutation, state);\n            });\n          })();\n        }\n      } else {\n        console.warn('[vuex] Unknown mutation: ' + type);\n      }\n    }\n\n    /**\n     * Watch state changes on the store.\n     * Same API as Vue's $watch, except when watching a function,\n     * the function gets the state as the first argument.\n     *\n     * @param {Function} fn\n     * @param {Function} cb\n     * @param {Object} [options]\n     */\n\n  }, {\n    key: 'watch',\n    value: function watch(fn, cb, options) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') {\n        console.error('Vuex store.watch only accepts function.');\n        return;\n      }\n      return this._vm.$watch(function () {\n        return fn(_this3.state);\n      }, cb, options);\n    }\n\n    /**\n     * Subscribe to state changes. Fires after every mutation.\n     */\n\n  }, {\n    key: 'subscribe',\n    value: function subscribe(fn) {\n      var subs = this._subscribers;\n      if (subs.indexOf(fn) < 0) {\n        subs.push(fn);\n      }\n      return function () {\n        var i = subs.indexOf(fn);\n        if (i > -1) {\n          subs.splice(i, 1);\n        }\n      };\n    }\n\n    /**\n     * Hot update mutations & modules.\n     *\n     * @param {Object} options\n     *        - {Object} [mutations]\n     *        - {Object} [modules]\n     */\n\n  }, {\n    key: 'hotUpdate',\n    value: function hotUpdate() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          mutations = _ref2.mutations,\n          modules = _ref2.modules;\n\n      this._rootMutations = this._mutations = mutations || this._rootMutations;\n      this._setupModuleMutations(modules || this._modules);\n    }\n\n    /**\n     * Attach sub state tree of each module to the root tree.\n     *\n     * @param {Object} state\n     * @param {Object} modules\n     */\n\n  }, {\n    key: '_setupModuleState',\n    value: function _setupModuleState(state, modules) {\n      var _this4 = this;\n\n      if (!isObject(modules)) return;\n\n      Object.keys(modules).forEach(function (key) {\n        var module = modules[key];\n\n        // set this module's state\n        Vue.set(state, key, module.state || {});\n\n        // retrieve nested modules\n        _this4._setupModuleState(state[key], module.modules);\n      });\n    }\n\n    /**\n     * Bind mutations for each module to its sub tree and\n     * merge them all into one final mutations map.\n     *\n     * @param {Object} updatedModules\n     */\n\n  }, {\n    key: '_setupModuleMutations',\n    value: function _setupModuleMutations(updatedModules) {\n      var modules = this._modules;\n      Object.keys(updatedModules).forEach(function (key) {\n        modules[key] = updatedModules[key];\n      });\n      var updatedMutations = this._createModuleMutations(modules, []);\n      this._mutations = mergeObjects([this._rootMutations].concat(toConsumableArray(updatedMutations)));\n    }\n\n    /**\n     * Helper method for _setupModuleMutations.\n     * The method retrieve nested sub modules and\n     * bind each mutations to its sub tree recursively.\n     *\n     * @param {Object} modules\n     * @param {Array<String>} nestedKeys\n     * @return {Array<Object>}\n     */\n\n  }, {\n    key: '_createModuleMutations',\n    value: function _createModuleMutations(modules, nestedKeys) {\n      var _this5 = this;\n\n      if (!isObject(modules)) return [];\n\n      return Object.keys(modules).map(function (key) {\n        var module = modules[key];\n        var newNestedKeys = nestedKeys.concat(key);\n\n        // retrieve nested modules\n        var nestedMutations = _this5._createModuleMutations(module.modules, newNestedKeys);\n\n        if (!module || !module.mutations) {\n          return mergeObjects(nestedMutations);\n        }\n\n        // bind mutations to sub state tree\n        var mutations = {};\n        Object.keys(module.mutations).forEach(function (name) {\n          var original = module.mutations[name];\n          mutations[name] = function (state) {\n            for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n              args[_key3 - 1] = arguments[_key3];\n            }\n\n            original.apply(undefined, [getNestedState(state, newNestedKeys)].concat(args));\n          };\n        });\n\n        // merge mutations of this module and nested modules\n        return mergeObjects([mutations].concat(toConsumableArray(nestedMutations)));\n      });\n    }\n\n    /**\n     * Setup mutation check: if the Vuex instance's state is mutated\n     * outside of a mutation handler, we throw en error. This effectively\n     * enforces all mutations to the state to be trackable and hot-reloadable.\n     * However, this comes at a run time cost since we are doing a deep\n     * watch on the entire state tree, so it is only enabled if the\n     * strict option is set to true.\n     */\n\n  }, {\n    key: '_setupMutationCheck',\n    value: function _setupMutationCheck() {\n      var _this6 = this;\n\n      var Watcher = getWatcher(this._vm);\n      /* eslint-disable no-new */\n      new Watcher(this._vm, 'state', function () {\n        if (!_this6._dispatching) {\n          throw new Error('[vuex] Do not mutate vuex store state outside mutation handlers.');\n        }\n      }, { deep: true, sync: true });\n      /* eslint-enable no-new */\n    }\n  }, {\n    key: 'state',\n    get: function get$$1() {\n      return this._vm.state;\n    },\n    set: function set$$1(v) {\n      throw new Error('[vuex] Use store.replaceState() to explicit replace store state.');\n    }\n  }]);\n  return Store;\n}();\n\nfunction install(_Vue) {\n  if (Vue) {\n    console.warn('[vuex] already installed. Vue.use(Vuex) should be called only once.');\n    return;\n  }\n  Vue = _Vue;\n  override(Vue);\n}\n\n// auto install in dist mode\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\nvar index = {\n  Store: Store,\n  install: install\n};\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vuex@1.0.1@vuex/dist/vuex.js\n// module id = 17\n// module chunks = 2"],"sourceRoot":""}